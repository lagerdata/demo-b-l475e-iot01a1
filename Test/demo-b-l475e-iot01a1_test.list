
demo-b-l475e-iot01a1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d68  08005d68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  20000070  08005de0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08005de0  00020780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3db  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033bd  00000000  00000000  0003b47b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  0003e838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001608  00000000  00000000  0003ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b469  00000000  00000000  000415e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000124ff  00000000  00000000  0006ca49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010f8b4  00000000  00000000  0007ef48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e7fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a28  00000000  00000000  0018e878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b20 	.word	0x08005b20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005b20 	.word	0x08005b20

080001c8 <setjmp>:
 80001c8:	46ec      	mov	ip, sp
 80001ca:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001ce:	f04f 0000 	mov.w	r0, #0
 80001d2:	4770      	bx	lr

080001d4 <longjmp>:
 80001d4:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d8:	46e5      	mov	sp, ip
 80001da:	0008      	movs	r0, r1
 80001dc:	bf08      	it	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b972 	b.w	80004e0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	4688      	mov	r8, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14b      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000222:	428a      	cmp	r2, r1
 8000224:	4615      	mov	r5, r2
 8000226:	d967      	bls.n	80002f8 <__udivmoddi4+0xe4>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0720 	rsb	r7, r2, #32
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	fa20 f707 	lsr.w	r7, r0, r7
 800023a:	4095      	lsls	r5, r2
 800023c:	ea47 0803 	orr.w	r8, r7, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbb8 f7fe 	udiv	r7, r8, lr
 800024c:	fa1f fc85 	uxth.w	ip, r5
 8000250:	fb0e 8817 	mls	r8, lr, r7, r8
 8000254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000258:	fb07 f10c 	mul.w	r1, r7, ip
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18eb      	adds	r3, r5, r3
 8000262:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000266:	f080 811b 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8118 	bls.w	80004a0 <__udivmoddi4+0x28c>
 8000270:	3f02      	subs	r7, #2
 8000272:	442b      	add	r3, r5
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0fe 	udiv	r0, r3, lr
 800027c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fc0c 	mul.w	ip, r0, ip
 8000288:	45a4      	cmp	ip, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	192c      	adds	r4, r5, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x290>
 8000296:	45a4      	cmp	ip, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x290>
 800029c:	3802      	subs	r0, #2
 800029e:	442c      	add	r4, r5
 80002a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a4:	eba4 040c 	sub.w	r4, r4, ip
 80002a8:	2700      	movs	r7, #0
 80002aa:	b11e      	cbz	r6, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c6 4300 	strd	r4, r3, [r6]
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xbe>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80eb 	beq.w	800049a <__udivmoddi4+0x286>
 80002c4:	2700      	movs	r7, #0
 80002c6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ca:	4638      	mov	r0, r7
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d147      	bne.n	800036a <__udivmoddi4+0x156>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd0>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2c4>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa0>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa0>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xe8>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 808f 	bne.w	8000424 <__udivmoddi4+0x210>
 8000306:	1b49      	subs	r1, r1, r5
 8000308:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030c:	fa1f f885 	uxth.w	r8, r5
 8000310:	2701      	movs	r7, #1
 8000312:	fbb1 fcfe 	udiv	ip, r1, lr
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fb0e 111c 	mls	r1, lr, ip, r1
 800031c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000320:	fb08 f10c 	mul.w	r1, r8, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x124>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4299      	cmp	r1, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 8000336:	4684      	mov	ip, r0
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1410 	mls	r4, lr, r0, r1
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x14c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x14a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80b6 	bhi.w	80004ca <__udivmoddi4+0x2b6>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e79f      	b.n	80002aa <__udivmoddi4+0x96>
 800036a:	f1c7 0c20 	rsb	ip, r7, #32
 800036e:	40bb      	lsls	r3, r7
 8000370:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000374:	ea4e 0e03 	orr.w	lr, lr, r3
 8000378:	fa01 f407 	lsl.w	r4, r1, r7
 800037c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000380:	fa21 f30c 	lsr.w	r3, r1, ip
 8000384:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000388:	4325      	orrs	r5, r4
 800038a:	fbb3 f9f8 	udiv	r9, r3, r8
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	fb08 3319 	mls	r3, r8, r9, r3
 8000394:	fa1f fa8e 	uxth.w	sl, lr
 8000398:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800039c:	fb09 f40a 	mul.w	r4, r9, sl
 80003a0:	429c      	cmp	r4, r3
 80003a2:	fa02 f207 	lsl.w	r2, r2, r7
 80003a6:	fa00 f107 	lsl.w	r1, r0, r7
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1e 0303 	adds.w	r3, lr, r3
 80003b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b4:	f080 8087 	bcs.w	80004c6 <__udivmoddi4+0x2b2>
 80003b8:	429c      	cmp	r4, r3
 80003ba:	f240 8084 	bls.w	80004c6 <__udivmoddi4+0x2b2>
 80003be:	f1a9 0902 	sub.w	r9, r9, #2
 80003c2:	4473      	add	r3, lr
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1e 0404 	adds.w	r4, lr, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	d26b      	bcs.n	80004be <__udivmoddi4+0x2aa>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d969      	bls.n	80004be <__udivmoddi4+0x2aa>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4474      	add	r4, lr
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c2      	mov	sl, r8
 80003fe:	464b      	mov	r3, r9
 8000400:	d354      	bcc.n	80004ac <__udivmoddi4+0x298>
 8000402:	d051      	beq.n	80004a8 <__udivmoddi4+0x294>
 8000404:	2e00      	cmp	r6, #0
 8000406:	d069      	beq.n	80004dc <__udivmoddi4+0x2c8>
 8000408:	ebb1 050a 	subs.w	r5, r1, sl
 800040c:	eb64 0403 	sbc.w	r4, r4, r3
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40fd      	lsrs	r5, r7
 8000416:	40fc      	lsrs	r4, r7
 8000418:	ea4c 0505 	orr.w	r5, ip, r5
 800041c:	e9c6 5400 	strd	r5, r4, [r6]
 8000420:	2700      	movs	r7, #0
 8000422:	e747      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f703 	lsr.w	r7, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	fa21 f303 	lsr.w	r3, r1, r3
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	4338      	orrs	r0, r7
 800043c:	0c01      	lsrs	r1, r0, #16
 800043e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000442:	fa1f f885 	uxth.w	r8, r5
 8000446:	fb0e 3317 	mls	r3, lr, r7, r3
 800044a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044e:	fb07 f308 	mul.w	r3, r7, r8
 8000452:	428b      	cmp	r3, r1
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x256>
 800045a:	1869      	adds	r1, r5, r1
 800045c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000460:	d22f      	bcs.n	80004c2 <__udivmoddi4+0x2ae>
 8000462:	428b      	cmp	r3, r1
 8000464:	d92d      	bls.n	80004c2 <__udivmoddi4+0x2ae>
 8000466:	3f02      	subs	r7, #2
 8000468:	4429      	add	r1, r5
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	b281      	uxth	r1, r0
 800046e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000472:	fb0e 3310 	mls	r3, lr, r0, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb00 f308 	mul.w	r3, r0, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x27e>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000488:	d217      	bcs.n	80004ba <__udivmoddi4+0x2a6>
 800048a:	428b      	cmp	r3, r1
 800048c:	d915      	bls.n	80004ba <__udivmoddi4+0x2a6>
 800048e:	3802      	subs	r0, #2
 8000490:	4429      	add	r1, r5
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000498:	e73b      	b.n	8000312 <__udivmoddi4+0xfe>
 800049a:	4637      	mov	r7, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e709      	b.n	80002b4 <__udivmoddi4+0xa0>
 80004a0:	4607      	mov	r7, r0
 80004a2:	e6e7      	b.n	8000274 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a8:	4541      	cmp	r1, r8
 80004aa:	d2ab      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b0:	eb69 020e 	sbc.w	r2, r9, lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	e7a4      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004ba:	4660      	mov	r0, ip
 80004bc:	e7e9      	b.n	8000492 <__udivmoddi4+0x27e>
 80004be:	4618      	mov	r0, r3
 80004c0:	e795      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c2:	4667      	mov	r7, ip
 80004c4:	e7d1      	b.n	800046a <__udivmoddi4+0x256>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e77c      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	442c      	add	r4, r5
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0x14c>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	442b      	add	r3, r5
 80004d6:	e72f      	b.n	8000338 <__udivmoddi4+0x124>
 80004d8:	4638      	mov	r0, r7
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xda>
 80004dc:	4637      	mov	r7, r6
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0xa0>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6613      	str	r3, [r2, #96]	; 0x60
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	6593      	str	r3, [r2, #88]	; 0x58
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_MspInit+0x44>)
 8000510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d128      	bne.n	800059e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 800054e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 8000552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000556:	6613      	str	r3, [r2, #96]	; 0x60
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 800055a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 8000566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000568:	4a10      	ldr	r2, [pc, #64]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000574:	f003 0310 	and.w	r3, r3, #16
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800057c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800058e:	2306      	movs	r3, #6
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_DFSDM_ChannelMspInit+0x84>)
 800059a:	f000 fdc7 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48001000 	.word	0x48001000

080005b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <HAL_I2C_MspInit+0x7c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d128      	bne.n	8000628 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80005ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f4:	2312      	movs	r3, #18
 80005f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000600:	2304      	movs	r3, #4
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <HAL_I2C_MspInit+0x84>)
 800060c:	f000 fd8e 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_I2C_MspInit+0x80>)
 8000612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_I2C_MspInit+0x80>)
 8000616:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800061a:	6593      	str	r3, [r2, #88]	; 0x58
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_I2C_MspInit+0x80>)
 800061e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40005800 	.word	0x40005800
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <HAL_QSPI_MspInit+0x7c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d128      	bne.n	80006b0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6513      	str	r3, [r2, #80]	; 0x50
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 800066c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800068e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000692:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80006a0:	230a      	movs	r3, #10
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <HAL_QSPI_MspInit+0x84>)
 80006ac:	f000 fd3e 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	a0001000 	.word	0xa0001000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48001000 	.word	0x48001000

080006c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_SPI_MspInit+0x7c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d128      	bne.n	8000738 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f0:	6593      	str	r3, [r2, #88]	; 0x58
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_SPI_MspInit+0x80>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <HAL_SPI_MspInit+0x80>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_SPI_MspInit+0x80>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000716:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000728:	2306      	movs	r3, #6
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <HAL_SPI_MspInit+0x84>)
 8000734:	f000 fcfa 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40003c00 	.word	0x40003c00
 8000744:	40021000 	.word	0x40021000
 8000748:	48000800 	.word	0x48000800

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a2e      	ldr	r2, [pc, #184]	; (8000824 <HAL_UART_MspInit+0xd8>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d128      	bne.n	80007c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800076e:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	4a2d      	ldr	r2, [pc, #180]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6613      	str	r3, [r2, #96]	; 0x60
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <HAL_UART_MspInit+0xdc>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <HAL_UART_MspInit+0xdc>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800079e:	23c0      	movs	r3, #192	; 0xc0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007ae:	2307      	movs	r3, #7
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	481c      	ldr	r0, [pc, #112]	; (800082c <HAL_UART_MspInit+0xe0>)
 80007ba:	f000 fcb7 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007be:	e02d      	b.n	800081c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <HAL_UART_MspInit+0xe4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d128      	bne.n	800081c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80007fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800080c:	2307      	movs	r3, #7
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <HAL_UART_MspInit+0xe8>)
 8000818:	f000 fc88 	bl	800112c <HAL_GPIO_Init>
}
 800081c:	bf00      	nop
 800081e:	3730      	adds	r7, #48	; 0x30
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40013800 	.word	0x40013800
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400
 8000830:	40004800 	.word	0x40004800
 8000834:	48000c00 	.word	0x48000c00

08000838 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000858:	d154      	bne.n	8000904 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	4b2c      	ldr	r3, [pc, #176]	; (800090c <HAL_PCD_MspInit+0xd4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a2b      	ldr	r2, [pc, #172]	; (800090c <HAL_PCD_MspInit+0xd4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b29      	ldr	r3, [pc, #164]	; (800090c <HAL_PCD_MspInit+0xd4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f000 fc4f 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800088e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008a0:	230a      	movs	r3, #10
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f000 fc3d 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d114      	bne.n	8000900 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008da:	4a0c      	ldr	r2, [pc, #48]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6593      	str	r3, [r2, #88]	; 0x58
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80008ee:	f001 f8e3 	bl	8001ab8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <HAL_PCD_MspInit+0xd4>)
 80008f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80008fe:	e001      	b.n	8000904 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000900:	f001 f8da 	bl	8001ab8 <HAL_PWREx_EnableVddUSB>
}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	; 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 f982 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000970:	2020      	movs	r0, #32
 8000972:	f000 fd9b 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000976:	2040      	movs	r0, #64	; 0x40
 8000978:	f000 fd98 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	f000 fd95 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000982:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000986:	f000 fd91 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000992:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000996:	f000 fd89 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800099a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800099e:	f000 fd85 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009a6:	f000 fd81 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80009aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009ae:	f000 fd7d 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80009b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009b6:	f000 fd79 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}

080009be <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	e00a      	b.n	80009e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009d0:	f3af 8000 	nop.w
 80009d4:	4601      	mov	r1, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	60ba      	str	r2, [r7, #8]
 80009dc:	b2ca      	uxtb	r2, r1
 80009de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	3301      	adds	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	dbf0      	blt.n	80009d0 <_read+0x12>
	}

return len;
 80009ee:	687b      	ldr	r3, [r7, #4]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e009      	b.n	8000a1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	60ba      	str	r2, [r7, #8]
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dbf1      	blt.n	8000a0a <_write+0x12>
	}
	return len;
 8000a26:	687b      	ldr	r3, [r7, #4]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <_close>:

int _close(int file)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	return -1;
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a58:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_isatty>:

int _isatty(int file)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	return 1;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b085      	sub	sp, #20
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
	return 0;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f004 fbaa 	bl	8005220 <__errno>
 8000acc:	4602      	mov	r2, r0
 8000ace:	230c      	movs	r3, #12
 8000ad0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20018000 	.word	0x20018000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	20000090 	.word	0x20000090
 8000b00:	20000780 	.word	0x20000780

08000b04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <SystemInit+0x64>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <SystemInit+0x64>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <SystemInit+0x68>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <SystemInit+0x68>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <SystemInit+0x68>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <SystemInit+0x68>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <SystemInit+0x68>)
 8000b30:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b34:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <SystemInit+0x68>)
 8000b3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b40:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <SystemInit+0x68>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <SystemInit+0x68>)
 8000b48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <SystemInit+0x68>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SystemInit+0x64>)
 8000b56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b5a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	40021000 	.word	0x40021000

08000b70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b74:	f7ff ffc6 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b78:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b7a:	e003      	b.n	8000b84 <LoopCopyDataInit>

08000b7c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b7e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b80:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b82:	3104      	adds	r1, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b84:	480a      	ldr	r0, [pc, #40]	; (8000bb0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b88:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b8a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b8c:	d3f6      	bcc.n	8000b7c <CopyDataInit>
	ldr	r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b90:	e002      	b.n	8000b98 <LoopFillZerobss>

08000b92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b92:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b94:	f842 3b04 	str.w	r3, [r2], #4

08000b98 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <LoopForever+0x16>)
	cmp	r2, r3
 8000b9a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b9c:	d3f9      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9e:	f004 fb45 	bl	800522c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ba2:	f003 fdd3 	bl	800474c <main>

08000ba6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba6:	e7fe      	b.n	8000ba6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bac:	08005d70 	.word	0x08005d70
	ldr	r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bb4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000bb8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000bbc:	20000780 	.word	0x20000780

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>

08000bc2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f95f 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f000 f80e 	bl	8000bf4 <HAL_InitTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	e001      	b.n	8000be8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be4:	f7ff fc7e 	bl	80004e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d023      	beq.n	8000c50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_InitTick+0x70>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f96b 	bl	8000efa <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10f      	bne.n	8000c4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d809      	bhi.n	8000c44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c38:	f000 f935 	bl	8000ea6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_InitTick+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e007      	b.n	8000c54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e004      	b.n	8000c54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e001      	b.n	8000c54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	200000c0 	.word	0x200000c0

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200000c0 	.word	0x200000c0

08000cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff ffee 	bl	8000c94 <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cc4:	d005      	beq.n	8000cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_Delay+0x40>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4413      	add	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd2:	bf00      	nop
 8000cd4:	f7ff ffde 	bl	8000c94 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d8f7      	bhi.n	8000cd4 <HAL_Delay+0x28>
  {
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000008 	.word	0x20000008

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff3e 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff31 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa2 	bl	8000e4c <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0ac      	b.n	8001080 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f8b2 	bl	8001094 <DFSDM_GetChannelFromInstance>
 8000f30:	4602      	mov	r2, r0
 8000f32:	4b55      	ldr	r3, [pc, #340]	; (8001088 <HAL_DFSDM_ChannelInit+0x174>)
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e09f      	b.n	8001080 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff faf3 	bl	800052c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000f46:	4b51      	ldr	r3, [pc, #324]	; (800108c <HAL_DFSDM_ChannelInit+0x178>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a4f      	ldr	r2, [pc, #316]	; (800108c <HAL_DFSDM_ChannelInit+0x178>)
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000f50:	4b4e      	ldr	r3, [pc, #312]	; (800108c <HAL_DFSDM_ChannelInit+0x178>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d125      	bne.n	8000fa4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000f58:	4b4d      	ldr	r3, [pc, #308]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f62:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000f64:	4b4a      	ldr	r3, [pc, #296]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4948      	ldr	r1, [pc, #288]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000f72:	4b47      	ldr	r3, [pc, #284]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a46      	ldr	r2, [pc, #280]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f78:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f7c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	791b      	ldrb	r3, [r3, #4]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d108      	bne.n	8000f98 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000f86:	4b42      	ldr	r3, [pc, #264]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	041b      	lsls	r3, r3, #16
 8000f92:	493f      	ldr	r1, [pc, #252]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000f98:	4b3d      	ldr	r3, [pc, #244]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a3c      	ldr	r2, [pc, #240]	; (8001090 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000fb2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6819      	ldr	r1, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fc2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000fc8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 020f 	bic.w	r2, r2, #15
 8000fe0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001008:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6899      	ldr	r1, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001018:	3b01      	subs	r3, #1
 800101a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f002 0207 	and.w	r2, r2, #7
 8001034:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6859      	ldr	r1, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001060:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f810 	bl	8001094 <DFSDM_GetChannelFromInstance>
 8001074:	4601      	mov	r1, r0
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_DFSDM_ChannelInit+0x174>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000098 	.word	0x20000098
 800108c:	20000094 	.word	0x20000094
 8001090:	40016000 	.word	0x40016000

08001094 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <DFSDM_GetChannelFromInstance+0x7c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d102      	bne.n	80010aa <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e02b      	b.n	8001102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a19      	ldr	r2, [pc, #100]	; (8001114 <DFSDM_GetChannelFromInstance+0x80>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d102      	bne.n	80010b8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80010b2:	2301      	movs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	e024      	b.n	8001102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <DFSDM_GetChannelFromInstance+0x84>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d102      	bne.n	80010c6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e01d      	b.n	8001102 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <DFSDM_GetChannelFromInstance+0x88>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d102      	bne.n	80010d4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80010ce:	2304      	movs	r3, #4
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e016      	b.n	8001102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <DFSDM_GetChannelFromInstance+0x8c>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d102      	bne.n	80010e2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80010dc:	2305      	movs	r3, #5
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	e00f      	b.n	8001102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <DFSDM_GetChannelFromInstance+0x90>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d102      	bne.n	80010f0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80010ea:	2306      	movs	r3, #6
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e008      	b.n	8001102 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <DFSDM_GetChannelFromInstance+0x94>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d102      	bne.n	80010fe <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80010f8:	2307      	movs	r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	e001      	b.n	8001102 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80010fe:	2303      	movs	r3, #3
 8001100:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40016000 	.word	0x40016000
 8001114:	40016020 	.word	0x40016020
 8001118:	40016040 	.word	0x40016040
 800111c:	40016080 	.word	0x40016080
 8001120:	400160a0 	.word	0x400160a0
 8001124:	400160c0 	.word	0x400160c0
 8001128:	400160e0 	.word	0x400160e0

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e17f      	b.n	800143c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8171 	beq.w	8001436 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <HAL_GPIO_Init+0x48>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	2b11      	cmp	r3, #17
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b12      	cmp	r3, #18
 8001172:	d130      	bne.n	80011d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011aa:	2201      	movs	r2, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f003 0201 	and.w	r2, r3, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d118      	bne.n	8001214 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011e8:	2201      	movs	r2, #1
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	08db      	lsrs	r3, r3, #3
 80011fe:	f003 0201 	and.w	r2, r3, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x128>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b12      	cmp	r3, #18
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80ac 	beq.w	8001436 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <HAL_GPIO_Init+0x32c>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <HAL_GPIO_Init+0x32c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <HAL_GPIO_Init+0x32c>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f6:	4a59      	ldr	r2, [pc, #356]	; (800145c <HAL_GPIO_Init+0x330>)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x242>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4e      	ldr	r2, [pc, #312]	; (8001460 <HAL_GPIO_Init+0x334>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x23e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4d      	ldr	r2, [pc, #308]	; (8001464 <HAL_GPIO_Init+0x338>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x23a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x33c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x236>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_GPIO_Init+0x340>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x232>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <HAL_GPIO_Init+0x344>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a49      	ldr	r2, [pc, #292]	; (8001474 <HAL_GPIO_Init+0x348>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x22a>
 8001352:	2306      	movs	r3, #6
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001356:	2307      	movs	r3, #7
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x244>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x244>
 800136e:	2300      	movs	r3, #0
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001380:	4936      	ldr	r1, [pc, #216]	; (800145c <HAL_GPIO_Init+0x330>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800138e:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_GPIO_Init+0x34c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b2:	4a31      	ldr	r2, [pc, #196]	; (8001478 <HAL_GPIO_Init+0x34c>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013b8:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <HAL_GPIO_Init+0x34c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013dc:	4a26      	ldr	r2, [pc, #152]	; (8001478 <HAL_GPIO_Init+0x34c>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013e2:	4b25      	ldr	r3, [pc, #148]	; (8001478 <HAL_GPIO_Init+0x34c>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_GPIO_Init+0x34c>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_GPIO_Init+0x34c>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001430:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_GPIO_Init+0x34c>)
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa22 f303 	lsr.w	r3, r2, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	f47f ae78 	bne.w	800113c <HAL_GPIO_Init+0x10>
  }
}
 800144c:	bf00      	nop
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40021000 	.word	0x40021000
 800145c:	40010000 	.word	0x40010000
 8001460:	48000400 	.word	0x48000400
 8001464:	48000800 	.word	0x48000800
 8001468:	48000c00 	.word	0x48000c00
 800146c:	48001000 	.word	0x48001000
 8001470:	48001400 	.word	0x48001400
 8001474:	48001800 	.word	0x48001800
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 f806 	bl	80014dc <HAL_GPIO_EXTI_Callback>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40010400 	.word	0x40010400

080014dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e081      	b.n	8001608 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff f84b 	bl	80005b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2224      	movs	r2, #36	; 0x24
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001542:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001552:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	e006      	b.n	800157a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001578:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d104      	bne.n	800158c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	ea42 0103 	orr.w	r1, r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	021a      	lsls	r2, r3, #8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69d9      	ldr	r1, [r3, #28]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2220      	movs	r2, #32
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b20      	cmp	r3, #32
 8001624:	d138      	bne.n	8001698 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001630:	2302      	movs	r3, #2
 8001632:	e032      	b.n	800169a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	; 0x24
 8001640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001662:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2220      	movs	r2, #32
 8001688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	e000      	b.n	800169a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001698:	2302      	movs	r3, #2
  }
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b085      	sub	sp, #20
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d139      	bne.n	8001730 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e033      	b.n	8001732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2224      	movs	r2, #36	; 0x24
 80016d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0201 	orr.w	r2, r2, #1
 800171a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	e000      	b.n	8001732 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001730:	2302      	movs	r3, #2
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800173e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001740:	b08f      	sub	sp, #60	; 0x3c
 8001742:	af0a      	add	r7, sp, #40	; 0x28
 8001744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e116      	b.n	800197e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff f864 	bl	8000838 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2203      	movs	r2, #3
 8001774:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 fa38 	bl	8003c04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	687e      	ldr	r6, [r7, #4]
 800179c:	466d      	mov	r5, sp
 800179e:	f106 0410 	add.w	r4, r6, #16
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b2:	1d33      	adds	r3, r6, #4
 80017b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b6:	6838      	ldr	r0, [r7, #0]
 80017b8:	f002 f9d2 	bl	8003b60 <USB_CoreInit>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0d7      	b.n	800197e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fa26 	bl	8003c26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e04a      	b.n	8001876 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017e0:	7bfa      	ldrb	r2, [r7, #15]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	333d      	adds	r3, #61	; 0x3d
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017f4:	7bfa      	ldrb	r2, [r7, #15]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	1a9b      	subs	r3, r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	333c      	adds	r3, #60	; 0x3c
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001808:	7bfa      	ldrb	r2, [r7, #15]
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	b298      	uxth	r0, r3
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	4602      	mov	r2, r0
 800181e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	333f      	adds	r3, #63	; 0x3f
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001834:	7bfa      	ldrb	r2, [r7, #15]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3344      	adds	r3, #68	; 0x44
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	3348      	adds	r3, #72	; 0x48
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	1a9b      	subs	r3, r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3350      	adds	r3, #80	; 0x50
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	3301      	adds	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3af      	bcc.n	80017e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e044      	b.n	8001910 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001886:	7bfa      	ldrb	r2, [r7, #15]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3301      	adds	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	d3b5      	bcc.n	8001886 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	687e      	ldr	r6, [r7, #4]
 8001922:	466d      	mov	r5, sp
 8001924:	f106 0410 	add.w	r4, r6, #16
 8001928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001930:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001934:	e885 0003 	stmia.w	r5, {r0, r1}
 8001938:	1d33      	adds	r3, r6, #4
 800193a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193c:	6838      	ldr	r0, [r7, #0]
 800193e:	f002 f99d 	bl	8003c7c <USB_DevInit>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e014      	b.n	800197e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	2b01      	cmp	r3, #1
 800196a:	d102      	bne.n	8001972 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f80a 	bl	8001986 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f002 fb2d 	bl	8003fd6 <USB_DevDisconnect>

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001986 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	f043 0303 	orr.w	r3, r3, #3
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40007000 	.word	0x40007000

080019f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40007000 	.word	0x40007000

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1a:	d130      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a28:	d038      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2232      	movs	r2, #50	; 0x32
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a50:	e002      	b.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d102      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f2      	bne.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d110      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e00f      	b.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8a:	d007      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a94:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac6:	6053      	str	r3, [r2, #4]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40007000 	.word	0x40007000

08001ad8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff f8d8 	bl	8000c94 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e063      	b.n	8001bb8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7fe fd99 	bl	800063c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001b0a:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f858 	bl	8001bc4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	021a      	lsls	r2, r3, #8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	2120      	movs	r1, #32
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f850 	bl	8001be0 <QSPI_WaitFlagStateUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d131      	bne.n	8001bae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b54:	f023 0310 	bic.w	r3, r3, #16
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6852      	ldr	r2, [r2, #4]
 8001b5c:	0611      	lsls	r1, r2, #24
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68d2      	ldr	r2, [r2, #12]
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_QSPI_Init+0xe8>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6912      	ldr	r2, [r2, #16]
 8001b7a:	0411      	lsls	r1, r2, #16
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6952      	ldr	r2, [r2, #20]
 8001b80:	4311      	orrs	r1, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6992      	ldr	r2, [r2, #24]
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	ffe0f8fe 	.word	0xffe0f8fe

08001bc4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001bf0:	e01a      	b.n	8001c28 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bf8:	d016      	beq.n	8001c28 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfa:	f7ff f84b 	bl	8000c94 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d302      	bcc.n	8001c10 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10b      	bne.n	8001c28 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2204      	movs	r2, #4
 8001c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e00e      	b.n	8001c46 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1d6      	bne.n	8001bf2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e3d4      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c62:	4ba1      	ldr	r3, [pc, #644]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6c:	4b9e      	ldr	r3, [pc, #632]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80e4 	beq.w	8001e4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_RCC_OscConfig+0x4a>
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	f040 808b 	bne.w	8001da8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 8087 	bne.w	8001da8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c9a:	4b93      	ldr	r3, [pc, #588]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x62>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e3ac      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1a      	ldr	r2, [r3, #32]
 8001cb6:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d004      	beq.n	8001ccc <HAL_RCC_OscConfig+0x7c>
 8001cc2:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cca:	e005      	b.n	8001cd8 <HAL_RCC_OscConfig+0x88>
 8001ccc:	4b86      	ldr	r3, [pc, #536]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd2:	091b      	lsrs	r3, r3, #4
 8001cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d223      	bcs.n	8001d24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 fd3f 	bl	8002764 <RCC_SetFlashLatencyFromMSIRange>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e38d      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf0:	4b7d      	ldr	r3, [pc, #500]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a7c      	ldr	r2, [pc, #496]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	4b7a      	ldr	r3, [pc, #488]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4977      	ldr	r1, [pc, #476]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	4972      	ldr	r1, [pc, #456]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
 8001d22:	e025      	b.n	8001d70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d24:	4b70      	ldr	r3, [pc, #448]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a6f      	ldr	r2, [pc, #444]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	4b6d      	ldr	r3, [pc, #436]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	496a      	ldr	r1, [pc, #424]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d42:	4b69      	ldr	r3, [pc, #420]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4965      	ldr	r1, [pc, #404]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fcff 	bl	8002764 <RCC_SetFlashLatencyFromMSIRange>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e34d      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d70:	f000 fc36 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8001d74:	4601      	mov	r1, r0
 8001d76:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	4a5a      	ldr	r2, [pc, #360]	; (8001eec <HAL_RCC_OscConfig+0x29c>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa21 f303 	lsr.w	r3, r1, r3
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <HAL_RCC_OscConfig+0x2a0>)
 8001d8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCC_OscConfig+0x2a4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff2d 	bl	8000bf4 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d052      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	e331      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d032      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db0:	4b4d      	ldr	r3, [pc, #308]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4c      	ldr	r2, [pc, #304]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dbc:	f7fe ff6a 	bl	8000c94 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ff66 	bl	8000c94 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e31a      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd6:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	493b      	ldr	r1, [pc, #236]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4936      	ldr	r1, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e01a      	b.n	8001e4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e16:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a33      	ldr	r2, [pc, #204]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e22:	f7fe ff37 	bl	8000c94 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e2a:	f7fe ff33 	bl	8000c94 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e2e7      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x1da>
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d074      	beq.n	8001f42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d005      	beq.n	8001e6a <HAL_RCC_OscConfig+0x21a>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	d10e      	bne.n	8001e82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d10b      	bne.n	8001e82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d064      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d160      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e2c4      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8a:	d106      	bne.n	8001e9a <HAL_RCC_OscConfig+0x24a>
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e01d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x286>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCC_OscConfig+0x26e>
 8001ea4:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0f      	ldr	r2, [pc, #60]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	e00b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x286>
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_RCC_OscConfig+0x298>)
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7fe fed9 	bl	8000c94 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee4:	e011      	b.n	8001f0a <HAL_RCC_OscConfig+0x2ba>
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08005be4 	.word	0x08005be4
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe fecc 	bl	8000c94 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e280      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	4baf      	ldr	r3, [pc, #700]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x2a8>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe febc 	bl	8000c94 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7fe feb8 	bl	8000c94 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e26c      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	4ba5      	ldr	r3, [pc, #660]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2d0>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d060      	beq.n	8002010 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x310>
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d119      	bne.n	8001f8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d116      	bne.n	8001f8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f60:	4b99      	ldr	r3, [pc, #612]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_OscConfig+0x328>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e249      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f78:	4b93      	ldr	r3, [pc, #588]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	061b      	lsls	r3, r3, #24
 8001f86:	4990      	ldr	r1, [pc, #576]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8c:	e040      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d023      	beq.n	8001fde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f96:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a8b      	ldr	r2, [pc, #556]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fe77 	bl	8000c94 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001faa:	f7fe fe73 	bl	8000c94 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e227      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fbc:	4b82      	ldr	r3, [pc, #520]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	497c      	ldr	r1, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a79      	ldr	r2, [pc, #484]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fe53 	bl	8000c94 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7fe fe4f 	bl	8000c94 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e203      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002004:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03c      	beq.n	8002096 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01c      	beq.n	800205e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	4a67      	ldr	r2, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7fe fe2e 	bl	8000c94 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7fe fe2a 	bl	8000c94 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1de      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204e:	4b5e      	ldr	r3, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ef      	beq.n	800203c <HAL_RCC_OscConfig+0x3ec>
 800205c:	e01b      	b.n	8002096 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	4b5a      	ldr	r3, [pc, #360]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fe11 	bl	8000c94 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002076:	f7fe fe0d 	bl	8000c94 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1c1      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002088:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800208a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ef      	bne.n	8002076 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80a6 	beq.w	80021f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	4a43      	ldr	r2, [pc, #268]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020be:	6593      	str	r3, [r2, #88]	; 0x58
 80020c0:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020cc:	2301      	movs	r3, #1
 80020ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d118      	bne.n	800210e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e8:	f7fe fdd4 	bl	8000c94 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7fe fdd0 	bl	8000c94 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e184      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002102:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_RCC_OscConfig+0x57c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d108      	bne.n	8002128 <HAL_RCC_OscConfig+0x4d8>
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	4a2a      	ldr	r2, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002126:	e024      	b.n	8002172 <HAL_RCC_OscConfig+0x522>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b05      	cmp	r3, #5
 800212e:	d110      	bne.n	8002152 <HAL_RCC_OscConfig+0x502>
 8002130:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002150:	e00f      	b.n	8002172 <HAL_RCC_OscConfig+0x522>
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002162:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe fd8b 	bl	8000c94 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe fd87 	bl	8000c94 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e139      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x578>)
 800219a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ed      	beq.n	8002182 <HAL_RCC_OscConfig+0x532>
 80021a6:	e01a      	b.n	80021de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a8:	f7fe fd74 	bl	8000c94 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ae:	e00f      	b.n	80021d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe fd70 	bl	8000c94 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d906      	bls.n	80021d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e122      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d0:	4b90      	ldr	r3, [pc, #576]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e8      	bne.n	80021b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021de:	7ffb      	ldrb	r3, [r7, #31]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	4a8a      	ldr	r2, [pc, #552]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80021ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 8108 	beq.w	800240a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b02      	cmp	r3, #2
 8002200:	f040 80d0 	bne.w	80023a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	429a      	cmp	r2, r3
 8002216:	d130      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	3b01      	subs	r3, #1
 8002224:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d127      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d11f      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002244:	2a07      	cmp	r2, #7
 8002246:	bf14      	ite	ne
 8002248:	2201      	movne	r2, #1
 800224a:	2200      	moveq	r2, #0
 800224c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224e:	4293      	cmp	r3, r2
 8002250:	d113      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d109      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d06e      	beq.n	8002358 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b0c      	cmp	r3, #12
 800227e:	d069      	beq.n	8002354 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800228c:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b7      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800229c:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a5c      	ldr	r2, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a8:	f7fe fcf4 	bl	8000c94 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fcf0 	bl	8000c94 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e0a4      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	4b54      	ldr	r3, [pc, #336]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ce:	4b51      	ldr	r3, [pc, #324]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCC_OscConfig+0x7c8>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022de:	3a01      	subs	r2, #1
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022e8:	0212      	lsls	r2, r2, #8
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022f0:	0852      	lsrs	r2, r2, #1
 80022f2:	3a01      	subs	r2, #1
 80022f4:	0552      	lsls	r2, r2, #21
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022fc:	0852      	lsrs	r2, r2, #1
 80022fe:	3a01      	subs	r2, #1
 8002300:	0652      	lsls	r2, r2, #25
 8002302:	4311      	orrs	r1, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002308:	0912      	lsrs	r2, r2, #4
 800230a:	0452      	lsls	r2, r2, #17
 800230c:	430a      	orrs	r2, r1
 800230e:	4941      	ldr	r1, [pc, #260]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002310:	4313      	orrs	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002314:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3e      	ldr	r2, [pc, #248]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002320:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800232c:	f7fe fcb2 	bl	8000c94 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fcae 	bl	8000c94 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e062      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002346:	4b33      	ldr	r3, [pc, #204]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002352:	e05a      	b.n	800240a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e059      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002358:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d152      	bne.n	800240a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002364:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2a      	ldr	r2, [pc, #168]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 800236a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002370:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a27      	ldr	r2, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800237c:	f7fe fc8a 	bl	8000c94 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fc86 	bl	8000c94 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03a      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x734>
 80023a2:	e032      	b.n	800240a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d02d      	beq.n	8002406 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4a13      	ldr	r2, [pc, #76]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023c8:	f023 0303 	bic.w	r3, r3, #3
 80023cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4a10      	ldr	r2, [pc, #64]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7fe fc59 	bl	8000c94 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e6:	f7fe fc55 	bl	8000c94 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e009      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x7c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x796>
 8002404:	e001      	b.n	800240a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	f99d808c 	.word	0xf99d808c

0800241c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0c8      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d910      	bls.n	8002460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4961      	ldr	r1, [pc, #388]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b0      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d04c      	beq.n	8002506 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d107      	bne.n	8002484 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002474:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d121      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e09e      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d107      	bne.n	800249c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d115      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e092      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a4:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e086      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e07e      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c4:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 0203 	bic.w	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	493f      	ldr	r1, [pc, #252]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d6:	f7fe fbdd 	bl	8000c94 <HAL_GetTick>
 80024da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024de:	f7fe fbd9 	bl	8000c94 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e066      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f4:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 020c 	and.w	r2, r3, #12
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	429a      	cmp	r2, r3
 8002504:	d1eb      	bne.n	80024de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	492c      	ldr	r1, [pc, #176]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b29      	ldr	r3, [pc, #164]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d210      	bcs.n	8002554 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 0207 	bic.w	r2, r3, #7
 800253a:	4924      	ldr	r1, [pc, #144]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_RCC_ClockConfig+0x1b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e036      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4918      	ldr	r1, [pc, #96]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	4910      	ldr	r1, [pc, #64]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002592:	f000 f825 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002596:	4601      	mov	r1, r0
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_ClockConfig+0x1b4>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	4a0c      	ldr	r2, [pc, #48]	; (80025d4 <HAL_RCC_ClockConfig+0x1b8>)
 80025a4:	5cd3      	ldrb	r3, [r2, r3]
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	fa21 f303 	lsr.w	r3, r1, r3
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fb1c 	bl	8000bf4 <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
 80025be:	72fb      	strb	r3, [r7, #11]

  return status;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08005be4 	.word	0x08005be4
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f8:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x34>
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d121      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d11e      	bne.n	8002652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002614:	4b33      	ldr	r3, [pc, #204]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800263c:	4a2a      	ldr	r2, [pc, #168]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10d      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d102      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002658:	4b24      	ldr	r3, [pc, #144]	; (80026ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800265a:	61bb      	str	r3, [r7, #24]
 800265c:	e004      	b.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d101      	bne.n	8002668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d133      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0xa4>
 800267e:	2b03      	cmp	r3, #3
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0xaa>
 8002682:	e005      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8002686:	617b      	str	r3, [r7, #20]
      break;
 8002688:	e005      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	e002      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	617b      	str	r3, [r7, #20]
      break;
 8002694:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002696:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	3301      	adds	r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	fb02 f203 	mul.w	r2, r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	0e5b      	lsrs	r3, r3, #25
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026d6:	69bb      	ldr	r3, [r7, #24]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3724      	adds	r7, #36	; 0x24
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08005bfc 	.word	0x08005bfc
 80026ec:	00f42400 	.word	0x00f42400
 80026f0:	007a1200 	.word	0x007a1200

080026f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_GetHCLKFreq+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002710:	f7ff fff0 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002714:	4601      	mov	r1, r0
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4a04      	ldr	r2, [pc, #16]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa21 f303 	lsr.w	r3, r1, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40021000 	.word	0x40021000
 8002734:	08005bf4 	.word	0x08005bf4

08002738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800273c:	f7ff ffda 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002740:	4601      	mov	r1, r0
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0adb      	lsrs	r3, r3, #11
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800274e:	5cd3      	ldrb	r3, [r2, r3]
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	08005bf4 	.word	0x08005bf4

08002764 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002770:	4b2a      	ldr	r3, [pc, #168]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800277c:	f7ff f938 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 8002780:	6178      	str	r0, [r7, #20]
 8002782:	e014      	b.n	80027ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278e:	6593      	str	r3, [r2, #88]	; 0x58
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800279c:	f7ff f928 	bl	80019f0 <HAL_PWREx_GetVoltageRange>
 80027a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b4:	d10b      	bne.n	80027ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d919      	bls.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2ba0      	cmp	r3, #160	; 0xa0
 80027c0:	d902      	bls.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027c2:	2302      	movs	r3, #2
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	e013      	b.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027c8:	2301      	movs	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e010      	b.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b80      	cmp	r3, #128	; 0x80
 80027d2:	d902      	bls.n	80027da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027d4:	2303      	movs	r3, #3
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	e00a      	b.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d102      	bne.n	80027e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027e0:	2302      	movs	r3, #2
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e004      	b.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b70      	cmp	r3, #112	; 0x70
 80027ea:	d101      	bne.n	80027f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027ec:	2301      	movs	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f023 0207 	bic.w	r2, r3, #7
 80027f8:	4909      	ldr	r1, [pc, #36]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800282c:	2300      	movs	r3, #0
 800282e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002830:	2300      	movs	r3, #0
 8002832:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03f      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002848:	d01c      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284e:	d802      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00e      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002854:	e01f      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800285a:	d003      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800285c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002860:	d01c      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002862:	e018      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002864:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a84      	ldr	r2, [pc, #528]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002870:	e015      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3304      	adds	r3, #4
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fac9 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002882:	e00c      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3320      	adds	r3, #32
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f000 fbb0 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 8002890:	4603      	mov	r3, r0
 8002892:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002894:	e003      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	74fb      	strb	r3, [r7, #19]
      break;
 800289a:	e000      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800289c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a4:	4b75      	ldr	r3, [pc, #468]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b2:	4972      	ldr	r1, [pc, #456]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028ba:	e001      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03f      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d4:	d01c      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80028d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028da:	d802      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80028e0:	e01f      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80028e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e6:	d003      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80028e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028ec:	d01c      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80028ee:	e018      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028f0:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028fc:	e015      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa83 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800290e:	e00c      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3320      	adds	r3, #32
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fb6a 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002920:	e003      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	74fb      	strb	r3, [r7, #19]
      break;
 8002926:	e000      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800292a:	7cfb      	ldrb	r3, [r7, #19]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002930:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800293e:	494f      	ldr	r1, [pc, #316]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002946:	e001      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002948:	7cfb      	ldrb	r3, [r7, #19]
 800294a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 80a0 	beq.w	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800296e:	2300      	movs	r3, #0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00d      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	6593      	str	r3, [r2, #88]	; 0x58
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298c:	2301      	movs	r3, #1
 800298e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800299a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800299c:	f7fe f97a 	bl	8000c94 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029a2:	e009      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7fe f976 	bl	8000c94 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d902      	bls.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	74fb      	strb	r3, [r7, #19]
        break;
 80029b6:	e005      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029b8:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0ef      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d15c      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029ca:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01f      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d019      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe f935 	bl	8000c94 <HAL_GetTick>
 8002a2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2c:	e00b      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe f931 	bl	8000c94 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d902      	bls.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	74fb      	strb	r3, [r7, #19]
            break;
 8002a44:	e006      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ec      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a72:	e009      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
 8002a78:	e006      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a88:	7c7b      	ldrb	r3, [r7, #17]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d105      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8e:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	4a9d      	ldr	r2, [pc, #628]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aa6:	4b98      	ldr	r3, [pc, #608]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aac:	f023 0203 	bic.w	r2, r3, #3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab4:	4994      	ldr	r1, [pc, #592]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac8:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 020c 	bic.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	498c      	ldr	r1, [pc, #560]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aea:	4b87      	ldr	r3, [pc, #540]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4983      	ldr	r1, [pc, #524]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b0c:	4b7e      	ldr	r3, [pc, #504]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	497b      	ldr	r1, [pc, #492]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b2e:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3c:	4972      	ldr	r1, [pc, #456]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b50:	4b6d      	ldr	r3, [pc, #436]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	496a      	ldr	r1, [pc, #424]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b72:	4b65      	ldr	r3, [pc, #404]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	4961      	ldr	r1, [pc, #388]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b94:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba2:	4959      	ldr	r1, [pc, #356]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bb6:	4b54      	ldr	r3, [pc, #336]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	4950      	ldr	r1, [pc, #320]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	4948      	ldr	r1, [pc, #288]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bfa:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	493f      	ldr	r1, [pc, #252]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d028      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c2a:	4937      	ldr	r1, [pc, #220]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a31      	ldr	r2, [pc, #196]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c46:	60d3      	str	r3, [r2, #12]
 8002c48:	e011      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f8d8 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d028      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	491f      	ldr	r1, [pc, #124]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c98:	d106      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ca4:	60d3      	str	r3, [r2, #12]
 8002ca6:	e011      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 f8a9 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002cc8:	7cfb      	ldrb	r3, [r7, #19]
 8002cca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02b      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf6:	d109      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a02      	ldr	r2, [pc, #8]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	60d3      	str	r3, [r2, #12]
 8002d04:	e014      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 f877 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d22:	4603      	mov	r3, r0
 8002d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02f      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d4a:	4928      	ldr	r1, [pc, #160]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	2102      	movs	r1, #2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f854 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d014      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	74bb      	strb	r3, [r7, #18]
 8002d76:	e011      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3320      	adds	r3, #32
 8002d86:	2102      	movs	r1, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f931 	bl	8002ff0 <RCCEx_PLLSAI2_Config>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002de2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1e:	4b73      	ldr	r3, [pc, #460]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e2a:	4b70      	ldr	r3, [pc, #448]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e42:	4b6a      	ldr	r3, [pc, #424]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
       ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d044      	beq.n	8002ee0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e041      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d00c      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0x6e>
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d013      	beq.n	8002e90 <RCCEx_PLLSAI1_Config+0x80>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d120      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e6c:	4b5f      	ldr	r3, [pc, #380]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d11d      	bne.n	8002eb4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e01a      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e013      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e90:	4b56      	ldr	r3, [pc, #344]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10f      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eac:	e006      	b.n	8002ebc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e004      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ebc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10d      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ec4:	4b49      	ldr	r3, [pc, #292]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	4944      	ldr	r1, [pc, #272]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d17d      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a40      	ldr	r2, [pc, #256]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef2:	f7fd fecf 	bl	8000c94 <HAL_GetTick>
 8002ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ef8:	e009      	b.n	8002f0e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002efa:	f7fd fecb 	bl	8000c94 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d902      	bls.n	8002f0e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f0c:	e005      	b.n	8002f1a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ef      	bne.n	8002efa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d160      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d111      	bne.n	8002f4a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6892      	ldr	r2, [r2, #8]
 8002f36:	0211      	lsls	r1, r2, #8
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68d2      	ldr	r2, [r2, #12]
 8002f3c:	0912      	lsrs	r2, r2, #4
 8002f3e:	0452      	lsls	r2, r2, #17
 8002f40:	430a      	orrs	r2, r1
 8002f42:	492a      	ldr	r1, [pc, #168]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	610b      	str	r3, [r1, #16]
 8002f48:	e027      	b.n	8002f9a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d112      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	0211      	lsls	r1, r2, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6912      	ldr	r2, [r2, #16]
 8002f66:	0852      	lsrs	r2, r2, #1
 8002f68:	3a01      	subs	r2, #1
 8002f6a:	0552      	lsls	r2, r2, #21
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	491f      	ldr	r1, [pc, #124]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	610b      	str	r3, [r1, #16]
 8002f74:	e011      	b.n	8002f9a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f76:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6892      	ldr	r2, [r2, #8]
 8002f86:	0211      	lsls	r1, r2, #8
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6952      	ldr	r2, [r2, #20]
 8002f8c:	0852      	lsrs	r2, r2, #1
 8002f8e:	3a01      	subs	r2, #1
 8002f90:	0652      	lsls	r2, r2, #25
 8002f92:	430a      	orrs	r2, r1
 8002f94:	4915      	ldr	r1, [pc, #84]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa6:	f7fd fe75 	bl	8000c94 <HAL_GetTick>
 8002faa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fac:	e009      	b.n	8002fc2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fae:	f7fd fe71 	bl	8000c94 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d902      	bls.n	8002fc2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	73fb      	strb	r3, [r7, #15]
          break;
 8002fc0:	e005      	b.n	8002fce <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0ef      	beq.n	8002fae <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4903      	ldr	r1, [pc, #12]	; (8002fec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000

08002ff0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ffe:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d018      	beq.n	800303c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0203 	and.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d10d      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
       ||
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003022:	4b5f      	ldr	r3, [pc, #380]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
       ||
 8003032:	429a      	cmp	r2, r3
 8003034:	d044      	beq.n	80030c0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	e041      	b.n	80030c0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d00c      	beq.n	800305e <RCCEx_PLLSAI2_Config+0x6e>
 8003044:	2b03      	cmp	r3, #3
 8003046:	d013      	beq.n	8003070 <RCCEx_PLLSAI2_Config+0x80>
 8003048:	2b01      	cmp	r3, #1
 800304a:	d120      	bne.n	800308e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800304c:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11d      	bne.n	8003094 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e01a      	b.n	8003094 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800305e:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003066:	2b00      	cmp	r3, #0
 8003068:	d116      	bne.n	8003098 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306e:	e013      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003070:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10f      	bne.n	800309c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800307c:	4b48      	ldr	r3, [pc, #288]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800308c:	e006      	b.n	800309c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
      break;
 8003092:	e004      	b.n	800309e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003094:	bf00      	nop
 8003096:	e002      	b.n	800309e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003098:	bf00      	nop
 800309a:	e000      	b.n	800309e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800309c:	bf00      	nop
    }

    if(status == HAL_OK)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030a4:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	3b01      	subs	r3, #1
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	430b      	orrs	r3, r1
 80030ba:	4939      	ldr	r1, [pc, #228]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d167      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030c6:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d2:	f7fd fddf 	bl	8000c94 <HAL_GetTick>
 80030d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030d8:	e009      	b.n	80030ee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030da:	f7fd fddb 	bl	8000c94 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d902      	bls.n	80030ee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	73fb      	strb	r3, [r7, #15]
        break;
 80030ec:	e005      	b.n	80030fa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ee:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1ef      	bne.n	80030da <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d14a      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d111      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003106:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800310e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6892      	ldr	r2, [r2, #8]
 8003116:	0211      	lsls	r1, r2, #8
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68d2      	ldr	r2, [r2, #12]
 800311c:	0912      	lsrs	r2, r2, #4
 800311e:	0452      	lsls	r2, r2, #17
 8003120:	430a      	orrs	r2, r1
 8003122:	491f      	ldr	r1, [pc, #124]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003124:	4313      	orrs	r3, r2
 8003126:	614b      	str	r3, [r1, #20]
 8003128:	e011      	b.n	800314e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003132:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6892      	ldr	r2, [r2, #8]
 800313a:	0211      	lsls	r1, r2, #8
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6912      	ldr	r2, [r2, #16]
 8003140:	0852      	lsrs	r2, r2, #1
 8003142:	3a01      	subs	r2, #1
 8003144:	0652      	lsls	r2, r2, #25
 8003146:	430a      	orrs	r2, r1
 8003148:	4915      	ldr	r1, [pc, #84]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800314a:	4313      	orrs	r3, r2
 800314c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800314e:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd fd9b 	bl	8000c94 <HAL_GetTick>
 800315e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003160:	e009      	b.n	8003176 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003162:	f7fd fd97 	bl	8000c94 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d902      	bls.n	8003176 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	73fb      	strb	r3, [r7, #15]
          break;
 8003174:	e005      	b.n	8003182 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ef      	beq.n	8003162 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d106      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	4903      	ldr	r1, [pc, #12]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003192:	4313      	orrs	r3, r2
 8003194:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003196:	7bfb      	ldrb	r3, [r7, #15]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e095      	b.n	80032e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d108      	bne.n	80031d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c6:	d009      	beq.n	80031dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	61da      	str	r2, [r3, #28]
 80031ce:	e005      	b.n	80031dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd fa64 	bl	80006c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003212:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800321c:	d902      	bls.n	8003224 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e002      	b.n	800322a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003228:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003232:	d007      	beq.n	8003244 <HAL_SPI_Init+0xa0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800323c:	d002      	beq.n	8003244 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003254:	431a      	orrs	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	ea42 0103 	orr.w	r1, r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	f003 0204 	and.w	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032c0:	ea42 0103 	orr.w	r1, r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e040      	b.n	800337e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	2b00      	cmp	r3, #0
 8003302:	d106      	bne.n	8003312 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7fd fa1d 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2224      	movs	r2, #36	; 0x24
 8003316:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f82d 	bl	8003388 <UART_SetConfig>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e022      	b.n	800337e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 faab 	bl	800389c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003354:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003364:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fb32 	bl	80039e0 <UART_CheckIdleState>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003388:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800338c:	b088      	sub	sp, #32
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4bac      	ldr	r3, [pc, #688]	; (8003668 <UART_SetConfig+0x2e0>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6812      	ldr	r2, [r2, #0]
 80033bc:	69f9      	ldr	r1, [r7, #28]
 80033be:	430b      	orrs	r3, r1
 80033c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4aa2      	ldr	r2, [pc, #648]	; (800366c <UART_SetConfig+0x2e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a99      	ldr	r2, [pc, #612]	; (8003670 <UART_SetConfig+0x2e8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d121      	bne.n	8003454 <UART_SetConfig+0xcc>
 8003410:	4b98      	ldr	r3, [pc, #608]	; (8003674 <UART_SetConfig+0x2ec>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d816      	bhi.n	800344c <UART_SetConfig+0xc4>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <UART_SetConfig+0x9c>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003435 	.word	0x08003435
 8003428:	08003441 	.word	0x08003441
 800342c:	0800343b 	.word	0x0800343b
 8003430:	08003447 	.word	0x08003447
 8003434:	2301      	movs	r3, #1
 8003436:	76fb      	strb	r3, [r7, #27]
 8003438:	e0e8      	b.n	800360c <UART_SetConfig+0x284>
 800343a:	2302      	movs	r3, #2
 800343c:	76fb      	strb	r3, [r7, #27]
 800343e:	e0e5      	b.n	800360c <UART_SetConfig+0x284>
 8003440:	2304      	movs	r3, #4
 8003442:	76fb      	strb	r3, [r7, #27]
 8003444:	e0e2      	b.n	800360c <UART_SetConfig+0x284>
 8003446:	2308      	movs	r3, #8
 8003448:	76fb      	strb	r3, [r7, #27]
 800344a:	e0df      	b.n	800360c <UART_SetConfig+0x284>
 800344c:	2310      	movs	r3, #16
 800344e:	76fb      	strb	r3, [r7, #27]
 8003450:	bf00      	nop
 8003452:	e0db      	b.n	800360c <UART_SetConfig+0x284>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a87      	ldr	r2, [pc, #540]	; (8003678 <UART_SetConfig+0x2f0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d134      	bne.n	80034c8 <UART_SetConfig+0x140>
 800345e:	4b85      	ldr	r3, [pc, #532]	; (8003674 <UART_SetConfig+0x2ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f003 030c 	and.w	r3, r3, #12
 8003468:	2b0c      	cmp	r3, #12
 800346a:	d829      	bhi.n	80034c0 <UART_SetConfig+0x138>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <UART_SetConfig+0xec>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	080034a9 	.word	0x080034a9
 8003478:	080034c1 	.word	0x080034c1
 800347c:	080034c1 	.word	0x080034c1
 8003480:	080034c1 	.word	0x080034c1
 8003484:	080034b5 	.word	0x080034b5
 8003488:	080034c1 	.word	0x080034c1
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080034c1 	.word	0x080034c1
 8003494:	080034af 	.word	0x080034af
 8003498:	080034c1 	.word	0x080034c1
 800349c:	080034c1 	.word	0x080034c1
 80034a0:	080034c1 	.word	0x080034c1
 80034a4:	080034bb 	.word	0x080034bb
 80034a8:	2300      	movs	r3, #0
 80034aa:	76fb      	strb	r3, [r7, #27]
 80034ac:	e0ae      	b.n	800360c <UART_SetConfig+0x284>
 80034ae:	2302      	movs	r3, #2
 80034b0:	76fb      	strb	r3, [r7, #27]
 80034b2:	e0ab      	b.n	800360c <UART_SetConfig+0x284>
 80034b4:	2304      	movs	r3, #4
 80034b6:	76fb      	strb	r3, [r7, #27]
 80034b8:	e0a8      	b.n	800360c <UART_SetConfig+0x284>
 80034ba:	2308      	movs	r3, #8
 80034bc:	76fb      	strb	r3, [r7, #27]
 80034be:	e0a5      	b.n	800360c <UART_SetConfig+0x284>
 80034c0:	2310      	movs	r3, #16
 80034c2:	76fb      	strb	r3, [r7, #27]
 80034c4:	bf00      	nop
 80034c6:	e0a1      	b.n	800360c <UART_SetConfig+0x284>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a6b      	ldr	r2, [pc, #428]	; (800367c <UART_SetConfig+0x2f4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d120      	bne.n	8003514 <UART_SetConfig+0x18c>
 80034d2:	4b68      	ldr	r3, [pc, #416]	; (8003674 <UART_SetConfig+0x2ec>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d00f      	beq.n	8003500 <UART_SetConfig+0x178>
 80034e0:	2b10      	cmp	r3, #16
 80034e2:	d802      	bhi.n	80034ea <UART_SetConfig+0x162>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <UART_SetConfig+0x16c>
 80034e8:	e010      	b.n	800350c <UART_SetConfig+0x184>
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d005      	beq.n	80034fa <UART_SetConfig+0x172>
 80034ee:	2b30      	cmp	r3, #48	; 0x30
 80034f0:	d009      	beq.n	8003506 <UART_SetConfig+0x17e>
 80034f2:	e00b      	b.n	800350c <UART_SetConfig+0x184>
 80034f4:	2300      	movs	r3, #0
 80034f6:	76fb      	strb	r3, [r7, #27]
 80034f8:	e088      	b.n	800360c <UART_SetConfig+0x284>
 80034fa:	2302      	movs	r3, #2
 80034fc:	76fb      	strb	r3, [r7, #27]
 80034fe:	e085      	b.n	800360c <UART_SetConfig+0x284>
 8003500:	2304      	movs	r3, #4
 8003502:	76fb      	strb	r3, [r7, #27]
 8003504:	e082      	b.n	800360c <UART_SetConfig+0x284>
 8003506:	2308      	movs	r3, #8
 8003508:	76fb      	strb	r3, [r7, #27]
 800350a:	e07f      	b.n	800360c <UART_SetConfig+0x284>
 800350c:	2310      	movs	r3, #16
 800350e:	76fb      	strb	r3, [r7, #27]
 8003510:	bf00      	nop
 8003512:	e07b      	b.n	800360c <UART_SetConfig+0x284>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a59      	ldr	r2, [pc, #356]	; (8003680 <UART_SetConfig+0x2f8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d120      	bne.n	8003560 <UART_SetConfig+0x1d8>
 800351e:	4b55      	ldr	r3, [pc, #340]	; (8003674 <UART_SetConfig+0x2ec>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d00f      	beq.n	800354c <UART_SetConfig+0x1c4>
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d802      	bhi.n	8003536 <UART_SetConfig+0x1ae>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <UART_SetConfig+0x1b8>
 8003534:	e010      	b.n	8003558 <UART_SetConfig+0x1d0>
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d005      	beq.n	8003546 <UART_SetConfig+0x1be>
 800353a:	2bc0      	cmp	r3, #192	; 0xc0
 800353c:	d009      	beq.n	8003552 <UART_SetConfig+0x1ca>
 800353e:	e00b      	b.n	8003558 <UART_SetConfig+0x1d0>
 8003540:	2300      	movs	r3, #0
 8003542:	76fb      	strb	r3, [r7, #27]
 8003544:	e062      	b.n	800360c <UART_SetConfig+0x284>
 8003546:	2302      	movs	r3, #2
 8003548:	76fb      	strb	r3, [r7, #27]
 800354a:	e05f      	b.n	800360c <UART_SetConfig+0x284>
 800354c:	2304      	movs	r3, #4
 800354e:	76fb      	strb	r3, [r7, #27]
 8003550:	e05c      	b.n	800360c <UART_SetConfig+0x284>
 8003552:	2308      	movs	r3, #8
 8003554:	76fb      	strb	r3, [r7, #27]
 8003556:	e059      	b.n	800360c <UART_SetConfig+0x284>
 8003558:	2310      	movs	r3, #16
 800355a:	76fb      	strb	r3, [r7, #27]
 800355c:	bf00      	nop
 800355e:	e055      	b.n	800360c <UART_SetConfig+0x284>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a47      	ldr	r2, [pc, #284]	; (8003684 <UART_SetConfig+0x2fc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d124      	bne.n	80035b4 <UART_SetConfig+0x22c>
 800356a:	4b42      	ldr	r3, [pc, #264]	; (8003674 <UART_SetConfig+0x2ec>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003578:	d012      	beq.n	80035a0 <UART_SetConfig+0x218>
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d802      	bhi.n	8003586 <UART_SetConfig+0x1fe>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <UART_SetConfig+0x20c>
 8003584:	e012      	b.n	80035ac <UART_SetConfig+0x224>
 8003586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358a:	d006      	beq.n	800359a <UART_SetConfig+0x212>
 800358c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003590:	d009      	beq.n	80035a6 <UART_SetConfig+0x21e>
 8003592:	e00b      	b.n	80035ac <UART_SetConfig+0x224>
 8003594:	2300      	movs	r3, #0
 8003596:	76fb      	strb	r3, [r7, #27]
 8003598:	e038      	b.n	800360c <UART_SetConfig+0x284>
 800359a:	2302      	movs	r3, #2
 800359c:	76fb      	strb	r3, [r7, #27]
 800359e:	e035      	b.n	800360c <UART_SetConfig+0x284>
 80035a0:	2304      	movs	r3, #4
 80035a2:	76fb      	strb	r3, [r7, #27]
 80035a4:	e032      	b.n	800360c <UART_SetConfig+0x284>
 80035a6:	2308      	movs	r3, #8
 80035a8:	76fb      	strb	r3, [r7, #27]
 80035aa:	e02f      	b.n	800360c <UART_SetConfig+0x284>
 80035ac:	2310      	movs	r3, #16
 80035ae:	76fb      	strb	r3, [r7, #27]
 80035b0:	bf00      	nop
 80035b2:	e02b      	b.n	800360c <UART_SetConfig+0x284>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <UART_SetConfig+0x2e4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d124      	bne.n	8003608 <UART_SetConfig+0x280>
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <UART_SetConfig+0x2ec>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035cc:	d012      	beq.n	80035f4 <UART_SetConfig+0x26c>
 80035ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d2:	d802      	bhi.n	80035da <UART_SetConfig+0x252>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <UART_SetConfig+0x260>
 80035d8:	e012      	b.n	8003600 <UART_SetConfig+0x278>
 80035da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035de:	d006      	beq.n	80035ee <UART_SetConfig+0x266>
 80035e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e4:	d009      	beq.n	80035fa <UART_SetConfig+0x272>
 80035e6:	e00b      	b.n	8003600 <UART_SetConfig+0x278>
 80035e8:	2300      	movs	r3, #0
 80035ea:	76fb      	strb	r3, [r7, #27]
 80035ec:	e00e      	b.n	800360c <UART_SetConfig+0x284>
 80035ee:	2302      	movs	r3, #2
 80035f0:	76fb      	strb	r3, [r7, #27]
 80035f2:	e00b      	b.n	800360c <UART_SetConfig+0x284>
 80035f4:	2304      	movs	r3, #4
 80035f6:	76fb      	strb	r3, [r7, #27]
 80035f8:	e008      	b.n	800360c <UART_SetConfig+0x284>
 80035fa:	2308      	movs	r3, #8
 80035fc:	76fb      	strb	r3, [r7, #27]
 80035fe:	e005      	b.n	800360c <UART_SetConfig+0x284>
 8003600:	2310      	movs	r3, #16
 8003602:	76fb      	strb	r3, [r7, #27]
 8003604:	bf00      	nop
 8003606:	e001      	b.n	800360c <UART_SetConfig+0x284>
 8003608:	2310      	movs	r3, #16
 800360a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a16      	ldr	r2, [pc, #88]	; (800366c <UART_SetConfig+0x2e4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	f040 8087 	bne.w	8003726 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003618:	7efb      	ldrb	r3, [r7, #27]
 800361a:	2b08      	cmp	r3, #8
 800361c:	d836      	bhi.n	800368c <UART_SetConfig+0x304>
 800361e:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <UART_SetConfig+0x29c>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003649 	.word	0x08003649
 8003628:	0800368d 	.word	0x0800368d
 800362c:	08003651 	.word	0x08003651
 8003630:	0800368d 	.word	0x0800368d
 8003634:	08003657 	.word	0x08003657
 8003638:	0800368d 	.word	0x0800368d
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800368d 	.word	0x0800368d
 8003644:	0800365f 	.word	0x0800365f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003648:	f7ff f860 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 800364c:	6178      	str	r0, [r7, #20]
        break;
 800364e:	e022      	b.n	8003696 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003650:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <UART_SetConfig+0x300>)
 8003652:	617b      	str	r3, [r7, #20]
        break;
 8003654:	e01f      	b.n	8003696 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003656:	f7fe ffc3 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800365a:	6178      	str	r0, [r7, #20]
        break;
 800365c:	e01b      	b.n	8003696 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003662:	617b      	str	r3, [r7, #20]
        break;
 8003664:	e017      	b.n	8003696 <UART_SetConfig+0x30e>
 8003666:	bf00      	nop
 8003668:	efff69f3 	.word	0xefff69f3
 800366c:	40008000 	.word	0x40008000
 8003670:	40013800 	.word	0x40013800
 8003674:	40021000 	.word	0x40021000
 8003678:	40004400 	.word	0x40004400
 800367c:	40004800 	.word	0x40004800
 8003680:	40004c00 	.word	0x40004c00
 8003684:	40005000 	.word	0x40005000
 8003688:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	76bb      	strb	r3, [r7, #26]
        break;
 8003694:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80f1 	beq.w	8003880 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d305      	bcc.n	80036ba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d902      	bls.n	80036c0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	76bb      	strb	r3, [r7, #26]
 80036be:	e0df      	b.n	8003880 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	4619      	mov	r1, r3
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	f04f 0400 	mov.w	r4, #0
 80036d0:	0214      	lsls	r4, r2, #8
 80036d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036d6:	020b      	lsls	r3, r1, #8
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6852      	ldr	r2, [r2, #4]
 80036dc:	0852      	lsrs	r2, r2, #1
 80036de:	4611      	mov	r1, r2
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	eb13 0b01 	adds.w	fp, r3, r1
 80036e8:	eb44 0c02 	adc.w	ip, r4, r2
 80036ec:	4658      	mov	r0, fp
 80036ee:	4661      	mov	r1, ip
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f04f 0400 	mov.w	r4, #0
 80036f8:	461a      	mov	r2, r3
 80036fa:	4623      	mov	r3, r4
 80036fc:	f7fc fd72 	bl	80001e4 <__aeabi_uldivmod>
 8003700:	4603      	mov	r3, r0
 8003702:	460c      	mov	r4, r1
 8003704:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370c:	d308      	bcc.n	8003720 <UART_SetConfig+0x398>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003714:	d204      	bcs.n	8003720 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	e0af      	b.n	8003880 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	76bb      	strb	r3, [r7, #26]
 8003724:	e0ac      	b.n	8003880 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372e:	d15b      	bne.n	80037e8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003730:	7efb      	ldrb	r3, [r7, #27]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d827      	bhi.n	8003786 <UART_SetConfig+0x3fe>
 8003736:	a201      	add	r2, pc, #4	; (adr r2, 800373c <UART_SetConfig+0x3b4>)
 8003738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373c:	08003761 	.word	0x08003761
 8003740:	08003769 	.word	0x08003769
 8003744:	08003771 	.word	0x08003771
 8003748:	08003787 	.word	0x08003787
 800374c:	08003777 	.word	0x08003777
 8003750:	08003787 	.word	0x08003787
 8003754:	08003787 	.word	0x08003787
 8003758:	08003787 	.word	0x08003787
 800375c:	0800377f 	.word	0x0800377f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003760:	f7fe ffd4 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003764:	6178      	str	r0, [r7, #20]
        break;
 8003766:	e013      	b.n	8003790 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003768:	f7fe ffe6 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 800376c:	6178      	str	r0, [r7, #20]
        break;
 800376e:	e00f      	b.n	8003790 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003770:	4b49      	ldr	r3, [pc, #292]	; (8003898 <UART_SetConfig+0x510>)
 8003772:	617b      	str	r3, [r7, #20]
        break;
 8003774:	e00c      	b.n	8003790 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7fe ff33 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800377a:	6178      	str	r0, [r7, #20]
        break;
 800377c:	e008      	b.n	8003790 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	617b      	str	r3, [r7, #20]
        break;
 8003784:	e004      	b.n	8003790 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	76bb      	strb	r3, [r7, #26]
        break;
 800378e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d074      	beq.n	8003880 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	005a      	lsls	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	2b0f      	cmp	r3, #15
 80037b2:	d916      	bls.n	80037e2 <UART_SetConfig+0x45a>
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ba:	d212      	bcs.n	80037e2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f023 030f 	bic.w	r3, r3, #15
 80037c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	085b      	lsrs	r3, r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	89fa      	ldrh	r2, [r7, #14]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	e04e      	b.n	8003880 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	76bb      	strb	r3, [r7, #26]
 80037e6:	e04b      	b.n	8003880 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e8:	7efb      	ldrb	r3, [r7, #27]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d827      	bhi.n	800383e <UART_SetConfig+0x4b6>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <UART_SetConfig+0x46c>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003819 	.word	0x08003819
 80037f8:	08003821 	.word	0x08003821
 80037fc:	08003829 	.word	0x08003829
 8003800:	0800383f 	.word	0x0800383f
 8003804:	0800382f 	.word	0x0800382f
 8003808:	0800383f 	.word	0x0800383f
 800380c:	0800383f 	.word	0x0800383f
 8003810:	0800383f 	.word	0x0800383f
 8003814:	08003837 	.word	0x08003837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003818:	f7fe ff78 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 800381c:	6178      	str	r0, [r7, #20]
        break;
 800381e:	e013      	b.n	8003848 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003820:	f7fe ff8a 	bl	8002738 <HAL_RCC_GetPCLK2Freq>
 8003824:	6178      	str	r0, [r7, #20]
        break;
 8003826:	e00f      	b.n	8003848 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <UART_SetConfig+0x510>)
 800382a:	617b      	str	r3, [r7, #20]
        break;
 800382c:	e00c      	b.n	8003848 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7fe fed7 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8003832:	6178      	str	r0, [r7, #20]
        break;
 8003834:	e008      	b.n	8003848 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383a:	617b      	str	r3, [r7, #20]
        break;
 800383c:	e004      	b.n	8003848 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	76bb      	strb	r3, [r7, #26]
        break;
 8003846:	bf00      	nop
    }

    if (pclk != 0U)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	085a      	lsrs	r2, r3, #1
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	441a      	add	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	b29b      	uxth	r3, r3
 8003862:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d908      	bls.n	800387c <UART_SetConfig+0x4f4>
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003870:	d204      	bcs.n	800387c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	e001      	b.n	8003880 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800388c:	7ebb      	ldrb	r3, [r7, #26]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003898:	00f42400 	.word	0x00f42400

0800389c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399a:	d10a      	bne.n	80039b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039ee:	f7fd f951 	bl	8000c94 <HAL_GetTick>
 80039f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d10e      	bne.n	8003a20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f82a 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e020      	b.n	8003a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d10e      	bne.n	8003a4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f814 	bl	8003a6a <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e00a      	b.n	8003a62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7a:	e05d      	b.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a82:	d059      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a84:	f7fd f906 	bl	8000c94 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11b      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e042      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d02b      	beq.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aee:	d123      	bne.n	8003b38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e00f      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69da      	ldr	r2, [r3, #28]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d092      	beq.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b60:	b084      	sub	sp, #16
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	f107 001c 	add.w	r0, r7, #28
 8003b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d122      	bne.n	8003bbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa30 	bl	8004018 <USB_CoreReset>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	73fb      	strb	r3, [r7, #15]
 8003bbc:	e01a      	b.n	8003bf4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fa24 	bl	8004018 <USB_CoreReset>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38
 8003be6:	e005      	b.n	8003bf4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c00:	b004      	add	sp, #16
 8003c02:	4770      	bx	lr

08003c04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 0201 	bic.w	r2, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e00b      	b.n	8003c6a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d106      	bne.n	8003c66 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	e001      	b.n	8003c6a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e003      	b.n	8003c72 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003c6a:	2032      	movs	r0, #50	; 0x32
 8003c6c:	f7fd f81e 	bl	8000cac <HAL_Delay>

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	e009      	b.n	8003cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	3340      	adds	r3, #64	; 0x40
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3301      	adds	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b0e      	cmp	r3, #14
 8003cb4:	d9f2      	bls.n	8003c9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11c      	bne.n	8003cf6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e005      	b.n	8003d02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	4619      	mov	r1, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	680b      	ldr	r3, [r1, #0]
 8003d20:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d22:	2103      	movs	r1, #3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f93d 	bl	8003fa4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d2a:	2110      	movs	r1, #16
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8f1 	bl	8003f14 <USB_FlushTxFifo>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f90f 	bl	8003f60 <USB_FlushRxFifo>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	461a      	mov	r2, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2300      	movs	r3, #0
 8003d62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	e043      	b.n	8003dfe <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d8c:	d118      	bne.n	8003dc0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da0:	461a      	mov	r2, r3
 8003da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	e013      	b.n	8003dd2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db6:	461a      	mov	r2, r3
 8003db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e008      	b.n	8003dd2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	461a      	mov	r2, r3
 8003dce:	2300      	movs	r3, #0
 8003dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dde:	461a      	mov	r2, r3
 8003de0:	2300      	movs	r3, #0
 8003de2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df0:	461a      	mov	r2, r3
 8003df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d3b7      	bcc.n	8003d76 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	e043      	b.n	8003e94 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e22:	d118      	bne.n	8003e56 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e36:	461a      	mov	r2, r3
 8003e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e013      	b.n	8003e68 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	e008      	b.n	8003e68 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e62:	461a      	mov	r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e86:	461a      	mov	r2, r3
 8003e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	3301      	adds	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3b7      	bcc.n	8003e0c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f043 0210 	orr.w	r2, r3, #16
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <USB_DevInit+0x294>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	f043 0208 	orr.w	r2, r3, #8
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ef6:	f043 0304 	orr.w	r3, r3, #4
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f0a:	b004      	add	sp, #16
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	803c3800 	.word	0x803c3800

08003f14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	f043 0220 	orr.w	r2, r3, #32
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3301      	adds	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a09      	ldr	r2, [pc, #36]	; (8003f5c <USB_FlushTxFifo+0x48>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e006      	b.n	8003f4e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d0f0      	beq.n	8003f2e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	00030d40 	.word	0x00030d40

08003f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2210      	movs	r2, #16
 8003f70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <USB_FlushRxFifo+0x40>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e006      	b.n	8003f92 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d0f0      	beq.n	8003f72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	00030d40 	.word	0x00030d40

08003fa4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ff0:	f023 0303 	bic.w	r3, r3, #3
 8003ff4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004004:	f043 0302 	orr.w	r3, r3, #2
 8004008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a13      	ldr	r2, [pc, #76]	; (800407c <USB_CoreReset+0x64>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e01b      	b.n	800406e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	daf2      	bge.n	8004024 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f043 0201 	orr.w	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <USB_CoreReset+0x64>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e006      	b.n	800406e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d0f0      	beq.n	800404e <USB_CoreReset+0x36>

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	00030d40 	.word	0x00030d40

08004080 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b7e      	cmp	r3, #126	; 0x7e
 800408e:	d809      	bhi.n	80040a4 <UnityPrintChar+0x24>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b1f      	cmp	r3, #31
 8004096:	d905      	bls.n	80040a4 <UnityPrintChar+0x24>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f001 f8f1 	bl	8005284 <putchar>
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 80040a2:	e021      	b.n	80040e8 <UnityPrintChar+0x68>
    else if (*pch == 13)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b0d      	cmp	r3, #13
 80040aa:	d106      	bne.n	80040ba <UnityPrintChar+0x3a>
        UNITY_OUTPUT_CHAR('\\');
 80040ac:	205c      	movs	r0, #92	; 0x5c
 80040ae:	f001 f8e9 	bl	8005284 <putchar>
        UNITY_OUTPUT_CHAR('r');
 80040b2:	2072      	movs	r0, #114	; 0x72
 80040b4:	f001 f8e6 	bl	8005284 <putchar>
}
 80040b8:	e016      	b.n	80040e8 <UnityPrintChar+0x68>
    else if (*pch == 10)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b0a      	cmp	r3, #10
 80040c0:	d106      	bne.n	80040d0 <UnityPrintChar+0x50>
        UNITY_OUTPUT_CHAR('\\');
 80040c2:	205c      	movs	r0, #92	; 0x5c
 80040c4:	f001 f8de 	bl	8005284 <putchar>
        UNITY_OUTPUT_CHAR('n');
 80040c8:	206e      	movs	r0, #110	; 0x6e
 80040ca:	f001 f8db 	bl	8005284 <putchar>
}
 80040ce:	e00b      	b.n	80040e8 <UnityPrintChar+0x68>
        UNITY_OUTPUT_CHAR('\\');
 80040d0:	205c      	movs	r0, #92	; 0x5c
 80040d2:	f001 f8d7 	bl	8005284 <putchar>
        UNITY_OUTPUT_CHAR('x');
 80040d6:	2078      	movs	r0, #120	; 0x78
 80040d8:	f001 f8d4 	bl	8005284 <putchar>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f8ca 	bl	800427c <UnityPrintNumberHex>
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <UnityPrint+0x28>
    {
        while (*pch)
 8004102:	e005      	b.n	8004110 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ffbb 	bl	8004080 <UnityPrintChar>
            pch++;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
        while (*pch)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f5      	bne.n	8004104 <UnityPrint+0x14>
        }
    }
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UnityPrintNumberByStyle>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	d036      	beq.n	80041a4 <UnityPrintNumberByStyle+0x84>
    {
        if (style == UNITY_DISPLAY_STYLE_CHAR)
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	2b91      	cmp	r3, #145	; 0x91
 800413a:	d12f      	bne.n	800419c <UnityPrintNumberByStyle+0x7c>
        {
            /* printable characters plus CR & LF are printed */
            UNITY_OUTPUT_CHAR('\'');
 800413c:	2027      	movs	r0, #39	; 0x27
 800413e:	f001 f8a1 	bl	8005284 <putchar>
            if ((number <= 126) && (number >= 32))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b7e      	cmp	r3, #126	; 0x7e
 8004146:	dc06      	bgt.n	8004156 <UnityPrintNumberByStyle+0x36>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b1f      	cmp	r3, #31
 800414c:	dd03      	ble.n	8004156 <UnityPrintNumberByStyle+0x36>
            {
                UNITY_OUTPUT_CHAR((int)number);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f001 f898 	bl	8005284 <putchar>
 8004154:	e01e      	b.n	8004194 <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped carriage returns */
            else if (number == 13)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b0d      	cmp	r3, #13
 800415a:	d106      	bne.n	800416a <UnityPrintNumberByStyle+0x4a>
            {
                UNITY_OUTPUT_CHAR('\\');
 800415c:	205c      	movs	r0, #92	; 0x5c
 800415e:	f001 f891 	bl	8005284 <putchar>
                UNITY_OUTPUT_CHAR('r');
 8004162:	2072      	movs	r0, #114	; 0x72
 8004164:	f001 f88e 	bl	8005284 <putchar>
 8004168:	e014      	b.n	8004194 <UnityPrintNumberByStyle+0x74>
            }
            /* write escaped line feeds */
            else if (number == 10)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b0a      	cmp	r3, #10
 800416e:	d106      	bne.n	800417e <UnityPrintNumberByStyle+0x5e>
            {
                UNITY_OUTPUT_CHAR('\\');
 8004170:	205c      	movs	r0, #92	; 0x5c
 8004172:	f001 f887 	bl	8005284 <putchar>
                UNITY_OUTPUT_CHAR('n');
 8004176:	206e      	movs	r0, #110	; 0x6e
 8004178:	f001 f884 	bl	8005284 <putchar>
 800417c:	e00a      	b.n	8004194 <UnityPrintNumberByStyle+0x74>
            }
            /* unprintable characters are shown as codes */
            else
            {
                UNITY_OUTPUT_CHAR('\\');
 800417e:	205c      	movs	r0, #92	; 0x5c
 8004180:	f001 f880 	bl	8005284 <putchar>
                UNITY_OUTPUT_CHAR('x');
 8004184:	2078      	movs	r0, #120	; 0x78
 8004186:	f001 f87d 	bl	8005284 <putchar>
                UnityPrintNumberHex((UNITY_UINT)number, 2);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f874 	bl	800427c <UnityPrintNumberHex>
            }
            UNITY_OUTPUT_CHAR('\'');
 8004194:	2027      	movs	r0, #39	; 0x27
 8004196:	f001 f875 	bl	8005284 <putchar>
    {
        UNITY_OUTPUT_CHAR('0');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
    }
}
 800419a:	e01e      	b.n	80041da <UnityPrintNumberByStyle+0xba>
            UnityPrintNumber(number);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f820 	bl	80041e2 <UnityPrintNumber>
}
 80041a2:	e01a      	b.n	80041da <UnityPrintNumberByStyle+0xba>
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d004      	beq.n	80041b8 <UnityPrintNumberByStyle+0x98>
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f82d 	bl	8004210 <UnityPrintNumberUnsigned>
}
 80041b6:	e010      	b.n	80041da <UnityPrintNumberByStyle+0xba>
        UNITY_OUTPUT_CHAR('0');
 80041b8:	2030      	movs	r0, #48	; 0x30
 80041ba:	f001 f863 	bl	8005284 <putchar>
        UNITY_OUTPUT_CHAR('x');
 80041be:	2078      	movs	r0, #120	; 0x78
 80041c0:	f001 f860 	bl	8005284 <putchar>
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	78fb      	ldrb	r3, [r7, #3]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f000 f851 	bl	800427c <UnityPrintNumberHex>
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UnityPrintNumber>:

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	da05      	bge.n	8004200 <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 80041f4:	202d      	movs	r0, #45	; 0x2d
 80041f6:	f001 f845 	bl	8005284 <putchar>
        number = (~number) + 1;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	425b      	negs	r3, r3
 80041fe:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f805 	bl	8004210 <UnityPrintNumberUnsigned>
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 8004218:	2301      	movs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 800421c:	e005      	b.n	800422a <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	2b09      	cmp	r3, #9
 8004234:	d8f3      	bhi.n	800421e <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	fbb2 f1f3 	udiv	r1, r2, r3
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <UnityPrintNumberUnsigned+0x68>)
 8004240:	fba3 2301 	umull	r2, r3, r3, r1
 8004244:	08da      	lsrs	r2, r3, #3
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	1aca      	subs	r2, r1, r3
 8004250:	b2d3      	uxtb	r3, r2
 8004252:	3330      	adds	r3, #48	; 0x30
 8004254:	b2db      	uxtb	r3, r3
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f814 	bl	8005284 <putchar>
        divisor /= 10;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a06      	ldr	r2, [pc, #24]	; (8004278 <UnityPrintNumberUnsigned+0x68>)
 8004260:	fba2 2303 	umull	r2, r3, r2, r3
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1e3      	bne.n	8004236 <UnityPrintNumberUnsigned+0x26>
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	cccccccd 	.word	0xcccccccd

0800427c <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b08      	cmp	r3, #8
 8004290:	d91f      	bls.n	80042d2 <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 8004292:	2308      	movs	r3, #8
 8004294:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8004296:	e01c      	b.n	80042d2 <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	3b01      	subs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b09      	cmp	r3, #9
 80042b2:	dc07      	bgt.n	80042c4 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3330      	adds	r3, #48	; 0x30
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 ffe1 	bl	8005284 <putchar>
 80042c2:	e006      	b.n	80042d2 <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	3337      	adds	r3, #55	; 0x37
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 ffd9 	bl	8005284 <putchar>
    while (nibbles > 0)
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1df      	bne.n	8004298 <UnityPrintNumberHex+0x1c>
        }
    }
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7ff ff00 	bl	80040f0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80042f0:	203a      	movs	r0, #58	; 0x3a
 80042f2:	f000 ffc7 	bl	8005284 <putchar>
    UnityPrintNumber((UNITY_INT)line);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff72 	bl	80041e2 <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 80042fe:	203a      	movs	r0, #58	; 0x3a
 8004300:	f000 ffc0 	bl	8005284 <putchar>
    UnityPrint(Unity.CurrentTestName);
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <UnityTestResultsBegin+0x3c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fef1 	bl	80040f0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 800430e:	203a      	movs	r0, #58	; 0x3a
 8004310:	f000 ffb8 	bl	8005284 <putchar>
#endif
#endif
#endif
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	200000c4 	.word	0x200000c4

08004320 <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 8004328:	4b07      	ldr	r3, [pc, #28]	; (8004348 <UnityTestResultsFailBegin+0x28>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ffd6 	bl	80042e0 <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 8004334:	4805      	ldr	r0, [pc, #20]	; (800434c <UnityTestResultsFailBegin+0x2c>)
 8004336:	f7ff fedb 	bl	80040f0 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 800433a:	203a      	movs	r0, #58	; 0x3a
 800433c:	f000 ffa2 	bl	8005284 <putchar>
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200000c4 	.word	0x200000c4
 800434c:	08005c38 	.word	0x08005c38

08004350 <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <UnityConcludeTest+0x58>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <UnityConcludeTest+0x58>)
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	3301      	adds	r3, #1
 8004362:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <UnityConcludeTest+0x58>)
 8004364:	61d3      	str	r3, [r2, #28]
 8004366:	e014      	b.n	8004392 <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <UnityConcludeTest+0x58>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <UnityConcludeTest+0x58>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <UnityConcludeTest+0x58>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f7ff ffb0 	bl	80042e0 <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 8004380:	480a      	ldr	r0, [pc, #40]	; (80043ac <UnityConcludeTest+0x5c>)
 8004382:	f7ff feb5 	bl	80040f0 <UnityPrint>
 8004386:	e004      	b.n	8004392 <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <UnityConcludeTest+0x58>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	3301      	adds	r3, #1
 800438e:	4a06      	ldr	r2, [pc, #24]	; (80043a8 <UnityConcludeTest+0x58>)
 8004390:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <UnityConcludeTest+0x58>)
 8004394:	2200      	movs	r2, #0
 8004396:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <UnityConcludeTest+0x58>)
 800439a:	2200      	movs	r2, #0
 800439c:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 800439e:	200a      	movs	r0, #10
 80043a0:	f000 ff70 	bl	8005284 <putchar>
    UNITY_FLUSH_CALL();
}
 80043a4:	bf00      	nop
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200000c4 	.word	0x200000c4
 80043ac:	08005c30 	.word	0x08005c30

080043b0 <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    if (msg)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d020      	beq.n	8004400 <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 80043be:	4812      	ldr	r0, [pc, #72]	; (8004408 <UnityAddMsgIfSpecified+0x58>)
 80043c0:	f7ff fe96 	bl	80040f0 <UnityPrint>

#ifdef UNITY_PRINT_TEST_CONTEXT
        UNITY_PRINT_TEST_CONTEXT();
#endif
#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <UnityAddMsgIfSpecified+0x5c>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d016      	beq.n	80043fa <UnityAddMsgIfSpecified+0x4a>
        {
            UnityPrint(UnityStrDetail1Name);
 80043cc:	4810      	ldr	r0, [pc, #64]	; (8004410 <UnityAddMsgIfSpecified+0x60>)
 80043ce:	f7ff fe8f 	bl	80040f0 <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <UnityAddMsgIfSpecified+0x5c>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff fe8a 	bl	80040f0 <UnityPrint>
            if (Unity.CurrentDetail2)
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <UnityAddMsgIfSpecified+0x5c>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <UnityAddMsgIfSpecified+0x44>
            {
                UnityPrint(UnityStrDetail2Name);
 80043e4:	480b      	ldr	r0, [pc, #44]	; (8004414 <UnityAddMsgIfSpecified+0x64>)
 80043e6:	f7ff fe83 	bl	80040f0 <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
 80043ea:	4b08      	ldr	r3, [pc, #32]	; (800440c <UnityAddMsgIfSpecified+0x5c>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fe7e 	bl	80040f0 <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
 80043f4:	4804      	ldr	r0, [pc, #16]	; (8004408 <UnityAddMsgIfSpecified+0x58>)
 80043f6:	f7ff fe7b 	bl	80040f0 <UnityPrint>
        }
#endif
        UnityPrint(msg);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fe78 	bl	80040f0 <UnityPrint>
    }
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	08005c40 	.word	0x08005c40
 800440c:	200000c4 	.word	0x200000c4
 8004410:	08005ce4 	.word	0x08005ce4
 8004414:	08005cf0 	.word	0x08005cf0

08004418 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
    RETURN_IF_FAIL_OR_IGNORE;
 8004426:	4b18      	ldr	r3, [pc, #96]	; (8004488 <UnityAssertEqualNumber+0x70>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <UnityAssertEqualNumber+0x1e>
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <UnityAssertEqualNumber+0x70>)
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <UnityAssertEqualNumber+0x26>
 8004436:	2101      	movs	r1, #1
 8004438:	4814      	ldr	r0, [pc, #80]	; (800448c <UnityAssertEqualNumber+0x74>)
 800443a:	f7fb fecb 	bl	80001d4 <longjmp>

    if (expected != actual)
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d01c      	beq.n	8004480 <UnityAssertEqualNumber+0x68>
    {
        UnityTestResultsFailBegin(lineNumber);
 8004446:	6838      	ldr	r0, [r7, #0]
 8004448:	f7ff ff6a 	bl	8004320 <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 800444c:	4810      	ldr	r0, [pc, #64]	; (8004490 <UnityAssertEqualNumber+0x78>)
 800444e:	f7ff fe4f 	bl	80040f0 <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 8004452:	7e3b      	ldrb	r3, [r7, #24]
 8004454:	4619      	mov	r1, r3
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff fe62 	bl	8004120 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <UnityAssertEqualNumber+0x7c>)
 800445e:	f7ff fe47 	bl	80040f0 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 8004462:	7e3b      	ldrb	r3, [r7, #24]
 8004464:	4619      	mov	r1, r3
 8004466:	68b8      	ldr	r0, [r7, #8]
 8004468:	f7ff fe5a 	bl	8004120 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff9f 	bl	80043b0 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <UnityAssertEqualNumber+0x70>)
 8004474:	2201      	movs	r2, #1
 8004476:	621a      	str	r2, [r3, #32]
 8004478:	2101      	movs	r1, #1
 800447a:	4804      	ldr	r0, [pc, #16]	; (800448c <UnityAssertEqualNumber+0x74>)
 800447c:	f7fb feaa 	bl	80001d4 <longjmp>
    }
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200000c4 	.word	0x200000c4
 800448c:	200000ec 	.word	0x200000ec
 8004490:	08005c44 	.word	0x08005c44
 8004494:	08005c50 	.word	0x08005c50

08004498 <UnityAssertGreaterOrLessOrEqualNumber>:
                                           const UNITY_INT actual,
                                           const UNITY_COMPARISON_T compare,
                                           const char *msg,
                                           const UNITY_LINE_TYPE lineNumber,
                                           const UNITY_DISPLAY_STYLE_T style)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
    int failed = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
    RETURN_IF_FAIL_OR_IGNORE;
 80044ac:	4b47      	ldr	r3, [pc, #284]	; (80045cc <UnityAssertGreaterOrLessOrEqualNumber+0x134>)
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <UnityAssertGreaterOrLessOrEqualNumber+0x24>
 80044b4:	4b45      	ldr	r3, [pc, #276]	; (80045cc <UnityAssertGreaterOrLessOrEqualNumber+0x134>)
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <UnityAssertGreaterOrLessOrEqualNumber+0x2c>
 80044bc:	2101      	movs	r1, #1
 80044be:	4844      	ldr	r0, [pc, #272]	; (80045d0 <UnityAssertGreaterOrLessOrEqualNumber+0x138>)
 80044c0:	f7fb fe88 	bl	80001d4 <longjmp>

    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d104      	bne.n	80044d6 <UnityAssertGreaterOrLessOrEqualNumber+0x3e>
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d175      	bne.n	80045c2 <UnityAssertGreaterOrLessOrEqualNumber+0x12a>
    if ((threshold == actual))                               { failed = 1; }
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d101      	bne.n	80044e2 <UnityAssertGreaterOrLessOrEqualNumber+0x4a>
 80044de:	2301      	movs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 80044e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <UnityAssertGreaterOrLessOrEqualNumber+0x84>
    {
        if ((actual > threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	dd06      	ble.n	8004504 <UnityAssertGreaterOrLessOrEqualNumber+0x6c>
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <UnityAssertGreaterOrLessOrEqualNumber+0x6c>
 8004500:	2301      	movs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
        if ((actual < threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	da1d      	bge.n	8004548 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d018      	beq.n	8004548 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 8004516:	2301      	movs	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e015      	b.n	8004548 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
    }
    else /* UINT or HEX */
    {
        if (((UNITY_UINT)actual > (UNITY_UINT)threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	429a      	cmp	r2, r3
 8004522:	d906      	bls.n	8004532 <UnityAssertGreaterOrLessOrEqualNumber+0x9a>
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <UnityAssertGreaterOrLessOrEqualNumber+0x9a>
 800452e:	2301      	movs	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
        if (((UNITY_UINT)actual < (UNITY_UINT)threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d206      	bcs.n	8004548 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 800453a:	79fb      	ldrb	r3, [r7, #7]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 8004544:	2301      	movs	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
    }

    if (failed)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d03a      	beq.n	80045c4 <UnityAssertGreaterOrLessOrEqualNumber+0x12c>
    {
        UnityTestResultsFailBegin(lineNumber);
 800454e:	6a38      	ldr	r0, [r7, #32]
 8004550:	f7ff fee6 	bl	8004320 <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 8004554:	481f      	ldr	r0, [pc, #124]	; (80045d4 <UnityAssertGreaterOrLessOrEqualNumber+0x13c>)
 8004556:	f7ff fdcb 	bl	80040f0 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 800455a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800455e:	4619      	mov	r1, r3
 8004560:	68b8      	ldr	r0, [r7, #8]
 8004562:	f7ff fddd 	bl	8004120 <UnityPrintNumberByStyle>
        if (compare & UNITY_GREATER_THAN) { UnityPrint(UnityStrGt);       }
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <UnityAssertGreaterOrLessOrEqualNumber+0xde>
 8004570:	4819      	ldr	r0, [pc, #100]	; (80045d8 <UnityAssertGreaterOrLessOrEqualNumber+0x140>)
 8004572:	f7ff fdbd 	bl	80040f0 <UnityPrint>
        if (compare & UNITY_SMALLER_THAN) { UnityPrint(UnityStrLt);       }
 8004576:	79fb      	ldrb	r3, [r7, #7]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <UnityAssertGreaterOrLessOrEqualNumber+0xee>
 8004580:	4816      	ldr	r0, [pc, #88]	; (80045dc <UnityAssertGreaterOrLessOrEqualNumber+0x144>)
 8004582:	f7ff fdb5 	bl	80040f0 <UnityPrint>
        if (compare & UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual);  }
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <UnityAssertGreaterOrLessOrEqualNumber+0xfe>
 8004590:	4813      	ldr	r0, [pc, #76]	; (80045e0 <UnityAssertGreaterOrLessOrEqualNumber+0x148>)
 8004592:	f7ff fdad 	bl	80040f0 <UnityPrint>
        if (compare == UNITY_NOT_EQUAL)   { UnityPrint(UnityStrNotEqual); }
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d102      	bne.n	80045a2 <UnityAssertGreaterOrLessOrEqualNumber+0x10a>
 800459c:	4811      	ldr	r0, [pc, #68]	; (80045e4 <UnityAssertGreaterOrLessOrEqualNumber+0x14c>)
 800459e:	f7ff fda7 	bl	80040f0 <UnityPrint>
        UnityPrintNumberByStyle(threshold, style);
 80045a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80045a6:	4619      	mov	r1, r3
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff fdb9 	bl	8004120 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 80045ae:	6838      	ldr	r0, [r7, #0]
 80045b0:	f7ff fefe 	bl	80043b0 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <UnityAssertGreaterOrLessOrEqualNumber+0x134>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	621a      	str	r2, [r3, #32]
 80045ba:	2101      	movs	r1, #1
 80045bc:	4804      	ldr	r0, [pc, #16]	; (80045d0 <UnityAssertGreaterOrLessOrEqualNumber+0x138>)
 80045be:	f7fb fe09 	bl	80001d4 <longjmp>
    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
 80045c2:	bf00      	nop
    }
}
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	200000c4 	.word	0x200000c4
 80045d0:	200000ec 	.word	0x200000ec
 80045d4:	08005c44 	.word	0x08005c44
 80045d8:	08005c58 	.word	0x08005c58
 80045dc:	08005c70 	.word	0x08005c70
 80045e0:	08005c84 	.word	0x08005c84
 80045e4:	08005c94 	.word	0x08005c94

080045e8 <UnityDefaultTestRun>:

/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 80045f4:	4a14      	ldr	r2, [pc, #80]	; (8004648 <UnityDefaultTestRun+0x60>)
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a12      	ldr	r2, [pc, #72]	; (8004648 <UnityDefaultTestRun+0x60>)
 80045fe:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <UnityDefaultTestRun+0x60>)
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	3301      	adds	r3, #1
 8004606:	4a10      	ldr	r2, [pc, #64]	; (8004648 <UnityDefaultTestRun+0x60>)
 8004608:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <UnityDefaultTestRun+0x60>)
 800460c:	2200      	movs	r2, #0
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <UnityDefaultTestRun+0x60>)
 8004612:	2200      	movs	r2, #0
 8004614:	60da      	str	r2, [r3, #12]
    UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 8004616:	480d      	ldr	r0, [pc, #52]	; (800464c <UnityDefaultTestRun+0x64>)
 8004618:	f7fb fdd6 	bl	80001c8 <setjmp>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <UnityDefaultTestRun+0x42>
    {
        setUp();
 8004622:	f000 f885 	bl	8004730 <setUp>
        Func();
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 800462a:	4808      	ldr	r0, [pc, #32]	; (800464c <UnityDefaultTestRun+0x64>)
 800462c:	f7fb fdcc 	bl	80001c8 <setjmp>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <UnityDefaultTestRun+0x52>
    {
        tearDown();
 8004636:	f000 f882 	bl	800473e <tearDown>
    }
    UNITY_EXEC_TIME_STOP();
    UnityConcludeTest();
 800463a:	f7ff fe89 	bl	8004350 <UnityConcludeTest>
}
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	200000c4 	.word	0x200000c4
 800464c:	200000ec 	.word	0x200000ec

08004650 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <UnityBegin+0x50>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <UnityBegin+0x50>)
 8004660:	2200      	movs	r2, #0
 8004662:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <UnityBegin+0x50>)
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 800466a:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <UnityBegin+0x50>)
 800466c:	2200      	movs	r2, #0
 800466e:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <UnityBegin+0x50>)
 8004672:	2200      	movs	r2, #0
 8004674:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <UnityBegin+0x50>)
 8004678:	2200      	movs	r2, #0
 800467a:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <UnityBegin+0x50>)
 800467e:	2200      	movs	r2, #0
 8004680:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <UnityBegin+0x50>)
 8004684:	2200      	movs	r2, #0
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <UnityBegin+0x50>)
 800468a:	2200      	movs	r2, #0
 800468c:	609a      	str	r2, [r3, #8]
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <UnityBegin+0x50>)
 8004690:	2200      	movs	r2, #0
 8004692:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	200000c4 	.word	0x200000c4

080046a4 <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
    UNITY_PRINT_EOL();
 80046a8:	200a      	movs	r0, #10
 80046aa:	f000 fdeb 	bl	8005284 <putchar>
    UnityPrint(UnityStrBreaker);
 80046ae:	4819      	ldr	r0, [pc, #100]	; (8004714 <UnityEnd+0x70>)
 80046b0:	f7ff fd1e 	bl	80040f0 <UnityPrint>
    UNITY_PRINT_EOL();
 80046b4:	200a      	movs	r0, #10
 80046b6:	f000 fde5 	bl	8005284 <putchar>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 80046ba:	4b17      	ldr	r3, [pc, #92]	; (8004718 <UnityEnd+0x74>)
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fd8f 	bl	80041e2 <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 80046c4:	4815      	ldr	r0, [pc, #84]	; (800471c <UnityEnd+0x78>)
 80046c6:	f7ff fd13 	bl	80040f0 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 80046ca:	4b13      	ldr	r3, [pc, #76]	; (8004718 <UnityEnd+0x74>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff fd87 	bl	80041e2 <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 80046d4:	4812      	ldr	r0, [pc, #72]	; (8004720 <UnityEnd+0x7c>)
 80046d6:	f7ff fd0b 	bl	80040f0 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 80046da:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <UnityEnd+0x74>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fd7f 	bl	80041e2 <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 80046e4:	480f      	ldr	r0, [pc, #60]	; (8004724 <UnityEnd+0x80>)
 80046e6:	f7ff fd03 	bl	80040f0 <UnityPrint>
    UNITY_PRINT_EOL();
 80046ea:	200a      	movs	r0, #10
 80046ec:	f000 fdca 	bl	8005284 <putchar>
    if (Unity.TestFailures == 0U)
 80046f0:	4b09      	ldr	r3, [pc, #36]	; (8004718 <UnityEnd+0x74>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <UnityEnd+0x5c>
    {
        UnityPrint(UnityStrOk);
 80046f8:	480b      	ldr	r0, [pc, #44]	; (8004728 <UnityEnd+0x84>)
 80046fa:	f7ff fcf9 	bl	80040f0 <UnityPrint>
 80046fe:	e002      	b.n	8004706 <UnityEnd+0x62>
    }
    else
    {
        UnityPrint(UnityStrFail);
 8004700:	480a      	ldr	r0, [pc, #40]	; (800472c <UnityEnd+0x88>)
 8004702:	f7ff fcf5 	bl	80040f0 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 8004706:	200a      	movs	r0, #10
 8004708:	f000 fdbc 	bl	8005284 <putchar>
    UNITY_FLUSH_CALL();
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
 800470c:	4b02      	ldr	r3, [pc, #8]	; (8004718 <UnityEnd+0x74>)
 800470e:	699b      	ldr	r3, [r3, #24]
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	08005cac 	.word	0x08005cac
 8004718:	200000c4 	.word	0x200000c4
 800471c:	08005cc4 	.word	0x08005cc4
 8004720:	08005ccc 	.word	0x08005ccc
 8004724:	08005cd8 	.word	0x08005cd8
 8004728:	08005c2c 	.word	0x08005c2c
 800472c:	08005c38 	.word	0x08005c38

08004730 <setUp>:
static void MX_SPI3_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */
void setUp(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0

}
 8004734:	bf00      	nop
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <tearDown>:

void tearDown(void)
{
 800473e:	b480      	push	{r7}
 8004740:	af00      	add	r7, sp, #0

}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004750:	f7fc fa37 	bl	8000bc2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004754:	f000 f844 	bl	80047e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004758:	f000 fa1e 	bl	8004b98 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800475c:	f000 f8e4 	bl	8004928 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8004760:	f000 f91a 	bl	8004998 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8004764:	f000 f956 	bl	8004a14 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8004768:	f000 f97a 	bl	8004a60 <MX_SPI3_Init>
  //MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 800476c:	f000 f9b6 	bl	8004adc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004770:	f000 f9e4 	bl	8004b3c <MX_USB_OTG_FS_PCD_Init>
  UnityBegin("Test Examples");
  DO_TEST(test_thatSucceeds);
  DO_TEST(test_succeedsWithCondition);
  UnityEnd();
#endif
  UnityBegin("modules/ledctrl.c");
 8004774:	480f      	ldr	r0, [pc, #60]	; (80047b4 <main+0x68>)
 8004776:	f7ff ff6b 	bl	8004650 <UnityBegin>
  DO_TEST(test_check_min_number_blinks);
 800477a:	2282      	movs	r2, #130	; 0x82
 800477c:	490e      	ldr	r1, [pc, #56]	; (80047b8 <main+0x6c>)
 800477e:	480f      	ldr	r0, [pc, #60]	; (80047bc <main+0x70>)
 8004780:	f7ff ff32 	bl	80045e8 <UnityDefaultTestRun>
  DO_TEST(test_check_max_number_blinks);
 8004784:	2283      	movs	r2, #131	; 0x83
 8004786:	490e      	ldr	r1, [pc, #56]	; (80047c0 <main+0x74>)
 8004788:	480e      	ldr	r0, [pc, #56]	; (80047c4 <main+0x78>)
 800478a:	f7ff ff2d 	bl	80045e8 <UnityDefaultTestRun>
  DO_TEST(test_check_min_blink_duration);
 800478e:	2284      	movs	r2, #132	; 0x84
 8004790:	490d      	ldr	r1, [pc, #52]	; (80047c8 <main+0x7c>)
 8004792:	480e      	ldr	r0, [pc, #56]	; (80047cc <main+0x80>)
 8004794:	f7ff ff28 	bl	80045e8 <UnityDefaultTestRun>
  DO_TEST(test_check_max_blink_duration);
 8004798:	2285      	movs	r2, #133	; 0x85
 800479a:	490d      	ldr	r1, [pc, #52]	; (80047d0 <main+0x84>)
 800479c:	480d      	ldr	r0, [pc, #52]	; (80047d4 <main+0x88>)
 800479e:	f7ff ff23 	bl	80045e8 <UnityDefaultTestRun>
  DO_TEST(test_total_blink_length);
 80047a2:	2286      	movs	r2, #134	; 0x86
 80047a4:	490c      	ldr	r1, [pc, #48]	; (80047d8 <main+0x8c>)
 80047a6:	480d      	ldr	r0, [pc, #52]	; (80047dc <main+0x90>)
 80047a8:	f7ff ff1e 	bl	80045e8 <UnityDefaultTestRun>
  UnityEnd();
 80047ac:	f7ff ff7a 	bl	80046a4 <UnityEnd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047b0:	e7fe      	b.n	80047b0 <main+0x64>
 80047b2:	bf00      	nop
 80047b4:	08005b38 	.word	0x08005b38
 80047b8:	08005b4c 	.word	0x08005b4c
 80047bc:	08004f07 	.word	0x08004f07
 80047c0:	08005b6c 	.word	0x08005b6c
 80047c4:	08004f77 	.word	0x08004f77
 80047c8:	08005b8c 	.word	0x08005b8c
 80047cc:	08004fe7 	.word	0x08004fe7
 80047d0:	08005bac 	.word	0x08005bac
 80047d4:	08005055 	.word	0x08005055
 80047d8:	08005bcc 	.word	0x08005bcc
 80047dc:	080050c9 	.word	0x080050c9

080047e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b0b8      	sub	sp, #224	; 0xe0
 80047e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047ea:	2244      	movs	r2, #68	; 0x44
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fd40 	bl	8005274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004804:	463b      	mov	r3, r7
 8004806:	2288      	movs	r2, #136	; 0x88
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fd32 	bl	8005274 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004810:	f7fd f8de 	bl	80019d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004814:	4b42      	ldr	r3, [pc, #264]	; (8004920 <SystemClock_Config+0x140>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	4a41      	ldr	r2, [pc, #260]	; (8004920 <SystemClock_Config+0x140>)
 800481c:	f023 0318 	bic.w	r3, r3, #24
 8004820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004824:	2314      	movs	r3, #20
 8004826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800482a:	2301      	movs	r3, #1
 800482c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004830:	2301      	movs	r3, #1
 8004832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004836:	2300      	movs	r3, #0
 8004838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800483c:	2360      	movs	r3, #96	; 0x60
 800483e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004842:	2302      	movs	r3, #2
 8004844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004848:	2301      	movs	r3, #1
 800484a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800484e:	2301      	movs	r3, #1
 8004850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004854:	2328      	movs	r3, #40	; 0x28
 8004856:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800485a:	2307      	movs	r3, #7
 800485c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004860:	2302      	movs	r3, #2
 8004862:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004866:	2302      	movs	r3, #2
 8004868:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800486c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004870:	4618      	mov	r0, r3
 8004872:	f7fd f9ed 	bl	8001c50 <HAL_RCC_OscConfig>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800487c:	f000 fb3c 	bl	8004ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004880:	230f      	movs	r3, #15
 8004882:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004886:	2303      	movs	r3, #3
 8004888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800488c:	2300      	movs	r3, #0
 800488e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800489e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80048a2:	2104      	movs	r1, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fd fdb9 	bl	800241c <HAL_RCC_ClockConfig>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80048b0:	f000 fb22 	bl	8004ef8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <SystemClock_Config+0x144>)
 80048b6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80048b8:	2300      	movs	r3, #0
 80048ba:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80048bc:	2300      	movs	r3, #0
 80048be:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80048c0:	2300      	movs	r3, #0
 80048c2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80048ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80048d0:	2301      	movs	r3, #1
 80048d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80048d4:	2301      	movs	r3, #1
 80048d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80048d8:	2318      	movs	r3, #24
 80048da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80048dc:	2307      	movs	r3, #7
 80048de:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80048e0:	2302      	movs	r3, #2
 80048e2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80048e4:	2302      	movs	r3, #2
 80048e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80048e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048ec:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048ee:	463b      	mov	r3, r7
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd ff97 	bl	8002824 <HAL_RCCEx_PeriphCLKConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80048fc:	f000 fafc 	bl	8004ef8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004900:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004904:	f7fd f882 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <SystemClock_Config+0x132>
  {
    Error_Handler();
 800490e:	f000 faf3 	bl	8004ef8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004912:	f7fe fa6d 	bl	8002df0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004916:	bf00      	nop
 8004918:	37e0      	adds	r7, #224	; 0xe0
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40021000 	.word	0x40021000
 8004924:	00012085 	.word	0x00012085

08004928 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800492c:	4b18      	ldr	r3, [pc, #96]	; (8004990 <MX_DFSDM1_Init+0x68>)
 800492e:	4a19      	ldr	r2, [pc, #100]	; (8004994 <MX_DFSDM1_Init+0x6c>)
 8004930:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004934:	2201      	movs	r2, #1
 8004936:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <MX_DFSDM1_Init+0x68>)
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800493e:	4b14      	ldr	r3, [pc, #80]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004940:	2202      	movs	r2, #2
 8004942:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8004944:	4b12      	ldr	r3, [pc, #72]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004946:	2200      	movs	r2, #0
 8004948:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800494a:	4b11      	ldr	r3, [pc, #68]	; (8004990 <MX_DFSDM1_Init+0x68>)
 800494c:	2200      	movs	r2, #0
 800494e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004950:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004956:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <MX_DFSDM1_Init+0x68>)
 800495a:	2200      	movs	r2, #0
 800495c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004960:	2204      	movs	r2, #4
 8004962:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004966:	2200      	movs	r2, #0
 8004968:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <MX_DFSDM1_Init+0x68>)
 800496c:	2201      	movs	r2, #1
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004972:	2200      	movs	r2, #0
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <MX_DFSDM1_Init+0x68>)
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800497c:	4804      	ldr	r0, [pc, #16]	; (8004990 <MX_DFSDM1_Init+0x68>)
 800497e:	f7fc fac9 	bl	8000f14 <HAL_DFSDM_ChannelInit>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8004988:	f000 fab6 	bl	8004ef8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800498c:	bf00      	nop
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20000148 	.word	0x20000148
 8004994:	40016020 	.word	0x40016020

08004998 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <MX_I2C2_Init+0x74>)
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <MX_I2C2_Init+0x78>)
 80049a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80049a2:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049a4:	f640 6214 	movw	r2, #3604	; 0xe14
 80049a8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80049aa:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049b0:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049be:	2200      	movs	r2, #0
 80049c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80049d4:	480d      	ldr	r0, [pc, #52]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049d6:	f7fc fd8c 	bl	80014f2 <HAL_I2C_Init>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80049e0:	f000 fa8a 	bl	8004ef8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049e4:	2100      	movs	r1, #0
 80049e6:	4809      	ldr	r0, [pc, #36]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049e8:	f7fc fe12 	bl	8001610 <HAL_I2CEx_ConfigAnalogFilter>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80049f2:	f000 fa81 	bl	8004ef8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80049f6:	2100      	movs	r1, #0
 80049f8:	4804      	ldr	r0, [pc, #16]	; (8004a0c <MX_I2C2_Init+0x74>)
 80049fa:	f7fc fe54 	bl	80016a6 <HAL_I2CEx_ConfigDigitalFilter>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8004a04:	f000 fa78 	bl	8004ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004a08:	bf00      	nop
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000608 	.word	0x20000608
 8004a10:	40005800 	.word	0x40005800

08004a14 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a1a:	4a10      	ldr	r2, [pc, #64]	; (8004a5c <MX_QUADSPI_Init+0x48>)
 8004a1c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8004a1e:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a20:	22ff      	movs	r2, #255	; 0xff
 8004a22:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004a36:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004a42:	4805      	ldr	r0, [pc, #20]	; (8004a58 <MX_QUADSPI_Init+0x44>)
 8004a44:	f7fd f848 	bl	8001ad8 <HAL_QSPI_Init>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8004a4e:	f000 fa53 	bl	8004ef8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000738 	.word	0x20000738
 8004a5c:	a0001000 	.word	0xa0001000

08004a60 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <MX_SPI3_Init+0x78>)
 8004a68:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a70:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a72:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004a78:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a7a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004a7e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a92:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004aa0:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aa6:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004aae:	2207      	movs	r2, #7
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ab2:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004aba:	2208      	movs	r2, #8
 8004abc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004abe:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <MX_SPI3_Init+0x74>)
 8004ac0:	f7fe fb70 	bl	80031a4 <HAL_SPI_Init>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004aca:	f000 fa15 	bl	8004ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000654 	.word	0x20000654
 8004ad8:	40003c00 	.word	0x40003c00

08004adc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004ae0:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <MX_USART3_UART_Init+0x5c>)
 8004ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004aee:	4b11      	ldr	r3, [pc, #68]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004af4:	4b0f      	ldr	r3, [pc, #60]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004afa:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004b02:	220c      	movs	r2, #12
 8004b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b06:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b1e:	4805      	ldr	r0, [pc, #20]	; (8004b34 <MX_USART3_UART_Init+0x58>)
 8004b20:	f7fe fbe3 	bl	80032ea <HAL_UART_Init>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004b2a:	f000 f9e5 	bl	8004ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000180 	.word	0x20000180
 8004b38:	40004800 	.word	0x40004800

08004b3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004b46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004b48:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b4a:	2206      	movs	r2, #6
 8004b4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b50:	2202      	movs	r2, #2
 8004b52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b56:	2202      	movs	r2, #2
 8004b58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004b5a:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004b60:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004b7e:	4805      	ldr	r0, [pc, #20]	; (8004b94 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b80:	f7fc fddd 	bl	800173e <HAL_PCD_Init>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004b8a:	f000 f9b5 	bl	8004ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004b8e:	bf00      	nop
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000200 	.word	0x20000200

08004b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b9e:	f107 0314 	add.w	r3, r7, #20
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	609a      	str	r2, [r3, #8]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bae:	4bba      	ldr	r3, [pc, #744]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb2:	4ab9      	ldr	r2, [pc, #740]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bb4:	f043 0310 	orr.w	r3, r3, #16
 8004bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bba:	4bb7      	ldr	r3, [pc, #732]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bc6:	4bb4      	ldr	r3, [pc, #720]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	4ab3      	ldr	r2, [pc, #716]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bd2:	4bb1      	ldr	r3, [pc, #708]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bde:	4bae      	ldr	r3, [pc, #696]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be2:	4aad      	ldr	r2, [pc, #692]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bea:	4bab      	ldr	r3, [pc, #684]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bf6:	4ba8      	ldr	r3, [pc, #672]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	4aa7      	ldr	r2, [pc, #668]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004bfc:	f043 0302 	orr.w	r3, r3, #2
 8004c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c02:	4ba5      	ldr	r3, [pc, #660]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c0e:	4ba2      	ldr	r3, [pc, #648]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	4aa1      	ldr	r2, [pc, #644]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004c14:	f043 0308 	orr.w	r3, r3, #8
 8004c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c1a:	4b9f      	ldr	r3, [pc, #636]	; (8004e98 <MX_GPIO_Init+0x300>)
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8004c26:	2200      	movs	r2, #0
 8004c28:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004c2c:	489b      	ldr	r0, [pc, #620]	; (8004e9c <MX_GPIO_Init+0x304>)
 8004c2e:	f7fc fc25 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8004c32:	2200      	movs	r2, #0
 8004c34:	f248 1104 	movw	r1, #33028	; 0x8104
 8004c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c3c:	f7fc fc1e 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004c40:	2200      	movs	r2, #0
 8004c42:	f24f 0114 	movw	r1, #61460	; 0xf014
 8004c46:	4896      	ldr	r0, [pc, #600]	; (8004ea0 <MX_GPIO_Init+0x308>)
 8004c48:	f7fc fc18 	bl	800147c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f241 0181 	movw	r1, #4225	; 0x1081
 8004c52:	4894      	ldr	r0, [pc, #592]	; (8004ea4 <MX_GPIO_Init+0x30c>)
 8004c54:	f7fc fc12 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c5e:	4891      	ldr	r0, [pc, #580]	; (8004ea4 <MX_GPIO_Init+0x30c>)
 8004c60:	f7fc fc0c 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004c64:	2200      	movs	r2, #0
 8004c66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c6a:	488f      	ldr	r0, [pc, #572]	; (8004ea8 <MX_GPIO_Init+0x310>)
 8004c6c:	f7fc fc06 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004c70:	2201      	movs	r2, #1
 8004c72:	2120      	movs	r1, #32
 8004c74:	488a      	ldr	r0, [pc, #552]	; (8004ea0 <MX_GPIO_Init+0x308>)
 8004c76:	f7fc fc01 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4887      	ldr	r0, [pc, #540]	; (8004e9c <MX_GPIO_Init+0x304>)
 8004c80:	f7fc fbfc 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004c84:	f240 1315 	movw	r3, #277	; 0x115
 8004c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c96:	f107 0314 	add.w	r3, r7, #20
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	487f      	ldr	r0, [pc, #508]	; (8004e9c <MX_GPIO_Init+0x304>)
 8004c9e:	f7fc fa45 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004ca2:	236a      	movs	r3, #106	; 0x6a
 8004ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ca6:	4b81      	ldr	r3, [pc, #516]	; (8004eac <MX_GPIO_Init+0x314>)
 8004ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cae:	f107 0314 	add.w	r3, r7, #20
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4879      	ldr	r0, [pc, #484]	; (8004e9c <MX_GPIO_Init+0x304>)
 8004cb6:	f7fc fa39 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8004cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004cc0:	4b7b      	ldr	r3, [pc, #492]	; (8004eb0 <MX_GPIO_Init+0x318>)
 8004cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4876      	ldr	r0, [pc, #472]	; (8004ea8 <MX_GPIO_Init+0x310>)
 8004cd0:	f7fc fa2c 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004cd4:	233f      	movs	r3, #63	; 0x3f
 8004cd6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004cd8:	230b      	movs	r3, #11
 8004cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4870      	ldr	r0, [pc, #448]	; (8004ea8 <MX_GPIO_Init+0x310>)
 8004ce8:	f7fc fa20 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004cec:	2303      	movs	r3, #3
 8004cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d00:	f107 0314 	add.w	r3, r7, #20
 8004d04:	4619      	mov	r1, r3
 8004d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d0a:	f7fc fa0f 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8004d0e:	f248 1304 	movw	r3, #33028	; 0x8104
 8004d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d14:	2301      	movs	r3, #1
 8004d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d20:	f107 0314 	add.w	r3, r7, #20
 8004d24:	4619      	mov	r1, r3
 8004d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d2a:	f7fc f9ff 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8004d2e:	2308      	movs	r3, #8
 8004d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d32:	2302      	movs	r3, #2
 8004d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	4619      	mov	r1, r3
 8004d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d4c:	f7fc f9ee 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8004d50:	2310      	movs	r3, #16
 8004d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004d54:	230b      	movs	r3, #11
 8004d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8004d5c:	f107 0314 	add.w	r3, r7, #20
 8004d60:	4619      	mov	r1, r3
 8004d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d66:	f7fc f9e1 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004d6a:	23e0      	movs	r3, #224	; 0xe0
 8004d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d76:	2303      	movs	r3, #3
 8004d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d7a:	2305      	movs	r3, #5
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7e:	f107 0314 	add.w	r3, r7, #20
 8004d82:	4619      	mov	r1, r3
 8004d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d88:	f7fc f9d0 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d90:	4b46      	ldr	r3, [pc, #280]	; (8004eac <MX_GPIO_Init+0x314>)
 8004d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4840      	ldr	r0, [pc, #256]	; (8004ea0 <MX_GPIO_Init+0x308>)
 8004da0:	f7fc f9c4 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004da4:	2302      	movs	r3, #2
 8004da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004da8:	230b      	movs	r3, #11
 8004daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004db0:	f107 0314 	add.w	r3, r7, #20
 8004db4:	4619      	mov	r1, r3
 8004db6:	483a      	ldr	r0, [pc, #232]	; (8004ea0 <MX_GPIO_Init+0x308>)
 8004db8:	f7fc f9b8 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004dbc:	f24f 0334 	movw	r3, #61492	; 0xf034
 8004dc0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4832      	ldr	r0, [pc, #200]	; (8004ea0 <MX_GPIO_Init+0x308>)
 8004dd6:	f7fc f9a9 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8004dda:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8004dde:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004de0:	4b32      	ldr	r3, [pc, #200]	; (8004eac <MX_GPIO_Init+0x314>)
 8004de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	4619      	mov	r1, r3
 8004dee:	482d      	ldr	r0, [pc, #180]	; (8004ea4 <MX_GPIO_Init+0x30c>)
 8004df0:	f7fc f99c 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004df4:	f243 0381 	movw	r3, #12417	; 0x3081
 8004df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e02:	2300      	movs	r3, #0
 8004e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e06:	f107 0314 	add.w	r3, r7, #20
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4825      	ldr	r0, [pc, #148]	; (8004ea4 <MX_GPIO_Init+0x30c>)
 8004e0e:	f7fc f98d 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004e12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e20:	2300      	movs	r3, #0
 8004e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	4619      	mov	r1, r3
 8004e2a:	481f      	ldr	r0, [pc, #124]	; (8004ea8 <MX_GPIO_Init+0x310>)
 8004e2c:	f7fc f97e 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004e30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004e36:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <MX_GPIO_Init+0x314>)
 8004e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e3e:	f107 0314 	add.w	r3, r7, #20
 8004e42:	4619      	mov	r1, r3
 8004e44:	4818      	ldr	r0, [pc, #96]	; (8004ea8 <MX_GPIO_Init+0x310>)
 8004e46:	f7fc f971 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e56:	2303      	movs	r3, #3
 8004e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004e5e:	f107 0314 	add.w	r3, r7, #20
 8004e62:	4619      	mov	r1, r3
 8004e64:	480f      	ldr	r0, [pc, #60]	; (8004ea4 <MX_GPIO_Init+0x30c>)
 8004e66:	f7fc f961 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004e6a:	2378      	movs	r3, #120	; 0x78
 8004e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e76:	2303      	movs	r3, #3
 8004e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e7a:	2307      	movs	r3, #7
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	4619      	mov	r1, r3
 8004e84:	4807      	ldr	r0, [pc, #28]	; (8004ea4 <MX_GPIO_Init+0x30c>)
 8004e86:	f7fc f951 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8004e8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e90:	2312      	movs	r3, #18
 8004e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e00d      	b.n	8004eb4 <MX_GPIO_Init+0x31c>
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	48001000 	.word	0x48001000
 8004ea0:	48000400 	.word	0x48000400
 8004ea4:	48000c00 	.word	0x48000c00
 8004ea8:	48000800 	.word	0x48000800
 8004eac:	10110000 	.word	0x10110000
 8004eb0:	10210000 	.word	0x10210000
 8004eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004eba:	2304      	movs	r3, #4
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ebe:	f107 0314 	add.w	r3, r7, #20
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	480b      	ldr	r0, [pc, #44]	; (8004ef4 <MX_GPIO_Init+0x35c>)
 8004ec6:	f7fc f931 	bl	800112c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2100      	movs	r1, #0
 8004ece:	2017      	movs	r0, #23
 8004ed0:	f7fb ffe9 	bl	8000ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004ed4:	2017      	movs	r0, #23
 8004ed6:	f7fc f802 	bl	8000ede <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004eda:	2200      	movs	r2, #0
 8004edc:	2100      	movs	r1, #0
 8004ede:	2028      	movs	r0, #40	; 0x28
 8004ee0:	f7fb ffe1 	bl	8000ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ee4:	2028      	movs	r0, #40	; 0x28
 8004ee6:	f7fb fffa 	bl	8000ede <HAL_NVIC_EnableIRQ>

}
 8004eea:	bf00      	nop
 8004eec:	3728      	adds	r7, #40	; 0x28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	48000400 	.word	0x48000400

08004ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <test_check_min_number_blinks>:
//-------------------------EXPORTED FUNCTIONS-------------------------------



void test_check_min_number_blinks(void)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af02      	add	r7, sp, #8
	uint32_t num_blink = 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 1000;
 8004f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f14:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f923 	bl	8005164 <ledctrl_blinkled>
 8004f1e:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 8004f20:	2314      	movs	r3, #20
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2326      	movs	r3, #38	; 0x26
 8004f26:	2200      	movs	r2, #0
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f2e:	f7ff fa73 	bl	8004418 <UnityAssertEqualNumber>
	num_blink = 1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f913 	bl	8005164 <ledctrl_blinkled>
 8004f3e:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8004f40:	2314      	movs	r3, #20
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2329      	movs	r3, #41	; 0x29
 8004f46:	2200      	movs	r2, #0
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f7ff fa64 	bl	8004418 <UnityAssertEqualNumber>
	num_blink = 2;
 8004f50:	2302      	movs	r3, #2
 8004f52:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f904 	bl	8005164 <ledctrl_blinkled>
 8004f5c:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8004f5e:	2314      	movs	r3, #20
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	232c      	movs	r3, #44	; 0x2c
 8004f64:	2200      	movs	r2, #0
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f7ff fa55 	bl	8004418 <UnityAssertEqualNumber>
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <test_check_max_number_blinks>:

void test_check_max_number_blinks(void)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af02      	add	r7, sp, #8
	uint32_t num_blink = 10;
 8004f7c:	230a      	movs	r3, #10
 8004f7e:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 1000;
 8004f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f84:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f8eb 	bl	8005164 <ledctrl_blinkled>
 8004f8e:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 8004f90:	2314      	movs	r3, #20
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2334      	movs	r3, #52	; 0x34
 8004f96:	2200      	movs	r2, #0
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f9e:	f7ff fa3b 	bl	8004418 <UnityAssertEqualNumber>
	num_blink = 9;
 8004fa2:	2309      	movs	r3, #9
 8004fa4:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8004fa6:	68b9      	ldr	r1, [r7, #8]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f8db 	bl	8005164 <ledctrl_blinkled>
 8004fae:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8004fb0:	2314      	movs	r3, #20
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	2337      	movs	r3, #55	; 0x37
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	f7ff fa2c 	bl	8004418 <UnityAssertEqualNumber>
	num_blink = 8;
 8004fc0:	2308      	movs	r3, #8
 8004fc2:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f8cc 	bl	8005164 <ledctrl_blinkled>
 8004fcc:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8004fce:	2314      	movs	r3, #20
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	233a      	movs	r3, #58	; 0x3a
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f7ff fa1d 	bl	8004418 <UnityAssertEqualNumber>
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <test_check_min_blink_duration>:

void test_check_min_blink_duration(void)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b086      	sub	sp, #24
 8004fea:	af02      	add	r7, sp, #8
	uint32_t num_blink = 2;
 8004fec:	2302      	movs	r3, #2
 8004fee:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 f8b4 	bl	8005164 <ledctrl_blinkled>
 8004ffc:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 8004ffe:	2314      	movs	r3, #20
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2342      	movs	r3, #66	; 0x42
 8005004:	2200      	movs	r2, #0
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800500c:	f7ff fa04 	bl	8004418 <UnityAssertEqualNumber>
	ms_blink_duration = 1;
 8005010:	2301      	movs	r3, #1
 8005012:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f8a4 	bl	8005164 <ledctrl_blinkled>
 800501c:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 800501e:	2314      	movs	r3, #20
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	2345      	movs	r3, #69	; 0x45
 8005024:	2200      	movs	r2, #0
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	2000      	movs	r0, #0
 800502a:	f7ff f9f5 	bl	8004418 <UnityAssertEqualNumber>
	ms_blink_duration = 2;
 800502e:	2302      	movs	r3, #2
 8005030:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f895 	bl	8005164 <ledctrl_blinkled>
 800503a:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 800503c:	2314      	movs	r3, #20
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	2348      	movs	r3, #72	; 0x48
 8005042:	2200      	movs	r2, #0
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	2000      	movs	r0, #0
 8005048:	f7ff f9e6 	bl	8004418 <UnityAssertEqualNumber>
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <test_check_max_blink_duration>:

void test_check_max_blink_duration(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
	uint32_t num_blink = 2;
 800505a:	2302      	movs	r3, #2
 800505c:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 5000;
 800505e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005062:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f87c 	bl	8005164 <ledctrl_blinkled>
 800506c:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 800506e:	2314      	movs	r3, #20
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2350      	movs	r3, #80	; 0x50
 8005074:	2200      	movs	r2, #0
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800507c:	f7ff f9cc 	bl	8004418 <UnityAssertEqualNumber>
	ms_blink_duration = 2999;
 8005080:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8005084:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f86b 	bl	8005164 <ledctrl_blinkled>
 800508e:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8005090:	2314      	movs	r3, #20
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	2353      	movs	r3, #83	; 0x53
 8005096:	2200      	movs	r2, #0
 8005098:	6879      	ldr	r1, [r7, #4]
 800509a:	2000      	movs	r0, #0
 800509c:	f7ff f9bc 	bl	8004418 <UnityAssertEqualNumber>
	ms_blink_duration = 2998;
 80050a0:	f640 33b6 	movw	r3, #2998	; 0xbb6
 80050a4:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f85b 	bl	8005164 <ledctrl_blinkled>
 80050ae:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 80050b0:	2314      	movs	r3, #20
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	2356      	movs	r3, #86	; 0x56
 80050b6:	2200      	movs	r2, #0
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7ff f9ac 	bl	8004418 <UnityAssertEqualNumber>
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <test_total_blink_length>:

void test_total_blink_length(void)
{
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af02      	add	r7, sp, #8
	uint32_t blink_duration = 500;
 80050ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80050d2:	60bb      	str	r3, [r7, #8]
	for(int i=1;i<5;i++){
 80050d4:	2301      	movs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	e03d      	b.n	8005156 <test_total_blink_length+0x8e>
		uint32_t t = HAL_GetTick();
 80050da:	f7fb fddb 	bl	8000c94 <HAL_GetTick>
 80050de:	6078      	str	r0, [r7, #4]
		int32_t ret = ledctrl_blinkled(i, blink_duration);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 f83d 	bl	8005164 <ledctrl_blinkled>
 80050ea:	6038      	str	r0, [r7, #0]
		TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 80050ec:	2314      	movs	r3, #20
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	235f      	movs	r3, #95	; 0x5f
 80050f2:	2200      	movs	r2, #0
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	2000      	movs	r0, #0
 80050f8:	f7ff f98e 	bl	8004418 <UnityAssertEqualNumber>
		TEST_ASSERT_GREATER_THAN_UINT32(i*blink_duration - 50, HAL_GetTick() - t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	fb02 f303 	mul.w	r3, r2, r3
 8005104:	3b32      	subs	r3, #50	; 0x32
 8005106:	461c      	mov	r4, r3
 8005108:	f7fb fdc4 	bl	8000c94 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4619      	mov	r1, r3
 8005114:	2324      	movs	r3, #36	; 0x24
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	2360      	movs	r3, #96	; 0x60
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	2202      	movs	r2, #2
 8005120:	4620      	mov	r0, r4
 8005122:	f7ff f9b9 	bl	8004498 <UnityAssertGreaterOrLessOrEqualNumber>
		TEST_ASSERT_LESS_THAN_UINT32(i*blink_duration + 50, HAL_GetTick() - t);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	3332      	adds	r3, #50	; 0x32
 8005130:	461c      	mov	r4, r3
 8005132:	f7fb fdaf 	bl	8000c94 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	4619      	mov	r1, r3
 800513e:	2324      	movs	r3, #36	; 0x24
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	2361      	movs	r3, #97	; 0x61
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	2204      	movs	r2, #4
 800514a:	4620      	mov	r0, r4
 800514c:	f7ff f9a4 	bl	8004498 <UnityAssertGreaterOrLessOrEqualNumber>
	for(int i=1;i<5;i++){
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3301      	adds	r3, #1
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b04      	cmp	r3, #4
 800515a:	ddbe      	ble.n	80050da <test_total_blink_length+0x12>
	}
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bd90      	pop	{r4, r7, pc}

08005164 <ledctrl_blinkled>:



//-------------------------EXPORTED FUNCTIONS-------------------------------
int32_t ledctrl_blinkled(uint32_t num_blink, uint32_t ms_blink_duration)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
	if(num_blink < MIN_NUM_BLINKS){
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <ledctrl_blinkled+0x16>
		return LEDCTRL_ERR;
 8005174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005178:	e04b      	b.n	8005212 <ledctrl_blinkled+0xae>
	}
	if(num_blink > MAX_NUM_BLINKS){
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b09      	cmp	r3, #9
 800517e:	d902      	bls.n	8005186 <ledctrl_blinkled+0x22>
		return LEDCTRL_ERR;
 8005180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005184:	e045      	b.n	8005212 <ledctrl_blinkled+0xae>
	}
	if(ms_blink_duration < MIN_BLINK_DURATION){
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <ledctrl_blinkled+0x2e>
		return LEDCTRL_ERR;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005190:	e03f      	b.n	8005212 <ledctrl_blinkled+0xae>
	}
	if(ms_blink_duration > MAX_BLINK_DURATION){
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005198:	4293      	cmp	r3, r2
 800519a:	d902      	bls.n	80051a2 <ledctrl_blinkled+0x3e>
		return LEDCTRL_ERR;
 800519c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a0:	e037      	b.n	8005212 <ledctrl_blinkled+0xae>
	}
	ms_blink_duration /=2;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	085b      	lsrs	r3, r3, #1
 80051a6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80051a8:	2200      	movs	r2, #0
 80051aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051ae:	481b      	ldr	r0, [pc, #108]	; (800521c <ledctrl_blinkled+0xb8>)
 80051b0:	f7fc f964 	bl	800147c <HAL_GPIO_WritePin>
	for(int i=0;i<(num_blink);i++){
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e026      	b.n	8005208 <ledctrl_blinkled+0xa4>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80051ba:	2201      	movs	r2, #1
 80051bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051c0:	4816      	ldr	r0, [pc, #88]	; (800521c <ledctrl_blinkled+0xb8>)
 80051c2:	f7fc f95b 	bl	800147c <HAL_GPIO_WritePin>
		uint32_t t = HAL_GetTick();
 80051c6:	f7fb fd65 	bl	8000c94 <HAL_GetTick>
 80051ca:	60b8      	str	r0, [r7, #8]
		while((t+ms_blink_duration) > HAL_GetTick());
 80051cc:	bf00      	nop
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	18d4      	adds	r4, r2, r3
 80051d4:	f7fb fd5e 	bl	8000c94 <HAL_GetTick>
 80051d8:	4603      	mov	r3, r0
 80051da:	429c      	cmp	r4, r3
 80051dc:	d8f7      	bhi.n	80051ce <ledctrl_blinkled+0x6a>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80051de:	2200      	movs	r2, #0
 80051e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80051e4:	480d      	ldr	r0, [pc, #52]	; (800521c <ledctrl_blinkled+0xb8>)
 80051e6:	f7fc f949 	bl	800147c <HAL_GPIO_WritePin>
		t = HAL_GetTick();
 80051ea:	f7fb fd53 	bl	8000c94 <HAL_GetTick>
 80051ee:	60b8      	str	r0, [r7, #8]
		while((t+ms_blink_duration) > HAL_GetTick());
 80051f0:	bf00      	nop
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	18d4      	adds	r4, r2, r3
 80051f8:	f7fb fd4c 	bl	8000c94 <HAL_GetTick>
 80051fc:	4603      	mov	r3, r0
 80051fe:	429c      	cmp	r4, r3
 8005200:	d8f7      	bhi.n	80051f2 <ledctrl_blinkled+0x8e>
	for(int i=0;i<(num_blink);i++){
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	429a      	cmp	r2, r3
 800520e:	d8d4      	bhi.n	80051ba <ledctrl_blinkled+0x56>
	}
	return LEDCTRL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	bd90      	pop	{r4, r7, pc}
 800521a:	bf00      	nop
 800521c:	48000400 	.word	0x48000400

08005220 <__errno>:
 8005220:	4b01      	ldr	r3, [pc, #4]	; (8005228 <__errno+0x8>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	2000000c 	.word	0x2000000c

0800522c <__libc_init_array>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	4e0d      	ldr	r6, [pc, #52]	; (8005264 <__libc_init_array+0x38>)
 8005230:	4c0d      	ldr	r4, [pc, #52]	; (8005268 <__libc_init_array+0x3c>)
 8005232:	1ba4      	subs	r4, r4, r6
 8005234:	10a4      	asrs	r4, r4, #2
 8005236:	2500      	movs	r5, #0
 8005238:	42a5      	cmp	r5, r4
 800523a:	d109      	bne.n	8005250 <__libc_init_array+0x24>
 800523c:	4e0b      	ldr	r6, [pc, #44]	; (800526c <__libc_init_array+0x40>)
 800523e:	4c0c      	ldr	r4, [pc, #48]	; (8005270 <__libc_init_array+0x44>)
 8005240:	f000 fc6e 	bl	8005b20 <_init>
 8005244:	1ba4      	subs	r4, r4, r6
 8005246:	10a4      	asrs	r4, r4, #2
 8005248:	2500      	movs	r5, #0
 800524a:	42a5      	cmp	r5, r4
 800524c:	d105      	bne.n	800525a <__libc_init_array+0x2e>
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005254:	4798      	blx	r3
 8005256:	3501      	adds	r5, #1
 8005258:	e7ee      	b.n	8005238 <__libc_init_array+0xc>
 800525a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800525e:	4798      	blx	r3
 8005260:	3501      	adds	r5, #1
 8005262:	e7f2      	b.n	800524a <__libc_init_array+0x1e>
 8005264:	08005d68 	.word	0x08005d68
 8005268:	08005d68 	.word	0x08005d68
 800526c:	08005d68 	.word	0x08005d68
 8005270:	08005d6c 	.word	0x08005d6c

08005274 <memset>:
 8005274:	4402      	add	r2, r0
 8005276:	4603      	mov	r3, r0
 8005278:	4293      	cmp	r3, r2
 800527a:	d100      	bne.n	800527e <memset+0xa>
 800527c:	4770      	bx	lr
 800527e:	f803 1b01 	strb.w	r1, [r3], #1
 8005282:	e7f9      	b.n	8005278 <memset+0x4>

08005284 <putchar>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <putchar+0x24>)
 8005288:	681c      	ldr	r4, [r3, #0]
 800528a:	4605      	mov	r5, r0
 800528c:	b124      	cbz	r4, 8005298 <putchar+0x14>
 800528e:	69a3      	ldr	r3, [r4, #24]
 8005290:	b913      	cbnz	r3, 8005298 <putchar+0x14>
 8005292:	4620      	mov	r0, r4
 8005294:	f000 f84a 	bl	800532c <__sinit>
 8005298:	68a2      	ldr	r2, [r4, #8]
 800529a:	4629      	mov	r1, r5
 800529c:	4620      	mov	r0, r4
 800529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052a2:	f000 b927 	b.w	80054f4 <_putc_r>
 80052a6:	bf00      	nop
 80052a8:	2000000c 	.word	0x2000000c

080052ac <std>:
 80052ac:	2300      	movs	r3, #0
 80052ae:	b510      	push	{r4, lr}
 80052b0:	4604      	mov	r4, r0
 80052b2:	e9c0 3300 	strd	r3, r3, [r0]
 80052b6:	6083      	str	r3, [r0, #8]
 80052b8:	8181      	strh	r1, [r0, #12]
 80052ba:	6643      	str	r3, [r0, #100]	; 0x64
 80052bc:	81c2      	strh	r2, [r0, #14]
 80052be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052c2:	6183      	str	r3, [r0, #24]
 80052c4:	4619      	mov	r1, r3
 80052c6:	2208      	movs	r2, #8
 80052c8:	305c      	adds	r0, #92	; 0x5c
 80052ca:	f7ff ffd3 	bl	8005274 <memset>
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <std+0x38>)
 80052d0:	6263      	str	r3, [r4, #36]	; 0x24
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <std+0x3c>)
 80052d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <std+0x40>)
 80052d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052da:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <std+0x44>)
 80052dc:	6224      	str	r4, [r4, #32]
 80052de:	6323      	str	r3, [r4, #48]	; 0x30
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	bf00      	nop
 80052e4:	08005581 	.word	0x08005581
 80052e8:	080055a3 	.word	0x080055a3
 80052ec:	080055db 	.word	0x080055db
 80052f0:	080055ff 	.word	0x080055ff

080052f4 <_cleanup_r>:
 80052f4:	4901      	ldr	r1, [pc, #4]	; (80052fc <_cleanup_r+0x8>)
 80052f6:	f000 b885 	b.w	8005404 <_fwalk_reent>
 80052fa:	bf00      	nop
 80052fc:	080058d9 	.word	0x080058d9

08005300 <__sfmoreglue>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	1e4a      	subs	r2, r1, #1
 8005304:	2568      	movs	r5, #104	; 0x68
 8005306:	4355      	muls	r5, r2
 8005308:	460e      	mov	r6, r1
 800530a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800530e:	f000 f897 	bl	8005440 <_malloc_r>
 8005312:	4604      	mov	r4, r0
 8005314:	b140      	cbz	r0, 8005328 <__sfmoreglue+0x28>
 8005316:	2100      	movs	r1, #0
 8005318:	e9c0 1600 	strd	r1, r6, [r0]
 800531c:	300c      	adds	r0, #12
 800531e:	60a0      	str	r0, [r4, #8]
 8005320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005324:	f7ff ffa6 	bl	8005274 <memset>
 8005328:	4620      	mov	r0, r4
 800532a:	bd70      	pop	{r4, r5, r6, pc}

0800532c <__sinit>:
 800532c:	6983      	ldr	r3, [r0, #24]
 800532e:	b510      	push	{r4, lr}
 8005330:	4604      	mov	r4, r0
 8005332:	bb33      	cbnz	r3, 8005382 <__sinit+0x56>
 8005334:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005338:	6503      	str	r3, [r0, #80]	; 0x50
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <__sinit+0x58>)
 800533c:	4a12      	ldr	r2, [pc, #72]	; (8005388 <__sinit+0x5c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6282      	str	r2, [r0, #40]	; 0x28
 8005342:	4298      	cmp	r0, r3
 8005344:	bf04      	itt	eq
 8005346:	2301      	moveq	r3, #1
 8005348:	6183      	streq	r3, [r0, #24]
 800534a:	f000 f81f 	bl	800538c <__sfp>
 800534e:	6060      	str	r0, [r4, #4]
 8005350:	4620      	mov	r0, r4
 8005352:	f000 f81b 	bl	800538c <__sfp>
 8005356:	60a0      	str	r0, [r4, #8]
 8005358:	4620      	mov	r0, r4
 800535a:	f000 f817 	bl	800538c <__sfp>
 800535e:	2200      	movs	r2, #0
 8005360:	60e0      	str	r0, [r4, #12]
 8005362:	2104      	movs	r1, #4
 8005364:	6860      	ldr	r0, [r4, #4]
 8005366:	f7ff ffa1 	bl	80052ac <std>
 800536a:	2201      	movs	r2, #1
 800536c:	2109      	movs	r1, #9
 800536e:	68a0      	ldr	r0, [r4, #8]
 8005370:	f7ff ff9c 	bl	80052ac <std>
 8005374:	2202      	movs	r2, #2
 8005376:	2112      	movs	r1, #18
 8005378:	68e0      	ldr	r0, [r4, #12]
 800537a:	f7ff ff97 	bl	80052ac <std>
 800537e:	2301      	movs	r3, #1
 8005380:	61a3      	str	r3, [r4, #24]
 8005382:	bd10      	pop	{r4, pc}
 8005384:	08005cfc 	.word	0x08005cfc
 8005388:	080052f5 	.word	0x080052f5

0800538c <__sfp>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <__sfp+0x70>)
 8005390:	681e      	ldr	r6, [r3, #0]
 8005392:	69b3      	ldr	r3, [r6, #24]
 8005394:	4607      	mov	r7, r0
 8005396:	b913      	cbnz	r3, 800539e <__sfp+0x12>
 8005398:	4630      	mov	r0, r6
 800539a:	f7ff ffc7 	bl	800532c <__sinit>
 800539e:	3648      	adds	r6, #72	; 0x48
 80053a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	d503      	bpl.n	80053b0 <__sfp+0x24>
 80053a8:	6833      	ldr	r3, [r6, #0]
 80053aa:	b133      	cbz	r3, 80053ba <__sfp+0x2e>
 80053ac:	6836      	ldr	r6, [r6, #0]
 80053ae:	e7f7      	b.n	80053a0 <__sfp+0x14>
 80053b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053b4:	b16d      	cbz	r5, 80053d2 <__sfp+0x46>
 80053b6:	3468      	adds	r4, #104	; 0x68
 80053b8:	e7f4      	b.n	80053a4 <__sfp+0x18>
 80053ba:	2104      	movs	r1, #4
 80053bc:	4638      	mov	r0, r7
 80053be:	f7ff ff9f 	bl	8005300 <__sfmoreglue>
 80053c2:	6030      	str	r0, [r6, #0]
 80053c4:	2800      	cmp	r0, #0
 80053c6:	d1f1      	bne.n	80053ac <__sfp+0x20>
 80053c8:	230c      	movs	r3, #12
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4604      	mov	r4, r0
 80053ce:	4620      	mov	r0, r4
 80053d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <__sfp+0x74>)
 80053d4:	6665      	str	r5, [r4, #100]	; 0x64
 80053d6:	e9c4 5500 	strd	r5, r5, [r4]
 80053da:	60a5      	str	r5, [r4, #8]
 80053dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80053e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80053e4:	2208      	movs	r2, #8
 80053e6:	4629      	mov	r1, r5
 80053e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053ec:	f7ff ff42 	bl	8005274 <memset>
 80053f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053f8:	e7e9      	b.n	80053ce <__sfp+0x42>
 80053fa:	bf00      	nop
 80053fc:	08005cfc 	.word	0x08005cfc
 8005400:	ffff0001 	.word	0xffff0001

08005404 <_fwalk_reent>:
 8005404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005408:	4680      	mov	r8, r0
 800540a:	4689      	mov	r9, r1
 800540c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005410:	2600      	movs	r6, #0
 8005412:	b914      	cbnz	r4, 800541a <_fwalk_reent+0x16>
 8005414:	4630      	mov	r0, r6
 8005416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800541e:	3f01      	subs	r7, #1
 8005420:	d501      	bpl.n	8005426 <_fwalk_reent+0x22>
 8005422:	6824      	ldr	r4, [r4, #0]
 8005424:	e7f5      	b.n	8005412 <_fwalk_reent+0xe>
 8005426:	89ab      	ldrh	r3, [r5, #12]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d907      	bls.n	800543c <_fwalk_reent+0x38>
 800542c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005430:	3301      	adds	r3, #1
 8005432:	d003      	beq.n	800543c <_fwalk_reent+0x38>
 8005434:	4629      	mov	r1, r5
 8005436:	4640      	mov	r0, r8
 8005438:	47c8      	blx	r9
 800543a:	4306      	orrs	r6, r0
 800543c:	3568      	adds	r5, #104	; 0x68
 800543e:	e7ee      	b.n	800541e <_fwalk_reent+0x1a>

08005440 <_malloc_r>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	1ccd      	adds	r5, r1, #3
 8005444:	f025 0503 	bic.w	r5, r5, #3
 8005448:	3508      	adds	r5, #8
 800544a:	2d0c      	cmp	r5, #12
 800544c:	bf38      	it	cc
 800544e:	250c      	movcc	r5, #12
 8005450:	2d00      	cmp	r5, #0
 8005452:	4606      	mov	r6, r0
 8005454:	db01      	blt.n	800545a <_malloc_r+0x1a>
 8005456:	42a9      	cmp	r1, r5
 8005458:	d903      	bls.n	8005462 <_malloc_r+0x22>
 800545a:	230c      	movs	r3, #12
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	2000      	movs	r0, #0
 8005460:	bd70      	pop	{r4, r5, r6, pc}
 8005462:	f000 fad9 	bl	8005a18 <__malloc_lock>
 8005466:	4a21      	ldr	r2, [pc, #132]	; (80054ec <_malloc_r+0xac>)
 8005468:	6814      	ldr	r4, [r2, #0]
 800546a:	4621      	mov	r1, r4
 800546c:	b991      	cbnz	r1, 8005494 <_malloc_r+0x54>
 800546e:	4c20      	ldr	r4, [pc, #128]	; (80054f0 <_malloc_r+0xb0>)
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	b91b      	cbnz	r3, 800547c <_malloc_r+0x3c>
 8005474:	4630      	mov	r0, r6
 8005476:	f000 f873 	bl	8005560 <_sbrk_r>
 800547a:	6020      	str	r0, [r4, #0]
 800547c:	4629      	mov	r1, r5
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f86e 	bl	8005560 <_sbrk_r>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d124      	bne.n	80054d2 <_malloc_r+0x92>
 8005488:	230c      	movs	r3, #12
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	4630      	mov	r0, r6
 800548e:	f000 fac4 	bl	8005a1a <__malloc_unlock>
 8005492:	e7e4      	b.n	800545e <_malloc_r+0x1e>
 8005494:	680b      	ldr	r3, [r1, #0]
 8005496:	1b5b      	subs	r3, r3, r5
 8005498:	d418      	bmi.n	80054cc <_malloc_r+0x8c>
 800549a:	2b0b      	cmp	r3, #11
 800549c:	d90f      	bls.n	80054be <_malloc_r+0x7e>
 800549e:	600b      	str	r3, [r1, #0]
 80054a0:	50cd      	str	r5, [r1, r3]
 80054a2:	18cc      	adds	r4, r1, r3
 80054a4:	4630      	mov	r0, r6
 80054a6:	f000 fab8 	bl	8005a1a <__malloc_unlock>
 80054aa:	f104 000b 	add.w	r0, r4, #11
 80054ae:	1d23      	adds	r3, r4, #4
 80054b0:	f020 0007 	bic.w	r0, r0, #7
 80054b4:	1ac3      	subs	r3, r0, r3
 80054b6:	d0d3      	beq.n	8005460 <_malloc_r+0x20>
 80054b8:	425a      	negs	r2, r3
 80054ba:	50e2      	str	r2, [r4, r3]
 80054bc:	e7d0      	b.n	8005460 <_malloc_r+0x20>
 80054be:	428c      	cmp	r4, r1
 80054c0:	684b      	ldr	r3, [r1, #4]
 80054c2:	bf16      	itet	ne
 80054c4:	6063      	strne	r3, [r4, #4]
 80054c6:	6013      	streq	r3, [r2, #0]
 80054c8:	460c      	movne	r4, r1
 80054ca:	e7eb      	b.n	80054a4 <_malloc_r+0x64>
 80054cc:	460c      	mov	r4, r1
 80054ce:	6849      	ldr	r1, [r1, #4]
 80054d0:	e7cc      	b.n	800546c <_malloc_r+0x2c>
 80054d2:	1cc4      	adds	r4, r0, #3
 80054d4:	f024 0403 	bic.w	r4, r4, #3
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d005      	beq.n	80054e8 <_malloc_r+0xa8>
 80054dc:	1a21      	subs	r1, r4, r0
 80054de:	4630      	mov	r0, r6
 80054e0:	f000 f83e 	bl	8005560 <_sbrk_r>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d0cf      	beq.n	8005488 <_malloc_r+0x48>
 80054e8:	6025      	str	r5, [r4, #0]
 80054ea:	e7db      	b.n	80054a4 <_malloc_r+0x64>
 80054ec:	200000b8 	.word	0x200000b8
 80054f0:	200000bc 	.word	0x200000bc

080054f4 <_putc_r>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	460d      	mov	r5, r1
 80054f8:	4614      	mov	r4, r2
 80054fa:	4606      	mov	r6, r0
 80054fc:	b118      	cbz	r0, 8005506 <_putc_r+0x12>
 80054fe:	6983      	ldr	r3, [r0, #24]
 8005500:	b90b      	cbnz	r3, 8005506 <_putc_r+0x12>
 8005502:	f7ff ff13 	bl	800532c <__sinit>
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <_putc_r+0x60>)
 8005508:	429c      	cmp	r4, r3
 800550a:	d112      	bne.n	8005532 <_putc_r+0x3e>
 800550c:	6874      	ldr	r4, [r6, #4]
 800550e:	68a3      	ldr	r3, [r4, #8]
 8005510:	3b01      	subs	r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	60a3      	str	r3, [r4, #8]
 8005516:	da16      	bge.n	8005546 <_putc_r+0x52>
 8005518:	69a2      	ldr	r2, [r4, #24]
 800551a:	4293      	cmp	r3, r2
 800551c:	db02      	blt.n	8005524 <_putc_r+0x30>
 800551e:	b2eb      	uxtb	r3, r5
 8005520:	2b0a      	cmp	r3, #10
 8005522:	d110      	bne.n	8005546 <_putc_r+0x52>
 8005524:	4622      	mov	r2, r4
 8005526:	4629      	mov	r1, r5
 8005528:	4630      	mov	r0, r6
 800552a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800552e:	f000 b86b 	b.w	8005608 <__swbuf_r>
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <_putc_r+0x64>)
 8005534:	429c      	cmp	r4, r3
 8005536:	d101      	bne.n	800553c <_putc_r+0x48>
 8005538:	68b4      	ldr	r4, [r6, #8]
 800553a:	e7e8      	b.n	800550e <_putc_r+0x1a>
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <_putc_r+0x68>)
 800553e:	429c      	cmp	r4, r3
 8005540:	bf08      	it	eq
 8005542:	68f4      	ldreq	r4, [r6, #12]
 8005544:	e7e3      	b.n	800550e <_putc_r+0x1a>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	6022      	str	r2, [r4, #0]
 800554c:	701d      	strb	r5, [r3, #0]
 800554e:	b2e8      	uxtb	r0, r5
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	bf00      	nop
 8005554:	08005d20 	.word	0x08005d20
 8005558:	08005d40 	.word	0x08005d40
 800555c:	08005d00 	.word	0x08005d00

08005560 <_sbrk_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4c06      	ldr	r4, [pc, #24]	; (800557c <_sbrk_r+0x1c>)
 8005564:	2300      	movs	r3, #0
 8005566:	4605      	mov	r5, r0
 8005568:	4608      	mov	r0, r1
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	f7fb fa94 	bl	8000a98 <_sbrk>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_sbrk_r+0x1a>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	b103      	cbz	r3, 800557a <_sbrk_r+0x1a>
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	2000077c 	.word	0x2000077c

08005580 <__sread>:
 8005580:	b510      	push	{r4, lr}
 8005582:	460c      	mov	r4, r1
 8005584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005588:	f000 fa96 	bl	8005ab8 <_read_r>
 800558c:	2800      	cmp	r0, #0
 800558e:	bfab      	itete	ge
 8005590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005592:	89a3      	ldrhlt	r3, [r4, #12]
 8005594:	181b      	addge	r3, r3, r0
 8005596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800559a:	bfac      	ite	ge
 800559c:	6563      	strge	r3, [r4, #84]	; 0x54
 800559e:	81a3      	strhlt	r3, [r4, #12]
 80055a0:	bd10      	pop	{r4, pc}

080055a2 <__swrite>:
 80055a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a6:	461f      	mov	r7, r3
 80055a8:	898b      	ldrh	r3, [r1, #12]
 80055aa:	05db      	lsls	r3, r3, #23
 80055ac:	4605      	mov	r5, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	4616      	mov	r6, r2
 80055b2:	d505      	bpl.n	80055c0 <__swrite+0x1e>
 80055b4:	2302      	movs	r3, #2
 80055b6:	2200      	movs	r2, #0
 80055b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055bc:	f000 f9b6 	bl	800592c <_lseek_r>
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ca:	81a3      	strh	r3, [r4, #12]
 80055cc:	4632      	mov	r2, r6
 80055ce:	463b      	mov	r3, r7
 80055d0:	4628      	mov	r0, r5
 80055d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055d6:	f000 b869 	b.w	80056ac <_write_r>

080055da <__sseek>:
 80055da:	b510      	push	{r4, lr}
 80055dc:	460c      	mov	r4, r1
 80055de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e2:	f000 f9a3 	bl	800592c <_lseek_r>
 80055e6:	1c43      	adds	r3, r0, #1
 80055e8:	89a3      	ldrh	r3, [r4, #12]
 80055ea:	bf15      	itete	ne
 80055ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80055ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055f6:	81a3      	strheq	r3, [r4, #12]
 80055f8:	bf18      	it	ne
 80055fa:	81a3      	strhne	r3, [r4, #12]
 80055fc:	bd10      	pop	{r4, pc}

080055fe <__sclose>:
 80055fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005602:	f000 b8d3 	b.w	80057ac <_close_r>
	...

08005608 <__swbuf_r>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	460e      	mov	r6, r1
 800560c:	4614      	mov	r4, r2
 800560e:	4605      	mov	r5, r0
 8005610:	b118      	cbz	r0, 800561a <__swbuf_r+0x12>
 8005612:	6983      	ldr	r3, [r0, #24]
 8005614:	b90b      	cbnz	r3, 800561a <__swbuf_r+0x12>
 8005616:	f7ff fe89 	bl	800532c <__sinit>
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <__swbuf_r+0x98>)
 800561c:	429c      	cmp	r4, r3
 800561e:	d12a      	bne.n	8005676 <__swbuf_r+0x6e>
 8005620:	686c      	ldr	r4, [r5, #4]
 8005622:	69a3      	ldr	r3, [r4, #24]
 8005624:	60a3      	str	r3, [r4, #8]
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	071a      	lsls	r2, r3, #28
 800562a:	d52e      	bpl.n	800568a <__swbuf_r+0x82>
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	b363      	cbz	r3, 800568a <__swbuf_r+0x82>
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	6820      	ldr	r0, [r4, #0]
 8005634:	1ac0      	subs	r0, r0, r3
 8005636:	6963      	ldr	r3, [r4, #20]
 8005638:	b2f6      	uxtb	r6, r6
 800563a:	4283      	cmp	r3, r0
 800563c:	4637      	mov	r7, r6
 800563e:	dc04      	bgt.n	800564a <__swbuf_r+0x42>
 8005640:	4621      	mov	r1, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 f948 	bl	80058d8 <_fflush_r>
 8005648:	bb28      	cbnz	r0, 8005696 <__swbuf_r+0x8e>
 800564a:	68a3      	ldr	r3, [r4, #8]
 800564c:	3b01      	subs	r3, #1
 800564e:	60a3      	str	r3, [r4, #8]
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	701e      	strb	r6, [r3, #0]
 8005658:	6963      	ldr	r3, [r4, #20]
 800565a:	3001      	adds	r0, #1
 800565c:	4283      	cmp	r3, r0
 800565e:	d004      	beq.n	800566a <__swbuf_r+0x62>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	07db      	lsls	r3, r3, #31
 8005664:	d519      	bpl.n	800569a <__swbuf_r+0x92>
 8005666:	2e0a      	cmp	r6, #10
 8005668:	d117      	bne.n	800569a <__swbuf_r+0x92>
 800566a:	4621      	mov	r1, r4
 800566c:	4628      	mov	r0, r5
 800566e:	f000 f933 	bl	80058d8 <_fflush_r>
 8005672:	b190      	cbz	r0, 800569a <__swbuf_r+0x92>
 8005674:	e00f      	b.n	8005696 <__swbuf_r+0x8e>
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <__swbuf_r+0x9c>)
 8005678:	429c      	cmp	r4, r3
 800567a:	d101      	bne.n	8005680 <__swbuf_r+0x78>
 800567c:	68ac      	ldr	r4, [r5, #8]
 800567e:	e7d0      	b.n	8005622 <__swbuf_r+0x1a>
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <__swbuf_r+0xa0>)
 8005682:	429c      	cmp	r4, r3
 8005684:	bf08      	it	eq
 8005686:	68ec      	ldreq	r4, [r5, #12]
 8005688:	e7cb      	b.n	8005622 <__swbuf_r+0x1a>
 800568a:	4621      	mov	r1, r4
 800568c:	4628      	mov	r0, r5
 800568e:	f000 f81f 	bl	80056d0 <__swsetup_r>
 8005692:	2800      	cmp	r0, #0
 8005694:	d0cc      	beq.n	8005630 <__swbuf_r+0x28>
 8005696:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800569a:	4638      	mov	r0, r7
 800569c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800569e:	bf00      	nop
 80056a0:	08005d20 	.word	0x08005d20
 80056a4:	08005d40 	.word	0x08005d40
 80056a8:	08005d00 	.word	0x08005d00

080056ac <_write_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4c07      	ldr	r4, [pc, #28]	; (80056cc <_write_r+0x20>)
 80056b0:	4605      	mov	r5, r0
 80056b2:	4608      	mov	r0, r1
 80056b4:	4611      	mov	r1, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	6022      	str	r2, [r4, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	f7fb f99c 	bl	80009f8 <_write>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_write_r+0x1e>
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_write_r+0x1e>
 80056c8:	602b      	str	r3, [r5, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	2000077c 	.word	0x2000077c

080056d0 <__swsetup_r>:
 80056d0:	4b32      	ldr	r3, [pc, #200]	; (800579c <__swsetup_r+0xcc>)
 80056d2:	b570      	push	{r4, r5, r6, lr}
 80056d4:	681d      	ldr	r5, [r3, #0]
 80056d6:	4606      	mov	r6, r0
 80056d8:	460c      	mov	r4, r1
 80056da:	b125      	cbz	r5, 80056e6 <__swsetup_r+0x16>
 80056dc:	69ab      	ldr	r3, [r5, #24]
 80056de:	b913      	cbnz	r3, 80056e6 <__swsetup_r+0x16>
 80056e0:	4628      	mov	r0, r5
 80056e2:	f7ff fe23 	bl	800532c <__sinit>
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <__swsetup_r+0xd0>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d10f      	bne.n	800570c <__swsetup_r+0x3c>
 80056ec:	686c      	ldr	r4, [r5, #4]
 80056ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	0715      	lsls	r5, r2, #28
 80056f6:	d42c      	bmi.n	8005752 <__swsetup_r+0x82>
 80056f8:	06d0      	lsls	r0, r2, #27
 80056fa:	d411      	bmi.n	8005720 <__swsetup_r+0x50>
 80056fc:	2209      	movs	r2, #9
 80056fe:	6032      	str	r2, [r6, #0]
 8005700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800570a:	e03e      	b.n	800578a <__swsetup_r+0xba>
 800570c:	4b25      	ldr	r3, [pc, #148]	; (80057a4 <__swsetup_r+0xd4>)
 800570e:	429c      	cmp	r4, r3
 8005710:	d101      	bne.n	8005716 <__swsetup_r+0x46>
 8005712:	68ac      	ldr	r4, [r5, #8]
 8005714:	e7eb      	b.n	80056ee <__swsetup_r+0x1e>
 8005716:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <__swsetup_r+0xd8>)
 8005718:	429c      	cmp	r4, r3
 800571a:	bf08      	it	eq
 800571c:	68ec      	ldreq	r4, [r5, #12]
 800571e:	e7e6      	b.n	80056ee <__swsetup_r+0x1e>
 8005720:	0751      	lsls	r1, r2, #29
 8005722:	d512      	bpl.n	800574a <__swsetup_r+0x7a>
 8005724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005726:	b141      	cbz	r1, 800573a <__swsetup_r+0x6a>
 8005728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800572c:	4299      	cmp	r1, r3
 800572e:	d002      	beq.n	8005736 <__swsetup_r+0x66>
 8005730:	4630      	mov	r0, r6
 8005732:	f000 f973 	bl	8005a1c <_free_r>
 8005736:	2300      	movs	r3, #0
 8005738:	6363      	str	r3, [r4, #52]	; 0x34
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005740:	81a3      	strh	r3, [r4, #12]
 8005742:	2300      	movs	r3, #0
 8005744:	6063      	str	r3, [r4, #4]
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	f043 0308 	orr.w	r3, r3, #8
 8005750:	81a3      	strh	r3, [r4, #12]
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	b94b      	cbnz	r3, 800576a <__swsetup_r+0x9a>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800575c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005760:	d003      	beq.n	800576a <__swsetup_r+0x9a>
 8005762:	4621      	mov	r1, r4
 8005764:	4630      	mov	r0, r6
 8005766:	f000 f917 	bl	8005998 <__smakebuf_r>
 800576a:	89a2      	ldrh	r2, [r4, #12]
 800576c:	f012 0301 	ands.w	r3, r2, #1
 8005770:	d00c      	beq.n	800578c <__swsetup_r+0xbc>
 8005772:	2300      	movs	r3, #0
 8005774:	60a3      	str	r3, [r4, #8]
 8005776:	6963      	ldr	r3, [r4, #20]
 8005778:	425b      	negs	r3, r3
 800577a:	61a3      	str	r3, [r4, #24]
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	b953      	cbnz	r3, 8005796 <__swsetup_r+0xc6>
 8005780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005784:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005788:	d1ba      	bne.n	8005700 <__swsetup_r+0x30>
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	0792      	lsls	r2, r2, #30
 800578e:	bf58      	it	pl
 8005790:	6963      	ldrpl	r3, [r4, #20]
 8005792:	60a3      	str	r3, [r4, #8]
 8005794:	e7f2      	b.n	800577c <__swsetup_r+0xac>
 8005796:	2000      	movs	r0, #0
 8005798:	e7f7      	b.n	800578a <__swsetup_r+0xba>
 800579a:	bf00      	nop
 800579c:	2000000c 	.word	0x2000000c
 80057a0:	08005d20 	.word	0x08005d20
 80057a4:	08005d40 	.word	0x08005d40
 80057a8:	08005d00 	.word	0x08005d00

080057ac <_close_r>:
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4c06      	ldr	r4, [pc, #24]	; (80057c8 <_close_r+0x1c>)
 80057b0:	2300      	movs	r3, #0
 80057b2:	4605      	mov	r5, r0
 80057b4:	4608      	mov	r0, r1
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	f7fb f93a 	bl	8000a30 <_close>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_close_r+0x1a>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_close_r+0x1a>
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	2000077c 	.word	0x2000077c

080057cc <__sflush_r>:
 80057cc:	898a      	ldrh	r2, [r1, #12]
 80057ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	4605      	mov	r5, r0
 80057d4:	0710      	lsls	r0, r2, #28
 80057d6:	460c      	mov	r4, r1
 80057d8:	d458      	bmi.n	800588c <__sflush_r+0xc0>
 80057da:	684b      	ldr	r3, [r1, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	dc05      	bgt.n	80057ec <__sflush_r+0x20>
 80057e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	dc02      	bgt.n	80057ec <__sflush_r+0x20>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	d0f9      	beq.n	80057e6 <__sflush_r+0x1a>
 80057f2:	2300      	movs	r3, #0
 80057f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057f8:	682f      	ldr	r7, [r5, #0]
 80057fa:	6a21      	ldr	r1, [r4, #32]
 80057fc:	602b      	str	r3, [r5, #0]
 80057fe:	d032      	beq.n	8005866 <__sflush_r+0x9a>
 8005800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	075a      	lsls	r2, r3, #29
 8005806:	d505      	bpl.n	8005814 <__sflush_r+0x48>
 8005808:	6863      	ldr	r3, [r4, #4]
 800580a:	1ac0      	subs	r0, r0, r3
 800580c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800580e:	b10b      	cbz	r3, 8005814 <__sflush_r+0x48>
 8005810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005812:	1ac0      	subs	r0, r0, r3
 8005814:	2300      	movs	r3, #0
 8005816:	4602      	mov	r2, r0
 8005818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581a:	6a21      	ldr	r1, [r4, #32]
 800581c:	4628      	mov	r0, r5
 800581e:	47b0      	blx	r6
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	d106      	bne.n	8005834 <__sflush_r+0x68>
 8005826:	6829      	ldr	r1, [r5, #0]
 8005828:	291d      	cmp	r1, #29
 800582a:	d848      	bhi.n	80058be <__sflush_r+0xf2>
 800582c:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <__sflush_r+0x108>)
 800582e:	40ca      	lsrs	r2, r1
 8005830:	07d6      	lsls	r6, r2, #31
 8005832:	d544      	bpl.n	80058be <__sflush_r+0xf2>
 8005834:	2200      	movs	r2, #0
 8005836:	6062      	str	r2, [r4, #4]
 8005838:	04d9      	lsls	r1, r3, #19
 800583a:	6922      	ldr	r2, [r4, #16]
 800583c:	6022      	str	r2, [r4, #0]
 800583e:	d504      	bpl.n	800584a <__sflush_r+0x7e>
 8005840:	1c42      	adds	r2, r0, #1
 8005842:	d101      	bne.n	8005848 <__sflush_r+0x7c>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b903      	cbnz	r3, 800584a <__sflush_r+0x7e>
 8005848:	6560      	str	r0, [r4, #84]	; 0x54
 800584a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584c:	602f      	str	r7, [r5, #0]
 800584e:	2900      	cmp	r1, #0
 8005850:	d0c9      	beq.n	80057e6 <__sflush_r+0x1a>
 8005852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005856:	4299      	cmp	r1, r3
 8005858:	d002      	beq.n	8005860 <__sflush_r+0x94>
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f8de 	bl	8005a1c <_free_r>
 8005860:	2000      	movs	r0, #0
 8005862:	6360      	str	r0, [r4, #52]	; 0x34
 8005864:	e7c0      	b.n	80057e8 <__sflush_r+0x1c>
 8005866:	2301      	movs	r3, #1
 8005868:	4628      	mov	r0, r5
 800586a:	47b0      	blx	r6
 800586c:	1c41      	adds	r1, r0, #1
 800586e:	d1c8      	bne.n	8005802 <__sflush_r+0x36>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0c5      	beq.n	8005802 <__sflush_r+0x36>
 8005876:	2b1d      	cmp	r3, #29
 8005878:	d001      	beq.n	800587e <__sflush_r+0xb2>
 800587a:	2b16      	cmp	r3, #22
 800587c:	d101      	bne.n	8005882 <__sflush_r+0xb6>
 800587e:	602f      	str	r7, [r5, #0]
 8005880:	e7b1      	b.n	80057e6 <__sflush_r+0x1a>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	e7ad      	b.n	80057e8 <__sflush_r+0x1c>
 800588c:	690f      	ldr	r7, [r1, #16]
 800588e:	2f00      	cmp	r7, #0
 8005890:	d0a9      	beq.n	80057e6 <__sflush_r+0x1a>
 8005892:	0793      	lsls	r3, r2, #30
 8005894:	680e      	ldr	r6, [r1, #0]
 8005896:	bf08      	it	eq
 8005898:	694b      	ldreq	r3, [r1, #20]
 800589a:	600f      	str	r7, [r1, #0]
 800589c:	bf18      	it	ne
 800589e:	2300      	movne	r3, #0
 80058a0:	eba6 0807 	sub.w	r8, r6, r7
 80058a4:	608b      	str	r3, [r1, #8]
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	dd9c      	ble.n	80057e6 <__sflush_r+0x1a>
 80058ac:	4643      	mov	r3, r8
 80058ae:	463a      	mov	r2, r7
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	2800      	cmp	r0, #0
 80058ba:	dc06      	bgt.n	80058ca <__sflush_r+0xfe>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058c8:	e78e      	b.n	80057e8 <__sflush_r+0x1c>
 80058ca:	4407      	add	r7, r0
 80058cc:	eba8 0800 	sub.w	r8, r8, r0
 80058d0:	e7e9      	b.n	80058a6 <__sflush_r+0xda>
 80058d2:	bf00      	nop
 80058d4:	20400001 	.word	0x20400001

080058d8 <_fflush_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	690b      	ldr	r3, [r1, #16]
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	b1db      	cbz	r3, 800591a <_fflush_r+0x42>
 80058e2:	b118      	cbz	r0, 80058ec <_fflush_r+0x14>
 80058e4:	6983      	ldr	r3, [r0, #24]
 80058e6:	b90b      	cbnz	r3, 80058ec <_fflush_r+0x14>
 80058e8:	f7ff fd20 	bl	800532c <__sinit>
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <_fflush_r+0x48>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d109      	bne.n	8005906 <_fflush_r+0x2e>
 80058f2:	686c      	ldr	r4, [r5, #4]
 80058f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f8:	b17b      	cbz	r3, 800591a <_fflush_r+0x42>
 80058fa:	4621      	mov	r1, r4
 80058fc:	4628      	mov	r0, r5
 80058fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005902:	f7ff bf63 	b.w	80057cc <__sflush_r>
 8005906:	4b07      	ldr	r3, [pc, #28]	; (8005924 <_fflush_r+0x4c>)
 8005908:	429c      	cmp	r4, r3
 800590a:	d101      	bne.n	8005910 <_fflush_r+0x38>
 800590c:	68ac      	ldr	r4, [r5, #8]
 800590e:	e7f1      	b.n	80058f4 <_fflush_r+0x1c>
 8005910:	4b05      	ldr	r3, [pc, #20]	; (8005928 <_fflush_r+0x50>)
 8005912:	429c      	cmp	r4, r3
 8005914:	bf08      	it	eq
 8005916:	68ec      	ldreq	r4, [r5, #12]
 8005918:	e7ec      	b.n	80058f4 <_fflush_r+0x1c>
 800591a:	2000      	movs	r0, #0
 800591c:	bd38      	pop	{r3, r4, r5, pc}
 800591e:	bf00      	nop
 8005920:	08005d20 	.word	0x08005d20
 8005924:	08005d40 	.word	0x08005d40
 8005928:	08005d00 	.word	0x08005d00

0800592c <_lseek_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4c07      	ldr	r4, [pc, #28]	; (800594c <_lseek_r+0x20>)
 8005930:	4605      	mov	r5, r0
 8005932:	4608      	mov	r0, r1
 8005934:	4611      	mov	r1, r2
 8005936:	2200      	movs	r2, #0
 8005938:	6022      	str	r2, [r4, #0]
 800593a:	461a      	mov	r2, r3
 800593c:	f7fb f89f 	bl	8000a7e <_lseek>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_lseek_r+0x1e>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	b103      	cbz	r3, 800594a <_lseek_r+0x1e>
 8005948:	602b      	str	r3, [r5, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	2000077c 	.word	0x2000077c

08005950 <__swhatbuf_r>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	460e      	mov	r6, r1
 8005954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005958:	2900      	cmp	r1, #0
 800595a:	b096      	sub	sp, #88	; 0x58
 800595c:	4614      	mov	r4, r2
 800595e:	461d      	mov	r5, r3
 8005960:	da07      	bge.n	8005972 <__swhatbuf_r+0x22>
 8005962:	2300      	movs	r3, #0
 8005964:	602b      	str	r3, [r5, #0]
 8005966:	89b3      	ldrh	r3, [r6, #12]
 8005968:	061a      	lsls	r2, r3, #24
 800596a:	d410      	bmi.n	800598e <__swhatbuf_r+0x3e>
 800596c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005970:	e00e      	b.n	8005990 <__swhatbuf_r+0x40>
 8005972:	466a      	mov	r2, sp
 8005974:	f000 f8b2 	bl	8005adc <_fstat_r>
 8005978:	2800      	cmp	r0, #0
 800597a:	dbf2      	blt.n	8005962 <__swhatbuf_r+0x12>
 800597c:	9a01      	ldr	r2, [sp, #4]
 800597e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005982:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005986:	425a      	negs	r2, r3
 8005988:	415a      	adcs	r2, r3
 800598a:	602a      	str	r2, [r5, #0]
 800598c:	e7ee      	b.n	800596c <__swhatbuf_r+0x1c>
 800598e:	2340      	movs	r3, #64	; 0x40
 8005990:	2000      	movs	r0, #0
 8005992:	6023      	str	r3, [r4, #0]
 8005994:	b016      	add	sp, #88	; 0x58
 8005996:	bd70      	pop	{r4, r5, r6, pc}

08005998 <__smakebuf_r>:
 8005998:	898b      	ldrh	r3, [r1, #12]
 800599a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800599c:	079d      	lsls	r5, r3, #30
 800599e:	4606      	mov	r6, r0
 80059a0:	460c      	mov	r4, r1
 80059a2:	d507      	bpl.n	80059b4 <__smakebuf_r+0x1c>
 80059a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	6123      	str	r3, [r4, #16]
 80059ac:	2301      	movs	r3, #1
 80059ae:	6163      	str	r3, [r4, #20]
 80059b0:	b002      	add	sp, #8
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	ab01      	add	r3, sp, #4
 80059b6:	466a      	mov	r2, sp
 80059b8:	f7ff ffca 	bl	8005950 <__swhatbuf_r>
 80059bc:	9900      	ldr	r1, [sp, #0]
 80059be:	4605      	mov	r5, r0
 80059c0:	4630      	mov	r0, r6
 80059c2:	f7ff fd3d 	bl	8005440 <_malloc_r>
 80059c6:	b948      	cbnz	r0, 80059dc <__smakebuf_r+0x44>
 80059c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059cc:	059a      	lsls	r2, r3, #22
 80059ce:	d4ef      	bmi.n	80059b0 <__smakebuf_r+0x18>
 80059d0:	f023 0303 	bic.w	r3, r3, #3
 80059d4:	f043 0302 	orr.w	r3, r3, #2
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	e7e3      	b.n	80059a4 <__smakebuf_r+0xc>
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <__smakebuf_r+0x7c>)
 80059de:	62b3      	str	r3, [r6, #40]	; 0x28
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	6020      	str	r0, [r4, #0]
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	9b00      	ldr	r3, [sp, #0]
 80059ec:	6163      	str	r3, [r4, #20]
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	6120      	str	r0, [r4, #16]
 80059f2:	b15b      	cbz	r3, 8005a0c <__smakebuf_r+0x74>
 80059f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 f881 	bl	8005b00 <_isatty_r>
 80059fe:	b128      	cbz	r0, 8005a0c <__smakebuf_r+0x74>
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	81a3      	strh	r3, [r4, #12]
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	431d      	orrs	r5, r3
 8005a10:	81a5      	strh	r5, [r4, #12]
 8005a12:	e7cd      	b.n	80059b0 <__smakebuf_r+0x18>
 8005a14:	080052f5 	.word	0x080052f5

08005a18 <__malloc_lock>:
 8005a18:	4770      	bx	lr

08005a1a <__malloc_unlock>:
 8005a1a:	4770      	bx	lr

08005a1c <_free_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	2900      	cmp	r1, #0
 8005a22:	d045      	beq.n	8005ab0 <_free_r+0x94>
 8005a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a28:	1f0c      	subs	r4, r1, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfb8      	it	lt
 8005a2e:	18e4      	addlt	r4, r4, r3
 8005a30:	f7ff fff2 	bl	8005a18 <__malloc_lock>
 8005a34:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <_free_r+0x98>)
 8005a36:	6813      	ldr	r3, [r2, #0]
 8005a38:	4610      	mov	r0, r2
 8005a3a:	b933      	cbnz	r3, 8005a4a <_free_r+0x2e>
 8005a3c:	6063      	str	r3, [r4, #4]
 8005a3e:	6014      	str	r4, [r2, #0]
 8005a40:	4628      	mov	r0, r5
 8005a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a46:	f7ff bfe8 	b.w	8005a1a <__malloc_unlock>
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	d90c      	bls.n	8005a68 <_free_r+0x4c>
 8005a4e:	6821      	ldr	r1, [r4, #0]
 8005a50:	1862      	adds	r2, r4, r1
 8005a52:	4293      	cmp	r3, r2
 8005a54:	bf04      	itt	eq
 8005a56:	681a      	ldreq	r2, [r3, #0]
 8005a58:	685b      	ldreq	r3, [r3, #4]
 8005a5a:	6063      	str	r3, [r4, #4]
 8005a5c:	bf04      	itt	eq
 8005a5e:	1852      	addeq	r2, r2, r1
 8005a60:	6022      	streq	r2, [r4, #0]
 8005a62:	6004      	str	r4, [r0, #0]
 8005a64:	e7ec      	b.n	8005a40 <_free_r+0x24>
 8005a66:	4613      	mov	r3, r2
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	b10a      	cbz	r2, 8005a70 <_free_r+0x54>
 8005a6c:	42a2      	cmp	r2, r4
 8005a6e:	d9fa      	bls.n	8005a66 <_free_r+0x4a>
 8005a70:	6819      	ldr	r1, [r3, #0]
 8005a72:	1858      	adds	r0, r3, r1
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d10b      	bne.n	8005a90 <_free_r+0x74>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	1858      	adds	r0, r3, r1
 8005a7e:	4282      	cmp	r2, r0
 8005a80:	6019      	str	r1, [r3, #0]
 8005a82:	d1dd      	bne.n	8005a40 <_free_r+0x24>
 8005a84:	6810      	ldr	r0, [r2, #0]
 8005a86:	6852      	ldr	r2, [r2, #4]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	4401      	add	r1, r0
 8005a8c:	6019      	str	r1, [r3, #0]
 8005a8e:	e7d7      	b.n	8005a40 <_free_r+0x24>
 8005a90:	d902      	bls.n	8005a98 <_free_r+0x7c>
 8005a92:	230c      	movs	r3, #12
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	e7d3      	b.n	8005a40 <_free_r+0x24>
 8005a98:	6820      	ldr	r0, [r4, #0]
 8005a9a:	1821      	adds	r1, r4, r0
 8005a9c:	428a      	cmp	r2, r1
 8005a9e:	bf04      	itt	eq
 8005aa0:	6811      	ldreq	r1, [r2, #0]
 8005aa2:	6852      	ldreq	r2, [r2, #4]
 8005aa4:	6062      	str	r2, [r4, #4]
 8005aa6:	bf04      	itt	eq
 8005aa8:	1809      	addeq	r1, r1, r0
 8005aaa:	6021      	streq	r1, [r4, #0]
 8005aac:	605c      	str	r4, [r3, #4]
 8005aae:	e7c7      	b.n	8005a40 <_free_r+0x24>
 8005ab0:	bd38      	pop	{r3, r4, r5, pc}
 8005ab2:	bf00      	nop
 8005ab4:	200000b8 	.word	0x200000b8

08005ab8 <_read_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4c07      	ldr	r4, [pc, #28]	; (8005ad8 <_read_r+0x20>)
 8005abc:	4605      	mov	r5, r0
 8005abe:	4608      	mov	r0, r1
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	6022      	str	r2, [r4, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	f7fa ff79 	bl	80009be <_read>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_read_r+0x1e>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_read_r+0x1e>
 8005ad4:	602b      	str	r3, [r5, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	2000077c 	.word	0x2000077c

08005adc <_fstat_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4c07      	ldr	r4, [pc, #28]	; (8005afc <_fstat_r+0x20>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	f7fa ffad 	bl	8000a48 <_fstat>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	d102      	bne.n	8005af8 <_fstat_r+0x1c>
 8005af2:	6823      	ldr	r3, [r4, #0]
 8005af4:	b103      	cbz	r3, 8005af8 <_fstat_r+0x1c>
 8005af6:	602b      	str	r3, [r5, #0]
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	bf00      	nop
 8005afc:	2000077c 	.word	0x2000077c

08005b00 <_isatty_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4c06      	ldr	r4, [pc, #24]	; (8005b1c <_isatty_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4605      	mov	r5, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	6023      	str	r3, [r4, #0]
 8005b0c:	f7fa ffac 	bl	8000a68 <_isatty>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_isatty_r+0x1a>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_isatty_r+0x1a>
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	2000077c 	.word	0x2000077c

08005b20 <_init>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr

08005b2c <_fini>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr
