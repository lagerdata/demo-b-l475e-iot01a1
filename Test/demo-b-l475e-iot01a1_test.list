
demo-b-l475e-iot01a1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057bc  080057bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c4  080057c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000700  2000000c  080057d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  080057d8  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001977b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003048  00000000  00000000  000397b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001710  00000000  00000000  0003c800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001588  00000000  00000000  0003df10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a087  00000000  00000000  0003f498  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000122a7  00000000  00000000  0006951f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b531  00000000  00000000  0007b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186cf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c8  00000000  00000000  00186d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080055e0 	.word	0x080055e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080055e0 	.word	0x080055e0

080001c8 <setjmp>:
 80001c8:	46ec      	mov	ip, sp
 80001ca:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001ce:	f04f 0000 	mov.w	r0, #0
 80001d2:	4770      	bx	lr

080001d4 <longjmp>:
 80001d4:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80001d8:	46e5      	mov	sp, ip
 80001da:	0008      	movs	r0, r1
 80001dc:	bf08      	it	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b972 	b.w	80004e0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	4688      	mov	r8, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14b      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000222:	428a      	cmp	r2, r1
 8000224:	4615      	mov	r5, r2
 8000226:	d967      	bls.n	80002f8 <__udivmoddi4+0xe4>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0720 	rsb	r7, r2, #32
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	fa20 f707 	lsr.w	r7, r0, r7
 800023a:	4095      	lsls	r5, r2
 800023c:	ea47 0803 	orr.w	r8, r7, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbb8 f7fe 	udiv	r7, r8, lr
 800024c:	fa1f fc85 	uxth.w	ip, r5
 8000250:	fb0e 8817 	mls	r8, lr, r7, r8
 8000254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000258:	fb07 f10c 	mul.w	r1, r7, ip
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18eb      	adds	r3, r5, r3
 8000262:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000266:	f080 811b 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8118 	bls.w	80004a0 <__udivmoddi4+0x28c>
 8000270:	3f02      	subs	r7, #2
 8000272:	442b      	add	r3, r5
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0fe 	udiv	r0, r3, lr
 800027c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fc0c 	mul.w	ip, r0, ip
 8000288:	45a4      	cmp	ip, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	192c      	adds	r4, r5, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x290>
 8000296:	45a4      	cmp	ip, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x290>
 800029c:	3802      	subs	r0, #2
 800029e:	442c      	add	r4, r5
 80002a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a4:	eba4 040c 	sub.w	r4, r4, ip
 80002a8:	2700      	movs	r7, #0
 80002aa:	b11e      	cbz	r6, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c6 4300 	strd	r4, r3, [r6]
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xbe>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80eb 	beq.w	800049a <__udivmoddi4+0x286>
 80002c4:	2700      	movs	r7, #0
 80002c6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ca:	4638      	mov	r0, r7
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d147      	bne.n	800036a <__udivmoddi4+0x156>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd0>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2c4>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa0>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa0>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xe8>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 808f 	bne.w	8000424 <__udivmoddi4+0x210>
 8000306:	1b49      	subs	r1, r1, r5
 8000308:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030c:	fa1f f885 	uxth.w	r8, r5
 8000310:	2701      	movs	r7, #1
 8000312:	fbb1 fcfe 	udiv	ip, r1, lr
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fb0e 111c 	mls	r1, lr, ip, r1
 800031c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000320:	fb08 f10c 	mul.w	r1, r8, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x124>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4299      	cmp	r1, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 8000336:	4684      	mov	ip, r0
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1410 	mls	r4, lr, r0, r1
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x14c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x14a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80b6 	bhi.w	80004ca <__udivmoddi4+0x2b6>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e79f      	b.n	80002aa <__udivmoddi4+0x96>
 800036a:	f1c7 0c20 	rsb	ip, r7, #32
 800036e:	40bb      	lsls	r3, r7
 8000370:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000374:	ea4e 0e03 	orr.w	lr, lr, r3
 8000378:	fa01 f407 	lsl.w	r4, r1, r7
 800037c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000380:	fa21 f30c 	lsr.w	r3, r1, ip
 8000384:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000388:	4325      	orrs	r5, r4
 800038a:	fbb3 f9f8 	udiv	r9, r3, r8
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	fb08 3319 	mls	r3, r8, r9, r3
 8000394:	fa1f fa8e 	uxth.w	sl, lr
 8000398:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800039c:	fb09 f40a 	mul.w	r4, r9, sl
 80003a0:	429c      	cmp	r4, r3
 80003a2:	fa02 f207 	lsl.w	r2, r2, r7
 80003a6:	fa00 f107 	lsl.w	r1, r0, r7
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1e 0303 	adds.w	r3, lr, r3
 80003b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b4:	f080 8087 	bcs.w	80004c6 <__udivmoddi4+0x2b2>
 80003b8:	429c      	cmp	r4, r3
 80003ba:	f240 8084 	bls.w	80004c6 <__udivmoddi4+0x2b2>
 80003be:	f1a9 0902 	sub.w	r9, r9, #2
 80003c2:	4473      	add	r3, lr
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1e 0404 	adds.w	r4, lr, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	d26b      	bcs.n	80004be <__udivmoddi4+0x2aa>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d969      	bls.n	80004be <__udivmoddi4+0x2aa>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4474      	add	r4, lr
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c2      	mov	sl, r8
 80003fe:	464b      	mov	r3, r9
 8000400:	d354      	bcc.n	80004ac <__udivmoddi4+0x298>
 8000402:	d051      	beq.n	80004a8 <__udivmoddi4+0x294>
 8000404:	2e00      	cmp	r6, #0
 8000406:	d069      	beq.n	80004dc <__udivmoddi4+0x2c8>
 8000408:	ebb1 050a 	subs.w	r5, r1, sl
 800040c:	eb64 0403 	sbc.w	r4, r4, r3
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40fd      	lsrs	r5, r7
 8000416:	40fc      	lsrs	r4, r7
 8000418:	ea4c 0505 	orr.w	r5, ip, r5
 800041c:	e9c6 5400 	strd	r5, r4, [r6]
 8000420:	2700      	movs	r7, #0
 8000422:	e747      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f703 	lsr.w	r7, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	fa21 f303 	lsr.w	r3, r1, r3
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	4338      	orrs	r0, r7
 800043c:	0c01      	lsrs	r1, r0, #16
 800043e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000442:	fa1f f885 	uxth.w	r8, r5
 8000446:	fb0e 3317 	mls	r3, lr, r7, r3
 800044a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044e:	fb07 f308 	mul.w	r3, r7, r8
 8000452:	428b      	cmp	r3, r1
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x256>
 800045a:	1869      	adds	r1, r5, r1
 800045c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000460:	d22f      	bcs.n	80004c2 <__udivmoddi4+0x2ae>
 8000462:	428b      	cmp	r3, r1
 8000464:	d92d      	bls.n	80004c2 <__udivmoddi4+0x2ae>
 8000466:	3f02      	subs	r7, #2
 8000468:	4429      	add	r1, r5
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	b281      	uxth	r1, r0
 800046e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000472:	fb0e 3310 	mls	r3, lr, r0, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb00 f308 	mul.w	r3, r0, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x27e>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000488:	d217      	bcs.n	80004ba <__udivmoddi4+0x2a6>
 800048a:	428b      	cmp	r3, r1
 800048c:	d915      	bls.n	80004ba <__udivmoddi4+0x2a6>
 800048e:	3802      	subs	r0, #2
 8000490:	4429      	add	r1, r5
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000498:	e73b      	b.n	8000312 <__udivmoddi4+0xfe>
 800049a:	4637      	mov	r7, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e709      	b.n	80002b4 <__udivmoddi4+0xa0>
 80004a0:	4607      	mov	r7, r0
 80004a2:	e6e7      	b.n	8000274 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a8:	4541      	cmp	r1, r8
 80004aa:	d2ab      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b0:	eb69 020e 	sbc.w	r2, r9, lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	e7a4      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004ba:	4660      	mov	r0, ip
 80004bc:	e7e9      	b.n	8000492 <__udivmoddi4+0x27e>
 80004be:	4618      	mov	r0, r3
 80004c0:	e795      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c2:	4667      	mov	r7, ip
 80004c4:	e7d1      	b.n	800046a <__udivmoddi4+0x256>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e77c      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	442c      	add	r4, r5
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0x14c>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	442b      	add	r3, r5
 80004d6:	e72f      	b.n	8000338 <__udivmoddi4+0x124>
 80004d8:	4638      	mov	r0, r7
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xda>
 80004dc:	4637      	mov	r7, r6
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0xa0>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6613      	str	r3, [r2, #96]	; 0x60
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	6593      	str	r3, [r2, #88]	; 0x58
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_MspInit+0x44>)
 8000510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d128      	bne.n	800059e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 800054e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 8000552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000556:	6613      	str	r3, [r2, #96]	; 0x60
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 800055a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800055c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 8000566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000568:	4a10      	ldr	r2, [pc, #64]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_DFSDM_ChannelMspInit+0x80>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000574:	f003 0310 	and.w	r3, r3, #16
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800057c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	2300      	movs	r3, #0
 800058c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800058e:	2306      	movs	r3, #6
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_DFSDM_ChannelMspInit+0x84>)
 800059a:	f000 fd57 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48001000 	.word	0x48001000

080005b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <HAL_I2C_MspInit+0x7c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d128      	bne.n	8000628 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <HAL_I2C_MspInit+0x80>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80005ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f4:	2312      	movs	r3, #18
 80005f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000600:	2304      	movs	r3, #4
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <HAL_I2C_MspInit+0x84>)
 800060c:	f000 fd1e 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000610:	4b08      	ldr	r3, [pc, #32]	; (8000634 <HAL_I2C_MspInit+0x80>)
 8000612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000614:	4a07      	ldr	r2, [pc, #28]	; (8000634 <HAL_I2C_MspInit+0x80>)
 8000616:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800061a:	6593      	str	r3, [r2, #88]	; 0x58
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_I2C_MspInit+0x80>)
 800061e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40005800 	.word	0x40005800
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	; 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a17      	ldr	r2, [pc, #92]	; (80006b8 <HAL_QSPI_MspInit+0x7c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d128      	bne.n	80006b0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000662:	4a16      	ldr	r2, [pc, #88]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000668:	6513      	str	r3, [r2, #80]	; 0x50
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 800066c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a10      	ldr	r2, [pc, #64]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 800067c:	f043 0310 	orr.w	r3, r3, #16
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_QSPI_MspInit+0x80>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800068e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000692:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80006a0:	230a      	movs	r3, #10
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <HAL_QSPI_MspInit+0x84>)
 80006ac:	f000 fcce 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	a0001000 	.word	0xa0001000
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48001000 	.word	0x48001000

080006c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_SPI_MspInit+0x7c>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d128      	bne.n	8000738 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	4a16      	ldr	r2, [pc, #88]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f0:	6593      	str	r3, [r2, #88]	; 0x58
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_SPI_MspInit+0x80>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <HAL_SPI_MspInit+0x80>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4a10      	ldr	r2, [pc, #64]	; (8000744 <HAL_SPI_MspInit+0x80>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_SPI_MspInit+0x80>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000716:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000728:	2306      	movs	r3, #6
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <HAL_SPI_MspInit+0x84>)
 8000734:	f000 fc8a 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	; 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40003c00 	.word	0x40003c00
 8000744:	40021000 	.word	0x40021000
 8000748:	48000800 	.word	0x48000800

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a2e      	ldr	r2, [pc, #184]	; (8000824 <HAL_UART_MspInit+0xd8>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d128      	bne.n	80007c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800076e:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	4a2d      	ldr	r2, [pc, #180]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000778:	6613      	str	r3, [r2, #96]	; 0x60
 800077a:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <HAL_UART_MspInit+0xdc>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b28      	ldr	r3, [pc, #160]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a27      	ldr	r2, [pc, #156]	; (8000828 <HAL_UART_MspInit+0xdc>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <HAL_UART_MspInit+0xdc>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800079e:	23c0      	movs	r3, #192	; 0xc0
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007ae:	2307      	movs	r3, #7
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	481c      	ldr	r0, [pc, #112]	; (800082c <HAL_UART_MspInit+0xe0>)
 80007ba:	f000 fc47 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007be:	e02d      	b.n	800081c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <HAL_UART_MspInit+0xe4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d128      	bne.n	800081c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_UART_MspInit+0xdc>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80007fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800080c:	2307      	movs	r3, #7
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <HAL_UART_MspInit+0xe8>)
 8000818:	f000 fc18 	bl	800104c <HAL_GPIO_Init>
}
 800081c:	bf00      	nop
 800081e:	3730      	adds	r7, #48	; 0x30
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40013800 	.word	0x40013800
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400
 8000830:	40004800 	.word	0x40004800
 8000834:	48000c00 	.word	0x48000c00

08000838 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a10      	ldr	r2, [pc, #64]	; (8000888 <HAL_UART_MspDeInit+0x50>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d10a      	bne.n	8000860 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_UART_MspDeInit+0x54>)
 800084c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084e:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_UART_MspDeInit+0x54>)
 8000850:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000854:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOB, ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin);
 8000856:	21c0      	movs	r1, #192	; 0xc0
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <HAL_UART_MspDeInit+0x58>)
 800085a:	f000 fd9f 	bl	800139c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800085e:	e00f      	b.n	8000880 <HAL_UART_MspDeInit+0x48>
  else if(huart->Instance==USART3)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <HAL_UART_MspDeInit+0x5c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10a      	bne.n	8000880 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART3_CLK_DISABLE();
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_UART_MspDeInit+0x54>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <HAL_UART_MspDeInit+0x54>)
 8000870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOD, INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin);
 8000876:	f44f 7140 	mov.w	r1, #768	; 0x300
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <HAL_UART_MspDeInit+0x60>)
 800087c:	f000 fd8e 	bl	800139c <HAL_GPIO_DeInit>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40013800 	.word	0x40013800
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400
 8000894:	40004800 	.word	0x40004800
 8000898:	48000c00 	.word	0x48000c00

0800089c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008bc:	d154      	bne.n	8000968 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	4a2b      	ldr	r2, [pc, #172]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80008d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f000 fbad 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80008f2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000904:	230a      	movs	r3, #10
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 fb9b 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 800091c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d114      	bne.n	8000964 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 800093c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6593      	str	r3, [r2, #88]	; 0x58
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000952:	f001 f935 	bl	8001bc0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <HAL_PCD_MspInit+0xd4>)
 800095c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000962:	e001      	b.n	8000968 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000964:	f001 f92c 	bl	8001bc0 <HAL_PWREx_EnableVddUSB>
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8e0 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80009d4:	2020      	movs	r0, #32
 80009d6:	f000 fded 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80009da:	2040      	movs	r0, #64	; 0x40
 80009dc:	f000 fdea 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80009e0:	2080      	movs	r0, #128	; 0x80
 80009e2:	f000 fde7 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80009e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80009ea:	f000 fde3 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80009f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009fa:	f000 fddb 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80009fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a02:	f000 fdd7 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a0a:	f000 fdd3 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000a0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a12:	f000 fdcf 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a1a:	f000 fdcb 	bl	80015b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <SystemInit+0x64>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a16      	ldr	r2, [pc, #88]	; (8000a88 <SystemInit+0x64>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <SystemInit+0x68>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <SystemInit+0x68>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <SystemInit+0x68>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <SystemInit+0x68>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <SystemInit+0x68>)
 8000a50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <SystemInit+0x68>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <SystemInit+0x68>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <SystemInit+0x68>)
 8000a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <SystemInit+0x68>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SystemInit+0x64>)
 8000a76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00
 8000a8c:	40021000 	.word	0x40021000

08000a90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a94:	f7ff ffc6 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a9a:	e003      	b.n	8000aa4 <LoopCopyDataInit>

08000a9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000aa0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000aa2:	3104      	adds	r1, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000aa8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aaa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000aac:	d3f6      	bcc.n	8000a9c <CopyDataInit>
	ldr	r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ab0:	e002      	b.n	8000ab8 <LoopFillZerobss>

08000ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ab2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ab4:	f842 3b04 	str.w	r3, [r2], #4

08000ab8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <LoopForever+0x16>)
	cmp	r2, r3
 8000aba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000abc:	d3f9      	bcc.n	8000ab2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f004 fd63 	bl	8005588 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ac2:	f003 ff9b 	bl	80049fc <main>

08000ac6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000acc:	080057cc 	.word	0x080057cc
	ldr	r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ad4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ad8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000adc:	2000070c 	.word	0x2000070c

08000ae0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC1_2_IRQHandler>

08000ae2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f95f 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f80e 	bl	8000b14 <HAL_InitTick>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	e001      	b.n	8000b08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b04:	f7ff fcee 	bl	80004e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_InitTick+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d023      	beq.n	8000b70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <HAL_InitTick+0x70>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_InitTick+0x6c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f96b 	bl	8000e1a <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10f      	bne.n	8000b6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d809      	bhi.n	8000b64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 f935 	bl	8000dc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_InitTick+0x74>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e007      	b.n	8000b74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e004      	b.n	8000b74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e001      	b.n	8000b74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000050 	.word	0x20000050

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000050 	.word	0x20000050

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_Delay+0x40>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	; (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	; (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	; 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d90:	f7ff ff8e 	bl	8000cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff29 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff3e 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff8e 	bl	8000d04 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5d 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff31 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e0ac      	b.n	8000fa0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f8b2 	bl	8000fb4 <DFSDM_GetChannelFromInstance>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <HAL_DFSDM_ChannelInit+0x174>)
 8000e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e09f      	b.n	8000fa0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fb63 	bl	800052c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <HAL_DFSDM_ChannelInit+0x178>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a4f      	ldr	r2, [pc, #316]	; (8000fac <HAL_DFSDM_ChannelInit+0x178>)
 8000e6e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000e70:	4b4e      	ldr	r3, [pc, #312]	; (8000fac <HAL_DFSDM_ChannelInit+0x178>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d125      	bne.n	8000ec4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000e78:	4b4d      	ldr	r3, [pc, #308]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000e7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000e82:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000e84:	4b4a      	ldr	r3, [pc, #296]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	4948      	ldr	r1, [pc, #288]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000e92:	4b47      	ldr	r3, [pc, #284]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a46      	ldr	r2, [pc, #280]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000e98:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000e9c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	791b      	ldrb	r3, [r3, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d108      	bne.n	8000eb8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000ea6:	4b42      	ldr	r3, [pc, #264]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	041b      	lsls	r3, r3, #16
 8000eb2:	493f      	ldr	r1, [pc, #252]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a3c      	ldr	r2, [pc, #240]	; (8000fb0 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000ed2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6819      	ldr	r1, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000ee2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000ee8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 020f 	bic.w	r2, r2, #15
 8000f00:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6819      	ldr	r1, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f10:	431a      	orrs	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000f28:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6899      	ldr	r1, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f002 0207 	and.w	r2, r2, #7
 8000f54:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6859      	ldr	r1, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f80:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f810 	bl	8000fb4 <DFSDM_GetChannelFromInstance>
 8000f94:	4601      	mov	r1, r0
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_DFSDM_ChannelInit+0x174>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000030 	.word	0x20000030
 8000fac:	2000002c 	.word	0x2000002c
 8000fb0:	40016000 	.word	0x40016000

08000fb4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a1c      	ldr	r2, [pc, #112]	; (8001030 <DFSDM_GetChannelFromInstance+0x7c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d102      	bne.n	8000fca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	e02b      	b.n	8001022 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <DFSDM_GetChannelFromInstance+0x80>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d102      	bne.n	8000fd8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e024      	b.n	8001022 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <DFSDM_GetChannelFromInstance+0x84>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d102      	bne.n	8000fe6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e01d      	b.n	8001022 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <DFSDM_GetChannelFromInstance+0x88>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d102      	bne.n	8000ff4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e016      	b.n	8001022 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <DFSDM_GetChannelFromInstance+0x8c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d102      	bne.n	8001002 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e00f      	b.n	8001022 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <DFSDM_GetChannelFromInstance+0x90>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d102      	bne.n	8001010 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800100a:	2306      	movs	r3, #6
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e008      	b.n	8001022 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <DFSDM_GetChannelFromInstance+0x94>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d102      	bne.n	800101e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001018:	2307      	movs	r3, #7
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e001      	b.n	8001022 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800101e:	2303      	movs	r3, #3
 8001020:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	40016000 	.word	0x40016000
 8001034:	40016020 	.word	0x40016020
 8001038:	40016040 	.word	0x40016040
 800103c:	40016080 	.word	0x40016080
 8001040:	400160a0 	.word	0x400160a0
 8001044:	400160c0 	.word	0x400160c0
 8001048:	400160e0 	.word	0x400160e0

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e17f      	b.n	800135c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 8171 	beq.w	8001356 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d00b      	beq.n	8001094 <HAL_GPIO_Init+0x48>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2b02      	cmp	r3, #2
 8001082:	d007      	beq.n	8001094 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001088:	2b11      	cmp	r3, #17
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d130      	bne.n	80010f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	f003 0201 	and.w	r2, r3, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d118      	bne.n	8001134 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x128>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b12      	cmp	r3, #18
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	6939      	ldr	r1, [r7, #16]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80ac 	beq.w	8001356 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <HAL_GPIO_Init+0x32c>)
 8001200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001202:	4a5d      	ldr	r2, [pc, #372]	; (8001378 <HAL_GPIO_Init+0x32c>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6613      	str	r3, [r2, #96]	; 0x60
 800120a:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <HAL_GPIO_Init+0x32c>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001216:	4a59      	ldr	r2, [pc, #356]	; (800137c <HAL_GPIO_Init+0x330>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x242>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x334>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x23e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x338>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x23a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x33c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x236>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x340>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x232>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x344>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x22e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x348>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x22a>
 8001272:	2306      	movs	r3, #6
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x244>
 8001276:	2307      	movs	r3, #7
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x244>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x244>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x244>
 800128e:	2300      	movs	r3, #0
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012a0:	4936      	ldr	r1, [pc, #216]	; (800137c <HAL_GPIO_Init+0x330>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ae:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_GPIO_Init+0x34c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <HAL_GPIO_Init+0x34c>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_GPIO_Init+0x34c>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x34c>)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_GPIO_Init+0x34c>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x34c>)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x34c>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_GPIO_Init+0x34c>)
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	f47f ae78 	bne.w	800105c <HAL_GPIO_Init+0x10>
  }
}
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	48001000 	.word	0x48001000
 8001390:	48001400 	.word	0x48001400
 8001394:	48001800 	.word	0x48001800
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80013aa:	e0cd      	b.n	8001548 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80013ac:	2201      	movs	r2, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80c0 	beq.w	8001542 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80013c2:	4a68      	ldr	r2, [pc, #416]	; (8001564 <HAL_GPIO_DeInit+0x1c8>)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ea:	d025      	beq.n	8001438 <HAL_GPIO_DeInit+0x9c>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a5e      	ldr	r2, [pc, #376]	; (8001568 <HAL_GPIO_DeInit+0x1cc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d01f      	beq.n	8001434 <HAL_GPIO_DeInit+0x98>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a5d      	ldr	r2, [pc, #372]	; (800156c <HAL_GPIO_DeInit+0x1d0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d019      	beq.n	8001430 <HAL_GPIO_DeInit+0x94>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a5c      	ldr	r2, [pc, #368]	; (8001570 <HAL_GPIO_DeInit+0x1d4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d013      	beq.n	800142c <HAL_GPIO_DeInit+0x90>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a5b      	ldr	r2, [pc, #364]	; (8001574 <HAL_GPIO_DeInit+0x1d8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d00d      	beq.n	8001428 <HAL_GPIO_DeInit+0x8c>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a5a      	ldr	r2, [pc, #360]	; (8001578 <HAL_GPIO_DeInit+0x1dc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d007      	beq.n	8001424 <HAL_GPIO_DeInit+0x88>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a59      	ldr	r2, [pc, #356]	; (800157c <HAL_GPIO_DeInit+0x1e0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d101      	bne.n	8001420 <HAL_GPIO_DeInit+0x84>
 800141c:	2306      	movs	r3, #6
 800141e:	e00c      	b.n	800143a <HAL_GPIO_DeInit+0x9e>
 8001420:	2307      	movs	r3, #7
 8001422:	e00a      	b.n	800143a <HAL_GPIO_DeInit+0x9e>
 8001424:	2305      	movs	r3, #5
 8001426:	e008      	b.n	800143a <HAL_GPIO_DeInit+0x9e>
 8001428:	2304      	movs	r3, #4
 800142a:	e006      	b.n	800143a <HAL_GPIO_DeInit+0x9e>
 800142c:	2303      	movs	r3, #3
 800142e:	e004      	b.n	800143a <HAL_GPIO_DeInit+0x9e>
 8001430:	2302      	movs	r3, #2
 8001432:	e002      	b.n	800143a <HAL_GPIO_DeInit+0x9e>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <HAL_GPIO_DeInit+0x9e>
 8001438:	2300      	movs	r3, #0
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	f002 0203 	and.w	r2, r2, #3
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4093      	lsls	r3, r2
 8001444:	68fa      	ldr	r2, [r7, #12]
 8001446:	429a      	cmp	r2, r3
 8001448:	d132      	bne.n	80014b0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800144a:	4b4d      	ldr	r3, [pc, #308]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	494b      	ldr	r1, [pc, #300]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 8001454:	4013      	ands	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001458:	4b49      	ldr	r3, [pc, #292]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	4947      	ldr	r1, [pc, #284]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 8001462:	4013      	ands	r3, r2
 8001464:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	4944      	ldr	r1, [pc, #272]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 8001470:	4013      	ands	r3, r2
 8001472:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	43db      	mvns	r3, r3
 800147c:	4940      	ldr	r1, [pc, #256]	; (8001580 <HAL_GPIO_DeInit+0x1e4>)
 800147e:	4013      	ands	r3, r2
 8001480:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001492:	4a34      	ldr	r2, [pc, #208]	; (8001564 <HAL_GPIO_DeInit+0x1c8>)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	4830      	ldr	r0, [pc, #192]	; (8001564 <HAL_GPIO_DeInit+0x1c8>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	400a      	ands	r2, r1
 80014aa:	3302      	adds	r3, #2
 80014ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2103      	movs	r1, #3
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	220f      	movs	r2, #15
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	08d2      	lsrs	r2, r2, #3
 80014e4:	4019      	ands	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2103      	movs	r1, #3
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	2101      	movs	r1, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2103      	movs	r1, #3
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	401a      	ands	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001532:	2101      	movs	r1, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	401a      	ands	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f af2b 	bne.w	80013ac <HAL_GPIO_DeInit+0x10>
  }
}
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40010000 	.word	0x40010000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800
 8001570:	48000c00 	.word	0x48000c00
 8001574:	48001000 	.word	0x48001000
 8001578:	48001400 	.word	0x48001400
 800157c:	48001800 	.word	0x48001800
 8001580:	40010400 	.word	0x40010400

08001584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	807b      	strh	r3, [r7, #2]
 8001590:	4613      	mov	r3, r2
 8001592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001594:	787b      	ldrb	r3, [r7, #1]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159a:	887a      	ldrh	r2, [r7, #2]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c0:	695a      	ldr	r2, [r3, #20]
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d006      	beq.n	80015d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f806 	bl	80015e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e081      	b.n	8001710 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d106      	bne.n	8001626 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7fe ffc7 	bl	80005b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2224      	movs	r2, #36	; 0x24
 800162a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800164a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800165a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d107      	bne.n	8001674 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	e006      	b.n	8001682 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001680:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d104      	bne.n	8001694 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001692:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	ea42 0103 	orr.w	r1, r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	021a      	lsls	r2, r3, #8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69d9      	ldr	r1, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1a      	ldr	r2, [r3, #32]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 0201 	orr.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2220      	movs	r2, #32
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	d138      	bne.n	80017a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001738:	2302      	movs	r3, #2
 800173a:	e032      	b.n	80017a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800176a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6819      	ldr	r1, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2220      	movs	r2, #32
 8001790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	e000      	b.n	80017a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017a0:	2302      	movs	r3, #2
  }
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b20      	cmp	r3, #32
 80017c2:	d139      	bne.n	8001838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e033      	b.n	800183a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2224      	movs	r2, #36	; 0x24
 80017de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f042 0201 	orr.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001848:	b08f      	sub	sp, #60	; 0x3c
 800184a:	af0a      	add	r7, sp, #40	; 0x28
 800184c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e116      	b.n	8001a86 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d106      	bne.n	8001878 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff f812 	bl	800089c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2203      	movs	r2, #3
 800187c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fb00 	bl	8003e9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	687e      	ldr	r6, [r7, #4]
 80018a4:	466d      	mov	r5, sp
 80018a6:	f106 0410 	add.w	r4, r6, #16
 80018aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80018ba:	1d33      	adds	r3, r6, #4
 80018bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f002 fa9a 	bl	8003df8 <USB_CoreInit>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0d7      	b.n	8001a86 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 faee 	bl	8003ebe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e04a      	b.n	800197e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	333d      	adds	r3, #61	; 0x3d
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	333c      	adds	r3, #60	; 0x3c
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001910:	7bfa      	ldrb	r2, [r7, #15]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	b298      	uxth	r0, r3
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	3342      	adds	r3, #66	; 0x42
 8001924:	4602      	mov	r2, r0
 8001926:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	333f      	adds	r3, #63	; 0x3f
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3344      	adds	r3, #68	; 0x44
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3348      	adds	r3, #72	; 0x48
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	3350      	adds	r3, #80	; 0x50
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	3301      	adds	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d3af      	bcc.n	80018e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e044      	b.n	8001a18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	3301      	adds	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3b5      	bcc.n	800198e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	687e      	ldr	r6, [r7, #4]
 8001a2a:	466d      	mov	r5, sp
 8001a2c:	f106 0410 	add.w	r4, r6, #16
 8001a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a40:	1d33      	adds	r3, r6, #4
 8001a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a44:	6838      	ldr	r0, [r7, #0]
 8001a46:	f002 fa65 	bl	8003f14 <USB_DevInit>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e014      	b.n	8001a86 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f80a 	bl	8001a8e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fbf5 	bl	800426e <USB_DevDisconnect>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a8e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	f043 0303 	orr.w	r3, r3, #3
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <HAL_PWREx_GetVoltageRange+0x18>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40007000 	.word	0x40007000

08001b14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b22:	d130      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b30:	d038      	beq.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3a:	4a1e      	ldr	r2, [pc, #120]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2232      	movs	r2, #50	; 0x32
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	4a1b      	ldr	r2, [pc, #108]	; (8001bbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b58:	e002      	b.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6c:	d102      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f2      	bne.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b80:	d110      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e00f      	b.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b92:	d007      	beq.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b9c:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ba2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_PWREx_EnableVddUSB+0x1c>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6053      	str	r3, [r2, #4]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40007000 	.word	0x40007000

08001be0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7fe ffe4 	bl	8000bb4 <HAL_GetTick>
 8001bec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e063      	b.n	8001cc0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fd15 	bl	800063c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001c12:	f241 3188 	movw	r1, #5000	; 0x1388
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f858 	bl	8001ccc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	021a      	lsls	r2, r3, #8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2120      	movs	r1, #32
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f850 	bl	8001ce8 <QSPI_WaitFlagStateUntilTimeout>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d131      	bne.n	8001cb6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001c5c:	f023 0310 	bic.w	r3, r3, #16
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6852      	ldr	r2, [r2, #4]
 8001c64:	0611      	lsls	r1, r2, #24
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68d2      	ldr	r2, [r2, #12]
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_QSPI_Init+0xe8>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6912      	ldr	r2, [r2, #16]
 8001c82:	0411      	lsls	r1, r2, #16
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6952      	ldr	r2, [r2, #20]
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6992      	ldr	r2, [r2, #24]
 8001c8e:	4311      	orrs	r1, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	430b      	orrs	r3, r1
 8001c96:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	ffe0f8fe 	.word	0xffe0f8fe

08001ccc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001cf8:	e01a      	b.n	8001d30 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d00:	d016      	beq.n	8001d30 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d02:	f7fe ff57 	bl	8000bb4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d302      	bcc.n	8001d18 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d24:	f043 0201 	orr.w	r2, r3, #1
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e00e      	b.n	8001d4e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf14      	ite	ne
 8001d3e:	2301      	movne	r3, #1
 8001d40:	2300      	moveq	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d1d6      	bne.n	8001cfa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e3d4      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d6a:	4ba1      	ldr	r3, [pc, #644]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d74:	4b9e      	ldr	r3, [pc, #632]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80e4 	beq.w	8001f54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d007      	beq.n	8001da2 <HAL_RCC_OscConfig+0x4a>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	f040 808b 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	f040 8087 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001da2:	4b93      	ldr	r3, [pc, #588]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d005      	beq.n	8001dba <HAL_RCC_OscConfig+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e3ac      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d004      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x7c>
 8001dca:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_OscConfig+0x88>
 8001dd4:	4b86      	ldr	r3, [pc, #536]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d223      	bcs.n	8001e2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fd3f 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e38d      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df8:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a7c      	ldr	r2, [pc, #496]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b7a      	ldr	r3, [pc, #488]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4977      	ldr	r1, [pc, #476]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e16:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	4972      	ldr	r1, [pc, #456]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
 8001e2a:	e025      	b.n	8001e78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2c:	4b70      	ldr	r3, [pc, #448]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6f      	ldr	r2, [pc, #444]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	496a      	ldr	r1, [pc, #424]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e4a:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	4965      	ldr	r1, [pc, #404]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fcff 	bl	800286c <RCC_SetFlashLatencyFromMSIRange>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e34d      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e78:	f000 fc36 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8001e7c:	4601      	mov	r1, r0
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	4a5a      	ldr	r2, [pc, #360]	; (8001ff4 <HAL_RCC_OscConfig+0x29c>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	fa21 f303 	lsr.w	r3, r1, r3
 8001e94:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_RCC_OscConfig+0x2a0>)
 8001e96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e98:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_RCC_OscConfig+0x2a4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fe39 	bl	8000b14 <HAL_InitTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d052      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	e331      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d032      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a4c      	ldr	r2, [pc, #304]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fe76 	bl	8000bb4 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ecc:	f7fe fe72 	bl	8000bb4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e31a      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ede:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a40      	ldr	r2, [pc, #256]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	493b      	ldr	r1, [pc, #236]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f08:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
 8001f1c:	e01a      	b.n	8001f54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f1e:	4b34      	ldr	r3, [pc, #208]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a33      	ldr	r2, [pc, #204]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fe43 	bl	8000bb4 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f32:	f7fe fe3f 	bl	8000bb4 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e2e7      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x1da>
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d074      	beq.n	800204a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x21a>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	2b0c      	cmp	r3, #12
 8001f6a:	d10e      	bne.n	8001f8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d10b      	bne.n	8001f8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f72:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d064      	beq.n	8002048 <HAL_RCC_OscConfig+0x2f0>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d160      	bne.n	8002048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e2c4      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x24a>
 8001f94:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e01d      	b.n	8001fde <HAL_RCC_OscConfig+0x286>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x26e>
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0x286>
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_RCC_OscConfig+0x298>)
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01c      	beq.n	8002020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fde5 	bl	8000bb4 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fec:	e011      	b.n	8002012 <HAL_RCC_OscConfig+0x2ba>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	080056a4 	.word	0x080056a4
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7fe fdd8 	bl	8000bb4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e280      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002012:	4baf      	ldr	r3, [pc, #700]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x2a8>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe fdc8 	bl	8000bb4 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002028:	f7fe fdc4 	bl	8000bb4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e26c      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800203a:	4ba5      	ldr	r3, [pc, #660]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x2d0>
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d060      	beq.n	8002118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d005      	beq.n	8002068 <HAL_RCC_OscConfig+0x310>
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	2b0c      	cmp	r3, #12
 8002060:	d119      	bne.n	8002096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d116      	bne.n	8002096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002068:	4b99      	ldr	r3, [pc, #612]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x328>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e249      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b93      	ldr	r3, [pc, #588]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	061b      	lsls	r3, r3, #24
 800208e:	4990      	ldr	r1, [pc, #576]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002090:	4313      	orrs	r3, r2
 8002092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002094:	e040      	b.n	8002118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d023      	beq.n	80020e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209e:	4b8c      	ldr	r3, [pc, #560]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a8b      	ldr	r2, [pc, #556]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7fe fd83 	bl	8000bb4 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b2:	f7fe fd7f 	bl	8000bb4 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e227      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c4:	4b82      	ldr	r3, [pc, #520]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	061b      	lsls	r3, r3, #24
 80020de:	497c      	ldr	r1, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
 80020e4:	e018      	b.n	8002118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e6:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a79      	ldr	r2, [pc, #484]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80020ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f2:	f7fe fd5f 	bl	8000bb4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fa:	f7fe fd5b 	bl	8000bb4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e203      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800210c:	4b70      	ldr	r3, [pc, #448]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d03c      	beq.n	800219e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01c      	beq.n	8002166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800212e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002132:	4a67      	ldr	r2, [pc, #412]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7fe fd3a 	bl	8000bb4 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fd36 	bl	8000bb4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e1de      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002156:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ef      	beq.n	8002144 <HAL_RCC_OscConfig+0x3ec>
 8002164:	e01b      	b.n	800219e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002166:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216c:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe fd1d 	bl	8000bb4 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217e:	f7fe fd19 	bl	8000bb4 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1c1      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ef      	bne.n	800217e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80a6 	beq.w	80022f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021b0:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	4a43      	ldr	r2, [pc, #268]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6593      	str	r3, [r2, #88]	; 0x58
 80021c8:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d8:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <HAL_RCC_OscConfig+0x57c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d118      	bne.n	8002216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCC_OscConfig+0x57c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <HAL_RCC_OscConfig+0x57c>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f0:	f7fe fce0 	bl	8000bb4 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fcdc 	bl	8000bb4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e184      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_RCC_OscConfig+0x57c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d108      	bne.n	8002230 <HAL_RCC_OscConfig+0x4d8>
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800222e:	e024      	b.n	800227a <HAL_RCC_OscConfig+0x522>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b05      	cmp	r3, #5
 8002236:	d110      	bne.n	800225a <HAL_RCC_OscConfig+0x502>
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a24      	ldr	r2, [pc, #144]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002258:	e00f      	b.n	800227a <HAL_RCC_OscConfig+0x522>
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 8002272:	f023 0304 	bic.w	r3, r3, #4
 8002276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d016      	beq.n	80022b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fc97 	bl	8000bb4 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fc93 	bl	8000bb4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e139      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_RCC_OscConfig+0x578>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ed      	beq.n	800228a <HAL_RCC_OscConfig+0x532>
 80022ae:	e01a      	b.n	80022e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fc80 	bl	8000bb4 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b6:	e00f      	b.n	80022d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7fe fc7c 	bl	8000bb4 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d906      	bls.n	80022d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e122      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d8:	4b90      	ldr	r3, [pc, #576]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1e8      	bne.n	80022b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e6:	7ffb      	ldrb	r3, [r7, #31]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b8b      	ldr	r3, [pc, #556]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80022ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f0:	4a8a      	ldr	r2, [pc, #552]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8108 	beq.w	8002512 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	2b02      	cmp	r3, #2
 8002308:	f040 80d0 	bne.w	80024ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800230c:	4b83      	ldr	r3, [pc, #524]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	429a      	cmp	r2, r3
 800231e:	d130      	bne.n	8002382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	3b01      	subs	r3, #1
 800232c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d127      	bne.n	8002382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11f      	bne.n	8002382 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800234c:	2a07      	cmp	r2, #7
 800234e:	bf14      	ite	ne
 8002350:	2201      	movne	r2, #1
 8002352:	2200      	moveq	r2, #0
 8002354:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002356:	4293      	cmp	r3, r2
 8002358:	d113      	bne.n	8002382 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d109      	bne.n	8002382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	3b01      	subs	r3, #1
 800237c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d06e      	beq.n	8002460 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	2b0c      	cmp	r3, #12
 8002386:	d069      	beq.n	800245c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002388:	4b64      	ldr	r3, [pc, #400]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002394:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0b7      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80023a4:	4b5d      	ldr	r3, [pc, #372]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5c      	ldr	r2, [pc, #368]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80023aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023b0:	f7fe fc00 	bl	8000bb4 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7fe fbfc 	bl	8000bb4 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0a4      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ca:	4b54      	ldr	r3, [pc, #336]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d6:	4b51      	ldr	r3, [pc, #324]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	4b51      	ldr	r3, [pc, #324]	; (8002520 <HAL_RCC_OscConfig+0x7c8>)
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023e6:	3a01      	subs	r2, #1
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023f0:	0212      	lsls	r2, r2, #8
 80023f2:	4311      	orrs	r1, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023f8:	0852      	lsrs	r2, r2, #1
 80023fa:	3a01      	subs	r2, #1
 80023fc:	0552      	lsls	r2, r2, #21
 80023fe:	4311      	orrs	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002404:	0852      	lsrs	r2, r2, #1
 8002406:	3a01      	subs	r2, #1
 8002408:	0652      	lsls	r2, r2, #25
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002410:	0912      	lsrs	r2, r2, #4
 8002412:	0452      	lsls	r2, r2, #17
 8002414:	430a      	orrs	r2, r1
 8002416:	4941      	ldr	r1, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800241c:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3e      	ldr	r2, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 8002422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002428:	4b3c      	ldr	r3, [pc, #240]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a3b      	ldr	r2, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800242e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002434:	f7fe fbbe 	bl	8000bb4 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243c:	f7fe fbba 	bl	8000bb4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e062      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244e:	4b33      	ldr	r3, [pc, #204]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800245a:	e05a      	b.n	8002512 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e059      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d152      	bne.n	8002512 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2a      	ldr	r2, [pc, #168]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 8002472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4a27      	ldr	r2, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002484:	f7fe fb96 	bl	8000bb4 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fb92 	bl	8000bb4 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e03a      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x734>
 80024aa:	e032      	b.n	8002512 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d02d      	beq.n	800250e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024bc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024d0:	f023 0303 	bic.w	r3, r3, #3
 80024d4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 80024dc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fb65 	bl	8000bb4 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ee:	f7fe fb61 	bl	8000bb4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e009      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_RCC_OscConfig+0x7c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x796>
 800250c:	e001      	b.n	8002512 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	f99d808c 	.word	0xf99d808c

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0c8      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d910      	bls.n	8002568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4961      	ldr	r1, [pc, #388]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b0      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d04c      	beq.n	800260e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d107      	bne.n	800258c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257c:	4b56      	ldr	r3, [pc, #344]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d121      	bne.n	80025cc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e09e      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002594:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d115      	bne.n	80025cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e092      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025ac:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e086      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025bc:	4b46      	ldr	r3, [pc, #280]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e07e      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025cc:	4b42      	ldr	r3, [pc, #264]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 0203 	bic.w	r2, r3, #3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	493f      	ldr	r1, [pc, #252]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025de:	f7fe fae9 	bl	8000bb4 <HAL_GetTick>
 80025e2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e6:	f7fe fae5 	bl	8000bb4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e066      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 020c 	and.w	r2, r3, #12
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	429a      	cmp	r2, r3
 800260c:	d1eb      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	492c      	ldr	r1, [pc, #176]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4924      	ldr	r1, [pc, #144]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_RCC_ClockConfig+0x1b0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e036      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4918      	ldr	r1, [pc, #96]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4910      	ldr	r1, [pc, #64]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800269a:	f000 f825 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 800269e:	4601      	mov	r1, r0
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <HAL_RCC_ClockConfig+0x1b4>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 80026ac:	5cd3      	ldrb	r3, [r2, r3]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	fa21 f303 	lsr.w	r3, r1, r3
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fa28 	bl	8000b14 <HAL_InitTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	72fb      	strb	r3, [r7, #11]

  return status;
 80026c8:	7afb      	ldrb	r3, [r7, #11]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40022000 	.word	0x40022000
 80026d8:	40021000 	.word	0x40021000
 80026dc:	080056a4 	.word	0x080056a4
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000004 	.word	0x20000004

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002700:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x34>
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d121      	bne.n	800275a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d11e      	bne.n	800275a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800271c:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d107      	bne.n	8002738 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002728:	4b30      	ldr	r3, [pc, #192]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 800272a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e005      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002738:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002758:	e00a      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d102      	bne.n	8002766 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002760:	4b24      	ldr	r3, [pc, #144]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002762:	61bb      	str	r3, [r7, #24]
 8002764:	e004      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d101      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x110>)
 800276e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d133      	bne.n	80027de <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002776:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d002      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xa4>
 8002786:	2b03      	cmp	r3, #3
 8002788:	d003      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0xaa>
 800278a:	e005      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800278e:	617b      	str	r3, [r7, #20]
      break;
 8002790:	e005      	b.n	800279e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002794:	617b      	str	r3, [r7, #20]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	617b      	str	r3, [r7, #20]
      break;
 800279c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	3301      	adds	r3, #1
 80027aa:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	fb02 f203 	mul.w	r2, r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_GetSysClockFreq+0x104>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0e5b      	lsrs	r3, r3, #25
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027de:	69bb      	ldr	r3, [r7, #24]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3724      	adds	r7, #36	; 0x24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40021000 	.word	0x40021000
 80027f0:	080056bc 	.word	0x080056bc
 80027f4:	00f42400 	.word	0x00f42400
 80027f8:	007a1200 	.word	0x007a1200

080027fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_GetHCLKFreq+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000000 	.word	0x20000000

08002814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002818:	f7ff fff0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 800281c:	4601      	mov	r1, r0
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_RCC_GetPCLK1Freq+0x28>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40021000 	.word	0x40021000
 800283c:	080056b4 	.word	0x080056b4

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002844:	f7ff ffda 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002848:	4601      	mov	r1, r0
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0adb      	lsrs	r3, r3, #11
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	080056b4 	.word	0x080056b4

0800286c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002878:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002884:	f7ff f938 	bl	8001af8 <HAL_PWREx_GetVoltageRange>
 8002888:	6178      	str	r0, [r7, #20]
 800288a:	e014      	b.n	80028b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	; 0x58
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028a4:	f7ff f928 	bl	8001af8 <HAL_PWREx_GetVoltageRange>
 80028a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028aa:	4b1e      	ldr	r3, [pc, #120]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	4a1d      	ldr	r2, [pc, #116]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028bc:	d10b      	bne.n	80028d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d919      	bls.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2ba0      	cmp	r3, #160	; 0xa0
 80028c8:	d902      	bls.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ca:	2302      	movs	r3, #2
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e013      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028d0:	2301      	movs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	e010      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b80      	cmp	r3, #128	; 0x80
 80028da:	d902      	bls.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028dc:	2303      	movs	r3, #3
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	e00a      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b80      	cmp	r3, #128	; 0x80
 80028e6:	d102      	bne.n	80028ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028e8:	2302      	movs	r3, #2
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e004      	b.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b70      	cmp	r3, #112	; 0x70
 80028f2:	d101      	bne.n	80028f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028f4:	2301      	movs	r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 0207 	bic.w	r2, r3, #7
 8002900:	4909      	ldr	r1, [pc, #36]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	40022000 	.word	0x40022000

0800292c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002934:	2300      	movs	r3, #0
 8002936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002938:	2300      	movs	r3, #0
 800293a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002944:	2b00      	cmp	r3, #0
 8002946:	d03f      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002950:	d01c      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002956:	d802      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00e      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800295c:	e01f      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800295e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002962:	d003      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002964:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002968:	d01c      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800296a:	e018      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800296c:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a84      	ldr	r2, [pc, #528]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002976:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002978:	e015      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fac9 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800298a:	e00c      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3320      	adds	r3, #32
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fbb0 	bl	80030f8 <RCCEx_PLLSAI2_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	74fb      	strb	r3, [r7, #19]
      break;
 80029a2:	e000      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80029a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a6:	7cfb      	ldrb	r3, [r7, #19]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10b      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ac:	4b75      	ldr	r3, [pc, #468]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ba:	4972      	ldr	r1, [pc, #456]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029c2:	e001      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d03f      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029dc:	d01c      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80029de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e2:	d802      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80029e8:	e01f      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80029ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029ee:	d003      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80029f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029f4:	d01c      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80029f6:	e018      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029f8:	4b62      	ldr	r3, [pc, #392]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a61      	ldr	r2, [pc, #388]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a04:	e015      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fa83 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002a12:	4603      	mov	r3, r0
 8002a14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a16:	e00c      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3320      	adds	r3, #32
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fb6a 	bl	80030f8 <RCCEx_PLLSAI2_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a28:	e003      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a2e:	e000      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a32:	7cfb      	ldrb	r3, [r7, #19]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a38:	4b52      	ldr	r3, [pc, #328]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a46:	494f      	ldr	r1, [pc, #316]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a4e:	e001      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a0 	beq.w	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00d      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a80:	4a40      	ldr	r2, [pc, #256]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	; 0x58
 8002a88:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3a      	ldr	r2, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe f886 	bl	8000bb4 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aaa:	e009      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aac:	f7fe f882 	bl	8000bb4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	74fb      	strb	r3, [r7, #19]
        break;
 8002abe:	e005      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ef      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d15c      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002adc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01f      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d019      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d016      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe f841 	bl	8000bb4 <HAL_GetTick>
 8002b32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b34:	e00b      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7fe f83d 	bl	8000bb4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d902      	bls.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b4c:	e006      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0ec      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002b5c:	7cfb      	ldrb	r3, [r7, #19]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b72:	4904      	ldr	r1, [pc, #16]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b7a:	e009      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
 8002b80:	e006      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b90:	7c7b      	ldrb	r3, [r7, #17]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4b9e      	ldr	r3, [pc, #632]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9a:	4a9d      	ldr	r2, [pc, #628]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bae:	4b98      	ldr	r3, [pc, #608]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f023 0203 	bic.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	4994      	ldr	r1, [pc, #592]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd0:	4b8f      	ldr	r3, [pc, #572]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 020c 	bic.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	498c      	ldr	r1, [pc, #560]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf2:	4b87      	ldr	r3, [pc, #540]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4983      	ldr	r1, [pc, #524]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c14:	4b7e      	ldr	r3, [pc, #504]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	497b      	ldr	r1, [pc, #492]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c44:	4972      	ldr	r1, [pc, #456]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c58:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	496a      	ldr	r1, [pc, #424]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c7a:	4b65      	ldr	r3, [pc, #404]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	4961      	ldr	r1, [pc, #388]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c9c:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	4959      	ldr	r1, [pc, #356]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cbe:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ccc:	4950      	ldr	r1, [pc, #320]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce0:	4b4b      	ldr	r3, [pc, #300]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	4948      	ldr	r1, [pc, #288]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d02:	4b43      	ldr	r3, [pc, #268]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d10:	493f      	ldr	r1, [pc, #252]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d028      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d32:	4937      	ldr	r1, [pc, #220]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d42:	d106      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4e:	60d3      	str	r3, [r2, #12]
 8002d50:	e011      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d5a:	d10c      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	2101      	movs	r1, #1
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f8d8 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	491f      	ldr	r1, [pc, #124]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da0:	d106      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002da8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dac:	60d3      	str	r3, [r2, #12]
 8002dae:	e011      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f8a9 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002dd0:	7cfb      	ldrb	r3, [r7, #19]
 8002dd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02b      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfe:	d109      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4a02      	ldr	r2, [pc, #8]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0a:	60d3      	str	r3, [r2, #12]
 8002e0c:	e014      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f877 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2e:	7cfb      	ldrb	r3, [r7, #19]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02f      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e52:	4928      	ldr	r1, [pc, #160]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e62:	d10d      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f854 	bl	8002f18 <RCCEx_PLLSAI1_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d014      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002e7a:	7cfb      	ldrb	r3, [r7, #19]
 8002e7c:	74bb      	strb	r3, [r7, #18]
 8002e7e:	e011      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f931 	bl	80030f8 <RCCEx_PLLSAI2_Config>
 8002e96:	4603      	mov	r3, r0
 8002e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebe:	490d      	ldr	r1, [pc, #52]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee2:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002eea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000

08002f18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f26:	4b73      	ldr	r3, [pc, #460]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f32:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10d      	bne.n	8002f5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
       ||
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f4a:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
       ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d044      	beq.n	8002fe8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	e041      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d00c      	beq.n	8002f86 <RCCEx_PLLSAI1_Config+0x6e>
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d013      	beq.n	8002f98 <RCCEx_PLLSAI1_Config+0x80>
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d120      	bne.n	8002fb6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f74:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11d      	bne.n	8002fbc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e01a      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d116      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f96:	e013      	b.n	8002fc0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f98:	4b56      	ldr	r3, [pc, #344]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fb4:	e006      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fba:	e004      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fbc:	bf00      	nop
 8002fbe:	e002      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fc4:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fcc:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6819      	ldr	r1, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	4944      	ldr	r1, [pc, #272]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d17d      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffa:	f7fd fddb 	bl	8000bb4 <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003000:	e009      	b.n	8003016 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003002:	f7fd fdd7 	bl	8000bb4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d902      	bls.n	8003016 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	73fb      	strb	r3, [r7, #15]
        break;
 8003014:	e005      	b.n	8003022 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1ef      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d160      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d111      	bne.n	8003052 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6892      	ldr	r2, [r2, #8]
 800303e:	0211      	lsls	r1, r2, #8
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68d2      	ldr	r2, [r2, #12]
 8003044:	0912      	lsrs	r2, r2, #4
 8003046:	0452      	lsls	r2, r2, #17
 8003048:	430a      	orrs	r2, r1
 800304a:	492a      	ldr	r1, [pc, #168]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800304c:	4313      	orrs	r3, r2
 800304e:	610b      	str	r3, [r1, #16]
 8003050:	e027      	b.n	80030a2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d112      	bne.n	800307e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003058:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003060:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6892      	ldr	r2, [r2, #8]
 8003068:	0211      	lsls	r1, r2, #8
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6912      	ldr	r2, [r2, #16]
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0552      	lsls	r2, r2, #21
 8003074:	430a      	orrs	r2, r1
 8003076:	491f      	ldr	r1, [pc, #124]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	610b      	str	r3, [r1, #16]
 800307c:	e011      	b.n	80030a2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003086:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	0211      	lsls	r1, r2, #8
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6952      	ldr	r2, [r2, #20]
 8003094:	0852      	lsrs	r2, r2, #1
 8003096:	3a01      	subs	r2, #1
 8003098:	0652      	lsls	r2, r2, #25
 800309a:	430a      	orrs	r2, r1
 800309c:	4915      	ldr	r1, [pc, #84]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fd fd81 	bl	8000bb4 <HAL_GetTick>
 80030b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030b4:	e009      	b.n	80030ca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030b6:	f7fd fd7d 	bl	8000bb4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d902      	bls.n	80030ca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	73fb      	strb	r3, [r7, #15]
          break;
 80030c8:	e005      	b.n	80030d6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0ef      	beq.n	80030b6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d106      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	4903      	ldr	r1, [pc, #12]	; (80030f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	40021000 	.word	0x40021000

080030f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003106:	4b68      	ldr	r3, [pc, #416]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d018      	beq.n	8003144 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003112:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0203 	and.w	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d10d      	bne.n	800313e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
       ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800312a:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
       ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d044      	beq.n	80031c8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e041      	b.n	80031c8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d00c      	beq.n	8003166 <RCCEx_PLLSAI2_Config+0x6e>
 800314c:	2b03      	cmp	r3, #3
 800314e:	d013      	beq.n	8003178 <RCCEx_PLLSAI2_Config+0x80>
 8003150:	2b01      	cmp	r3, #1
 8003152:	d120      	bne.n	8003196 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003154:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11d      	bne.n	800319c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003164:	e01a      	b.n	800319c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003166:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003176:	e013      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003178:	4b4b      	ldr	r3, [pc, #300]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003194:	e006      	b.n	80031a4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
      break;
 800319a:	e004      	b.n	80031a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800319c:	bf00      	nop
 800319e:	e002      	b.n	80031a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10d      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031ac:	4b3e      	ldr	r3, [pc, #248]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	3b01      	subs	r3, #1
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	430b      	orrs	r3, r1
 80031c2:	4939      	ldr	r1, [pc, #228]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d167      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031ce:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a35      	ldr	r2, [pc, #212]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031da:	f7fd fceb 	bl	8000bb4 <HAL_GetTick>
 80031de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031e0:	e009      	b.n	80031f6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031e2:	f7fd fce7 	bl	8000bb4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d902      	bls.n	80031f6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	73fb      	strb	r3, [r7, #15]
        break;
 80031f4:	e005      	b.n	8003202 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ef      	bne.n	80031e2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d14a      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d111      	bne.n	8003232 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	0211      	lsls	r1, r2, #8
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68d2      	ldr	r2, [r2, #12]
 8003224:	0912      	lsrs	r2, r2, #4
 8003226:	0452      	lsls	r2, r2, #17
 8003228:	430a      	orrs	r2, r1
 800322a:	491f      	ldr	r1, [pc, #124]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800322c:	4313      	orrs	r3, r2
 800322e:	614b      	str	r3, [r1, #20]
 8003230:	e011      	b.n	8003256 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800323a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6892      	ldr	r2, [r2, #8]
 8003242:	0211      	lsls	r1, r2, #8
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6912      	ldr	r2, [r2, #16]
 8003248:	0852      	lsrs	r2, r2, #1
 800324a:	3a01      	subs	r2, #1
 800324c:	0652      	lsls	r2, r2, #25
 800324e:	430a      	orrs	r2, r1
 8003250:	4915      	ldr	r1, [pc, #84]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003252:	4313      	orrs	r3, r2
 8003254:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003260:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fd fca7 	bl	8000bb4 <HAL_GetTick>
 8003266:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003268:	e009      	b.n	800327e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800326a:	f7fd fca3 	bl	8000bb4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d902      	bls.n	800327e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	73fb      	strb	r3, [r7, #15]
          break;
 800327c:	e005      	b.n	800328a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ef      	beq.n	800326a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	4903      	ldr	r1, [pc, #12]	; (80032a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800329a:	4313      	orrs	r3, r2
 800329c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800329e:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e095      	b.n	80033ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d108      	bne.n	80032d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ce:	d009      	beq.n	80032e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
 80032d6:	e005      	b.n	80032e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fd f9e0 	bl	80006c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003324:	d902      	bls.n	800332c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e002      	b.n	8003332 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800332c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003330:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800333a:	d007      	beq.n	800334c <HAL_SPI_Init+0xa0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003344:	d002      	beq.n	800334c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	ea42 0103 	orr.w	r1, r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0204 	and.w	r2, r3, #4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033c8:	ea42 0103 	orr.w	r1, r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e040      	b.n	8003486 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd f999 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2224      	movs	r2, #36	; 0x24
 800341e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f8f5 	bl	8003620 <UART_SetConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e022      	b.n	8003486 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fb73 	bl	8003b34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fbfa 	bl	8003c78 <UART_CheckIdleState>
 8003484:	4603      	mov	r3, r0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e027      	b.n	80034f0 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2224      	movs	r2, #36	; 0x24
 80034a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f9b2 	bl	8000838 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08a      	sub	sp, #40	; 0x28
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	2b20      	cmp	r3, #32
 800350e:	f040 8081 	bne.w	8003614 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_UART_Transmit+0x26>
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e079      	b.n	8003616 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_UART_Transmit+0x38>
 800352c:	2302      	movs	r3, #2
 800352e:	e072      	b.n	8003616 <HAL_UART_Transmit+0x11e>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	; 0x21
 8003542:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003544:	f7fd fb36 	bl	8000bb4 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003562:	d108      	bne.n	8003576 <HAL_UART_Transmit+0x7e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d104      	bne.n	8003576 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	e003      	b.n	800357e <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003586:	e02d      	b.n	80035e4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2200      	movs	r2, #0
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fbb5 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e039      	b.n	8003616 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	881a      	ldrh	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035b4:	b292      	uxth	r2, r2
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	3302      	adds	r3, #2
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e008      	b.n	80035d2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	781a      	ldrb	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b292      	uxth	r2, r2
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3301      	adds	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1cb      	bne.n	8003588 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	2140      	movs	r1, #64	; 0x40
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fb81 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e005      	b.n	8003616 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2220      	movs	r2, #32
 800360e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e000      	b.n	8003616 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003614:	2302      	movs	r3, #2
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4313      	orrs	r3, r2
 8003644:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4bac      	ldr	r3, [pc, #688]	; (8003900 <UART_SetConfig+0x2e0>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	69f9      	ldr	r1, [r7, #28]
 8003656:	430b      	orrs	r3, r1
 8003658:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4aa2      	ldr	r2, [pc, #648]	; (8003904 <UART_SetConfig+0x2e4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	4313      	orrs	r3, r2
 8003688:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a99      	ldr	r2, [pc, #612]	; (8003908 <UART_SetConfig+0x2e8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d121      	bne.n	80036ec <UART_SetConfig+0xcc>
 80036a8:	4b98      	ldr	r3, [pc, #608]	; (800390c <UART_SetConfig+0x2ec>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d816      	bhi.n	80036e4 <UART_SetConfig+0xc4>
 80036b6:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <UART_SetConfig+0x9c>)
 80036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036d9 	.word	0x080036d9
 80036c4:	080036d3 	.word	0x080036d3
 80036c8:	080036df 	.word	0x080036df
 80036cc:	2301      	movs	r3, #1
 80036ce:	76fb      	strb	r3, [r7, #27]
 80036d0:	e0e8      	b.n	80038a4 <UART_SetConfig+0x284>
 80036d2:	2302      	movs	r3, #2
 80036d4:	76fb      	strb	r3, [r7, #27]
 80036d6:	e0e5      	b.n	80038a4 <UART_SetConfig+0x284>
 80036d8:	2304      	movs	r3, #4
 80036da:	76fb      	strb	r3, [r7, #27]
 80036dc:	e0e2      	b.n	80038a4 <UART_SetConfig+0x284>
 80036de:	2308      	movs	r3, #8
 80036e0:	76fb      	strb	r3, [r7, #27]
 80036e2:	e0df      	b.n	80038a4 <UART_SetConfig+0x284>
 80036e4:	2310      	movs	r3, #16
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	bf00      	nop
 80036ea:	e0db      	b.n	80038a4 <UART_SetConfig+0x284>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a87      	ldr	r2, [pc, #540]	; (8003910 <UART_SetConfig+0x2f0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d134      	bne.n	8003760 <UART_SetConfig+0x140>
 80036f6:	4b85      	ldr	r3, [pc, #532]	; (800390c <UART_SetConfig+0x2ec>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b0c      	cmp	r3, #12
 8003702:	d829      	bhi.n	8003758 <UART_SetConfig+0x138>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0xec>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003741 	.word	0x08003741
 8003710:	08003759 	.word	0x08003759
 8003714:	08003759 	.word	0x08003759
 8003718:	08003759 	.word	0x08003759
 800371c:	0800374d 	.word	0x0800374d
 8003720:	08003759 	.word	0x08003759
 8003724:	08003759 	.word	0x08003759
 8003728:	08003759 	.word	0x08003759
 800372c:	08003747 	.word	0x08003747
 8003730:	08003759 	.word	0x08003759
 8003734:	08003759 	.word	0x08003759
 8003738:	08003759 	.word	0x08003759
 800373c:	08003753 	.word	0x08003753
 8003740:	2300      	movs	r3, #0
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e0ae      	b.n	80038a4 <UART_SetConfig+0x284>
 8003746:	2302      	movs	r3, #2
 8003748:	76fb      	strb	r3, [r7, #27]
 800374a:	e0ab      	b.n	80038a4 <UART_SetConfig+0x284>
 800374c:	2304      	movs	r3, #4
 800374e:	76fb      	strb	r3, [r7, #27]
 8003750:	e0a8      	b.n	80038a4 <UART_SetConfig+0x284>
 8003752:	2308      	movs	r3, #8
 8003754:	76fb      	strb	r3, [r7, #27]
 8003756:	e0a5      	b.n	80038a4 <UART_SetConfig+0x284>
 8003758:	2310      	movs	r3, #16
 800375a:	76fb      	strb	r3, [r7, #27]
 800375c:	bf00      	nop
 800375e:	e0a1      	b.n	80038a4 <UART_SetConfig+0x284>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a6b      	ldr	r2, [pc, #428]	; (8003914 <UART_SetConfig+0x2f4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d120      	bne.n	80037ac <UART_SetConfig+0x18c>
 800376a:	4b68      	ldr	r3, [pc, #416]	; (800390c <UART_SetConfig+0x2ec>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003774:	2b10      	cmp	r3, #16
 8003776:	d00f      	beq.n	8003798 <UART_SetConfig+0x178>
 8003778:	2b10      	cmp	r3, #16
 800377a:	d802      	bhi.n	8003782 <UART_SetConfig+0x162>
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <UART_SetConfig+0x16c>
 8003780:	e010      	b.n	80037a4 <UART_SetConfig+0x184>
 8003782:	2b20      	cmp	r3, #32
 8003784:	d005      	beq.n	8003792 <UART_SetConfig+0x172>
 8003786:	2b30      	cmp	r3, #48	; 0x30
 8003788:	d009      	beq.n	800379e <UART_SetConfig+0x17e>
 800378a:	e00b      	b.n	80037a4 <UART_SetConfig+0x184>
 800378c:	2300      	movs	r3, #0
 800378e:	76fb      	strb	r3, [r7, #27]
 8003790:	e088      	b.n	80038a4 <UART_SetConfig+0x284>
 8003792:	2302      	movs	r3, #2
 8003794:	76fb      	strb	r3, [r7, #27]
 8003796:	e085      	b.n	80038a4 <UART_SetConfig+0x284>
 8003798:	2304      	movs	r3, #4
 800379a:	76fb      	strb	r3, [r7, #27]
 800379c:	e082      	b.n	80038a4 <UART_SetConfig+0x284>
 800379e:	2308      	movs	r3, #8
 80037a0:	76fb      	strb	r3, [r7, #27]
 80037a2:	e07f      	b.n	80038a4 <UART_SetConfig+0x284>
 80037a4:	2310      	movs	r3, #16
 80037a6:	76fb      	strb	r3, [r7, #27]
 80037a8:	bf00      	nop
 80037aa:	e07b      	b.n	80038a4 <UART_SetConfig+0x284>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a59      	ldr	r2, [pc, #356]	; (8003918 <UART_SetConfig+0x2f8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d120      	bne.n	80037f8 <UART_SetConfig+0x1d8>
 80037b6:	4b55      	ldr	r3, [pc, #340]	; (800390c <UART_SetConfig+0x2ec>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d00f      	beq.n	80037e4 <UART_SetConfig+0x1c4>
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d802      	bhi.n	80037ce <UART_SetConfig+0x1ae>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <UART_SetConfig+0x1b8>
 80037cc:	e010      	b.n	80037f0 <UART_SetConfig+0x1d0>
 80037ce:	2b80      	cmp	r3, #128	; 0x80
 80037d0:	d005      	beq.n	80037de <UART_SetConfig+0x1be>
 80037d2:	2bc0      	cmp	r3, #192	; 0xc0
 80037d4:	d009      	beq.n	80037ea <UART_SetConfig+0x1ca>
 80037d6:	e00b      	b.n	80037f0 <UART_SetConfig+0x1d0>
 80037d8:	2300      	movs	r3, #0
 80037da:	76fb      	strb	r3, [r7, #27]
 80037dc:	e062      	b.n	80038a4 <UART_SetConfig+0x284>
 80037de:	2302      	movs	r3, #2
 80037e0:	76fb      	strb	r3, [r7, #27]
 80037e2:	e05f      	b.n	80038a4 <UART_SetConfig+0x284>
 80037e4:	2304      	movs	r3, #4
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	e05c      	b.n	80038a4 <UART_SetConfig+0x284>
 80037ea:	2308      	movs	r3, #8
 80037ec:	76fb      	strb	r3, [r7, #27]
 80037ee:	e059      	b.n	80038a4 <UART_SetConfig+0x284>
 80037f0:	2310      	movs	r3, #16
 80037f2:	76fb      	strb	r3, [r7, #27]
 80037f4:	bf00      	nop
 80037f6:	e055      	b.n	80038a4 <UART_SetConfig+0x284>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a47      	ldr	r2, [pc, #284]	; (800391c <UART_SetConfig+0x2fc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d124      	bne.n	800384c <UART_SetConfig+0x22c>
 8003802:	4b42      	ldr	r3, [pc, #264]	; (800390c <UART_SetConfig+0x2ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003810:	d012      	beq.n	8003838 <UART_SetConfig+0x218>
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	d802      	bhi.n	800381e <UART_SetConfig+0x1fe>
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <UART_SetConfig+0x20c>
 800381c:	e012      	b.n	8003844 <UART_SetConfig+0x224>
 800381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003822:	d006      	beq.n	8003832 <UART_SetConfig+0x212>
 8003824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003828:	d009      	beq.n	800383e <UART_SetConfig+0x21e>
 800382a:	e00b      	b.n	8003844 <UART_SetConfig+0x224>
 800382c:	2300      	movs	r3, #0
 800382e:	76fb      	strb	r3, [r7, #27]
 8003830:	e038      	b.n	80038a4 <UART_SetConfig+0x284>
 8003832:	2302      	movs	r3, #2
 8003834:	76fb      	strb	r3, [r7, #27]
 8003836:	e035      	b.n	80038a4 <UART_SetConfig+0x284>
 8003838:	2304      	movs	r3, #4
 800383a:	76fb      	strb	r3, [r7, #27]
 800383c:	e032      	b.n	80038a4 <UART_SetConfig+0x284>
 800383e:	2308      	movs	r3, #8
 8003840:	76fb      	strb	r3, [r7, #27]
 8003842:	e02f      	b.n	80038a4 <UART_SetConfig+0x284>
 8003844:	2310      	movs	r3, #16
 8003846:	76fb      	strb	r3, [r7, #27]
 8003848:	bf00      	nop
 800384a:	e02b      	b.n	80038a4 <UART_SetConfig+0x284>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2c      	ldr	r2, [pc, #176]	; (8003904 <UART_SetConfig+0x2e4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d124      	bne.n	80038a0 <UART_SetConfig+0x280>
 8003856:	4b2d      	ldr	r3, [pc, #180]	; (800390c <UART_SetConfig+0x2ec>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d012      	beq.n	800388c <UART_SetConfig+0x26c>
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d802      	bhi.n	8003872 <UART_SetConfig+0x252>
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <UART_SetConfig+0x260>
 8003870:	e012      	b.n	8003898 <UART_SetConfig+0x278>
 8003872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003876:	d006      	beq.n	8003886 <UART_SetConfig+0x266>
 8003878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800387c:	d009      	beq.n	8003892 <UART_SetConfig+0x272>
 800387e:	e00b      	b.n	8003898 <UART_SetConfig+0x278>
 8003880:	2300      	movs	r3, #0
 8003882:	76fb      	strb	r3, [r7, #27]
 8003884:	e00e      	b.n	80038a4 <UART_SetConfig+0x284>
 8003886:	2302      	movs	r3, #2
 8003888:	76fb      	strb	r3, [r7, #27]
 800388a:	e00b      	b.n	80038a4 <UART_SetConfig+0x284>
 800388c:	2304      	movs	r3, #4
 800388e:	76fb      	strb	r3, [r7, #27]
 8003890:	e008      	b.n	80038a4 <UART_SetConfig+0x284>
 8003892:	2308      	movs	r3, #8
 8003894:	76fb      	strb	r3, [r7, #27]
 8003896:	e005      	b.n	80038a4 <UART_SetConfig+0x284>
 8003898:	2310      	movs	r3, #16
 800389a:	76fb      	strb	r3, [r7, #27]
 800389c:	bf00      	nop
 800389e:	e001      	b.n	80038a4 <UART_SetConfig+0x284>
 80038a0:	2310      	movs	r3, #16
 80038a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a16      	ldr	r2, [pc, #88]	; (8003904 <UART_SetConfig+0x2e4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	f040 8087 	bne.w	80039be <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038b0:	7efb      	ldrb	r3, [r7, #27]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d836      	bhi.n	8003924 <UART_SetConfig+0x304>
 80038b6:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0x29c>)
 80038b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	08003925 	.word	0x08003925
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	08003925 	.word	0x08003925
 80038cc:	080038ef 	.word	0x080038ef
 80038d0:	08003925 	.word	0x08003925
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003925 	.word	0x08003925
 80038dc:	080038f7 	.word	0x080038f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe ff98 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80038e4:	6178      	str	r0, [r7, #20]
        break;
 80038e6:	e022      	b.n	800392e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e8:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <UART_SetConfig+0x300>)
 80038ea:	617b      	str	r3, [r7, #20]
        break;
 80038ec:	e01f      	b.n	800392e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ee:	f7fe fefb 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80038f2:	6178      	str	r0, [r7, #20]
        break;
 80038f4:	e01b      	b.n	800392e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fa:	617b      	str	r3, [r7, #20]
        break;
 80038fc:	e017      	b.n	800392e <UART_SetConfig+0x30e>
 80038fe:	bf00      	nop
 8003900:	efff69f3 	.word	0xefff69f3
 8003904:	40008000 	.word	0x40008000
 8003908:	40013800 	.word	0x40013800
 800390c:	40021000 	.word	0x40021000
 8003910:	40004400 	.word	0x40004400
 8003914:	40004800 	.word	0x40004800
 8003918:	40004c00 	.word	0x40004c00
 800391c:	40005000 	.word	0x40005000
 8003920:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	76bb      	strb	r3, [r7, #26]
        break;
 800392c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 80f1 	beq.w	8003b18 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	429a      	cmp	r2, r3
 8003944:	d305      	bcc.n	8003952 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	429a      	cmp	r2, r3
 8003950:	d902      	bls.n	8003958 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	76bb      	strb	r3, [r7, #26]
 8003956:	e0df      	b.n	8003b18 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	0214      	lsls	r4, r2, #8
 800396a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800396e:	020b      	lsls	r3, r1, #8
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6852      	ldr	r2, [r2, #4]
 8003974:	0852      	lsrs	r2, r2, #1
 8003976:	4611      	mov	r1, r2
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	eb13 0b01 	adds.w	fp, r3, r1
 8003980:	eb44 0c02 	adc.w	ip, r4, r2
 8003984:	4658      	mov	r0, fp
 8003986:	4661      	mov	r1, ip
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	461a      	mov	r2, r3
 8003992:	4623      	mov	r3, r4
 8003994:	f7fc fc26 	bl	80001e4 <__aeabi_uldivmod>
 8003998:	4603      	mov	r3, r0
 800399a:	460c      	mov	r4, r1
 800399c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a4:	d308      	bcc.n	80039b8 <UART_SetConfig+0x398>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ac:	d204      	bcs.n	80039b8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	e0af      	b.n	8003b18 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	76bb      	strb	r3, [r7, #26]
 80039bc:	e0ac      	b.n	8003b18 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c6:	d15b      	bne.n	8003a80 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80039c8:	7efb      	ldrb	r3, [r7, #27]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d827      	bhi.n	8003a1e <UART_SetConfig+0x3fe>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x3b4>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a1f 	.word	0x08003a1f
 80039e4:	08003a0f 	.word	0x08003a0f
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a1f 	.word	0x08003a1f
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	08003a17 	.word	0x08003a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7fe ff0c 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 80039fc:	6178      	str	r0, [r7, #20]
        break;
 80039fe:	e013      	b.n	8003a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe ff1e 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8003a04:	6178      	str	r0, [r7, #20]
        break;
 8003a06:	e00f      	b.n	8003a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <UART_SetConfig+0x510>)
 8003a0a:	617b      	str	r3, [r7, #20]
        break;
 8003a0c:	e00c      	b.n	8003a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7fe fe6b 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8003a12:	6178      	str	r0, [r7, #20]
        break;
 8003a14:	e008      	b.n	8003a28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	617b      	str	r3, [r7, #20]
        break;
 8003a1c:	e004      	b.n	8003a28 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	76bb      	strb	r3, [r7, #26]
        break;
 8003a26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d074      	beq.n	8003b18 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005a      	lsls	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b0f      	cmp	r3, #15
 8003a4a:	d916      	bls.n	8003a7a <UART_SetConfig+0x45a>
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d212      	bcs.n	8003a7a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f023 030f 	bic.w	r3, r3, #15
 8003a5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	89fa      	ldrh	r2, [r7, #14]
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	e04e      	b.n	8003b18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	76bb      	strb	r3, [r7, #26]
 8003a7e:	e04b      	b.n	8003b18 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a80:	7efb      	ldrb	r3, [r7, #27]
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d827      	bhi.n	8003ad6 <UART_SetConfig+0x4b6>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x46c>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac7 	.word	0x08003ac7
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ad7 	.word	0x08003ad7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe feb0 	bl	8002814 <HAL_RCC_GetPCLK1Freq>
 8003ab4:	6178      	str	r0, [r7, #20]
        break;
 8003ab6:	e013      	b.n	8003ae0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fec2 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8003abc:	6178      	str	r0, [r7, #20]
        break;
 8003abe:	e00f      	b.n	8003ae0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b1b      	ldr	r3, [pc, #108]	; (8003b30 <UART_SetConfig+0x510>)
 8003ac2:	617b      	str	r3, [r7, #20]
        break;
 8003ac4:	e00c      	b.n	8003ae0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fe0f 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 8003aca:	6178      	str	r0, [r7, #20]
        break;
 8003acc:	e008      	b.n	8003ae0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	617b      	str	r3, [r7, #20]
        break;
 8003ad4:	e004      	b.n	8003ae0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	76bb      	strb	r3, [r7, #26]
        break;
 8003ade:	bf00      	nop
    }

    if (pclk != 0U)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d018      	beq.n	8003b18 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	085a      	lsrs	r2, r3, #1
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	441a      	add	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	d908      	bls.n	8003b14 <UART_SetConfig+0x4f4>
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d204      	bcs.n	8003b14 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	e001      	b.n	8003b18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b24:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3720      	adds	r7, #32
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003b30:	00f42400 	.word	0x00f42400

08003b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00a      	beq.n	8003b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d01a      	beq.n	8003c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c32:	d10a      	bne.n	8003c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c86:	f7fc ff95 	bl	8000bb4 <HAL_GetTick>
 8003c8a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d10e      	bne.n	8003cb8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f82a 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e020      	b.n	8003cfa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d10e      	bne.n	8003ce4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f814 	bl	8003d02 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e00a      	b.n	8003cfa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d12:	e05d      	b.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1a:	d059      	beq.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fc ff4a 	bl	8000bb4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11b      	bne.n	8003d6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d40:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e042      	b.n	8003df0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02b      	beq.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	d123      	bne.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003da0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e00f      	b.n	8003df0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d092      	beq.n	8003d14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df8:	b084      	sub	sp, #16
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	f107 001c 	add.w	r0, r7, #28
 8003e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d122      	bne.n	8003e56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa30 	bl	80042b0 <USB_CoreReset>
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	e01a      	b.n	8003e8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa24 	bl	80042b0 <USB_CoreReset>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e7e:	e005      	b.n	8003e8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e98:	b004      	add	sp, #16
 8003e9a:	4770      	bx	lr

08003e9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 0201 	bic.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d106      	bne.n	8003eea <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
 8003ee8:	e00b      	b.n	8003f02 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e001      	b.n	8003f02 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e003      	b.n	8003f0a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003f02:	2032      	movs	r0, #50	; 0x32
 8003f04:	f7fc fe62 	bl	8000bcc <HAL_Delay>

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f14:	b084      	sub	sp, #16
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e009      	b.n	8003f48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3340      	adds	r3, #64	; 0x40
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3301      	adds	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	2b0e      	cmp	r3, #14
 8003f4c:	d9f2      	bls.n	8003f34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d11c      	bne.n	8003f8e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e005      	b.n	8003f9a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fac:	4619      	mov	r1, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	680b      	ldr	r3, [r1, #0]
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fba:	2103      	movs	r1, #3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f93d 	bl	800423c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8f1 	bl	80041ac <USB_FlushTxFifo>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f90f 	bl	80041f8 <USB_FlushRxFifo>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	461a      	mov	r2, r3
 8004004:	2300      	movs	r3, #0
 8004006:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e043      	b.n	8004096 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004024:	d118      	bne.n	8004058 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004038:	461a      	mov	r2, r3
 800403a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e013      	b.n	800406a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e008      	b.n	800406a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	461a      	mov	r2, r3
 8004066:	2300      	movs	r3, #0
 8004068:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	461a      	mov	r2, r3
 8004078:	2300      	movs	r3, #0
 800407a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	461a      	mov	r2, r3
 800408a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800408e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	3301      	adds	r3, #1
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d3b7      	bcc.n	800400e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	e043      	b.n	800412c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ba:	d118      	bne.n	80040ee <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	461a      	mov	r2, r3
 80040d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e013      	b.n	8004100 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e008      	b.n	8004100 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fa:	461a      	mov	r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	461a      	mov	r2, r3
 8004120:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004124:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	3301      	adds	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d3b7      	bcc.n	80040a4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004146:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004154:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f043 0210 	orr.w	r2, r3, #16
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <USB_DevInit+0x294>)
 8004168:	4313      	orrs	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800416e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f043 0208 	orr.w	r2, r3, #8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800418e:	f043 0304 	orr.w	r3, r3, #4
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041a2:	b004      	add	sp, #16
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	803c3800 	.word	0x803c3800

080041ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	019b      	lsls	r3, r3, #6
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3301      	adds	r3, #1
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <USB_FlushTxFifo+0x48>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e006      	b.n	80041e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d0f0      	beq.n	80041c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	00030d40 	.word	0x00030d40

080041f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2210      	movs	r2, #16
 8004208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3301      	adds	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <USB_FlushRxFifo+0x40>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e006      	b.n	800422a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d0f0      	beq.n	800420a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	00030d40 	.word	0x00030d40

0800423c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004288:	f023 0303 	bic.w	r3, r3, #3
 800428c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3301      	adds	r3, #1
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <USB_CoreReset+0x64>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e01b      	b.n	8004306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	daf2      	bge.n	80042bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <USB_CoreReset+0x64>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e006      	b.n	8004306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d0f0      	beq.n	80042e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	00030d40 	.word	0x00030d40

08004318 <UnityPrintChar>:
 *-----------------------------------------------*/

/*-----------------------------------------------*/
/* Local helper function to print characters. */
static void UnityPrintChar(const char* pch)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
    /* printable characters plus CR & LF are printed */
    if ((*pch <= 126) && (*pch >= 32))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b7e      	cmp	r3, #126	; 0x7e
 8004326:	d809      	bhi.n	800433c <UnityPrintChar+0x24>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b1f      	cmp	r3, #31
 800432e:	d905      	bls.n	800433c <UnityPrintChar+0x24>
    {
        UNITY_OUTPUT_CHAR(*pch);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 ff6f 	bl	8005218 <target_putc>
    {
        UNITY_OUTPUT_CHAR('\\');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
    }
}
 800433a:	e021      	b.n	8004380 <UnityPrintChar+0x68>
    else if (*pch == 13)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b0d      	cmp	r3, #13
 8004342:	d106      	bne.n	8004352 <UnityPrintChar+0x3a>
        UNITY_OUTPUT_CHAR('\\');
 8004344:	205c      	movs	r0, #92	; 0x5c
 8004346:	f000 ff67 	bl	8005218 <target_putc>
        UNITY_OUTPUT_CHAR('r');
 800434a:	2072      	movs	r0, #114	; 0x72
 800434c:	f000 ff64 	bl	8005218 <target_putc>
}
 8004350:	e016      	b.n	8004380 <UnityPrintChar+0x68>
    else if (*pch == 10)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b0a      	cmp	r3, #10
 8004358:	d106      	bne.n	8004368 <UnityPrintChar+0x50>
        UNITY_OUTPUT_CHAR('\\');
 800435a:	205c      	movs	r0, #92	; 0x5c
 800435c:	f000 ff5c 	bl	8005218 <target_putc>
        UNITY_OUTPUT_CHAR('n');
 8004360:	206e      	movs	r0, #110	; 0x6e
 8004362:	f000 ff59 	bl	8005218 <target_putc>
}
 8004366:	e00b      	b.n	8004380 <UnityPrintChar+0x68>
        UNITY_OUTPUT_CHAR('\\');
 8004368:	205c      	movs	r0, #92	; 0x5c
 800436a:	f000 ff55 	bl	8005218 <target_putc>
        UNITY_OUTPUT_CHAR('x');
 800436e:	2078      	movs	r0, #120	; 0x78
 8004370:	f000 ff52 	bl	8005218 <target_putc>
        UnityPrintNumberHex((UNITY_UINT)*pch, 2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2102      	movs	r1, #2
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f8cc 	bl	8004518 <UnityPrintNumberHex>
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UnityPrint>:
}
#endif

/*-----------------------------------------------*/
void UnityPrint(const char* string)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    const char* pch = string;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	60fb      	str	r3, [r7, #12]

    if (pch != NULL)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UnityPrint+0x28>
    {
        while (*pch)
 800439a:	e005      	b.n	80043a8 <UnityPrint+0x20>
            {
                pch += UnityPrintAnsiEscapeString(pch);
                continue;
            }
#endif
            UnityPrintChar(pch);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff ffbb 	bl	8004318 <UnityPrintChar>
            pch++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
        while (*pch)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f5      	bne.n	800439c <UnityPrint+0x14>
        }
    }
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UnityPrintNumberByStyle>:
    }
}

/*-----------------------------------------------*/
void UnityPrintNumberByStyle(const UNITY_INT number, const UNITY_DISPLAY_STYLE_T style)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d038      	beq.n	8004440 <UnityPrintNumberByStyle+0x88>
    {
        if (style == UNITY_DISPLAY_STYLE_CHAR)
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	2b91      	cmp	r3, #145	; 0x91
 80043d2:	d131      	bne.n	8004438 <UnityPrintNumberByStyle+0x80>
        {
            /* printable characters plus CR & LF are printed */
            UNITY_OUTPUT_CHAR('\'');
 80043d4:	2027      	movs	r0, #39	; 0x27
 80043d6:	f000 ff1f 	bl	8005218 <target_putc>
            if ((number <= 126) && (number >= 32))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b7e      	cmp	r3, #126	; 0x7e
 80043de:	dc08      	bgt.n	80043f2 <UnityPrintNumberByStyle+0x3a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b1f      	cmp	r3, #31
 80043e4:	dd05      	ble.n	80043f2 <UnityPrintNumberByStyle+0x3a>
            {
                UNITY_OUTPUT_CHAR((int)number);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ff14 	bl	8005218 <target_putc>
 80043f0:	e01e      	b.n	8004430 <UnityPrintNumberByStyle+0x78>
            }
            /* write escaped carriage returns */
            else if (number == 13)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b0d      	cmp	r3, #13
 80043f6:	d106      	bne.n	8004406 <UnityPrintNumberByStyle+0x4e>
            {
                UNITY_OUTPUT_CHAR('\\');
 80043f8:	205c      	movs	r0, #92	; 0x5c
 80043fa:	f000 ff0d 	bl	8005218 <target_putc>
                UNITY_OUTPUT_CHAR('r');
 80043fe:	2072      	movs	r0, #114	; 0x72
 8004400:	f000 ff0a 	bl	8005218 <target_putc>
 8004404:	e014      	b.n	8004430 <UnityPrintNumberByStyle+0x78>
            }
            /* write escaped line feeds */
            else if (number == 10)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b0a      	cmp	r3, #10
 800440a:	d106      	bne.n	800441a <UnityPrintNumberByStyle+0x62>
            {
                UNITY_OUTPUT_CHAR('\\');
 800440c:	205c      	movs	r0, #92	; 0x5c
 800440e:	f000 ff03 	bl	8005218 <target_putc>
                UNITY_OUTPUT_CHAR('n');
 8004412:	206e      	movs	r0, #110	; 0x6e
 8004414:	f000 ff00 	bl	8005218 <target_putc>
 8004418:	e00a      	b.n	8004430 <UnityPrintNumberByStyle+0x78>
            }
            /* unprintable characters are shown as codes */
            else
            {
                UNITY_OUTPUT_CHAR('\\');
 800441a:	205c      	movs	r0, #92	; 0x5c
 800441c:	f000 fefc 	bl	8005218 <target_putc>
                UNITY_OUTPUT_CHAR('x');
 8004420:	2078      	movs	r0, #120	; 0x78
 8004422:	f000 fef9 	bl	8005218 <target_putc>
                UnityPrintNumberHex((UNITY_UINT)number, 2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f874 	bl	8004518 <UnityPrintNumberHex>
            }
            UNITY_OUTPUT_CHAR('\'');
 8004430:	2027      	movs	r0, #39	; 0x27
 8004432:	f000 fef1 	bl	8005218 <target_putc>
    {
        UNITY_OUTPUT_CHAR('0');
        UNITY_OUTPUT_CHAR('x');
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
    }
}
 8004436:	e01e      	b.n	8004476 <UnityPrintNumberByStyle+0xbe>
            UnityPrintNumber(number);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f820 	bl	800447e <UnityPrintNumber>
}
 800443e:	e01a      	b.n	8004476 <UnityPrintNumberByStyle+0xbe>
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d004      	beq.n	8004454 <UnityPrintNumberByStyle+0x9c>
        UnityPrintNumberUnsigned((UNITY_UINT)number);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 f82d 	bl	80044ac <UnityPrintNumberUnsigned>
}
 8004452:	e010      	b.n	8004476 <UnityPrintNumberByStyle+0xbe>
        UNITY_OUTPUT_CHAR('0');
 8004454:	2030      	movs	r0, #48	; 0x30
 8004456:	f000 fedf 	bl	8005218 <target_putc>
        UNITY_OUTPUT_CHAR('x');
 800445a:	2078      	movs	r0, #120	; 0x78
 800445c:	f000 fedc 	bl	8005218 <target_putc>
        UnityPrintNumberHex((UNITY_UINT)number, (char)((style & 0xF) * 2));
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	b2db      	uxtb	r3, r3
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	b2db      	uxtb	r3, r3
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f000 f851 	bl	8004518 <UnityPrintNumberHex>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UnityPrintNumber>:

/*-----------------------------------------------*/
void UnityPrintNumber(const UNITY_INT number_to_print)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
    UNITY_UINT number = (UNITY_UINT)number_to_print;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60fb      	str	r3, [r7, #12]

    if (number_to_print < 0)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	da05      	bge.n	800449c <UnityPrintNumber+0x1e>
    {
        /* A negative number, including MIN negative */
        UNITY_OUTPUT_CHAR('-');
 8004490:	202d      	movs	r0, #45	; 0x2d
 8004492:	f000 fec1 	bl	8005218 <target_putc>
        number = (~number) + 1;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	425b      	negs	r3, r3
 800449a:	60fb      	str	r3, [r7, #12]
    }
    UnityPrintNumberUnsigned(number);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f805 	bl	80044ac <UnityPrintNumberUnsigned>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
	...

080044ac <UnityPrintNumberUnsigned>:

/*-----------------------------------------------
 * basically do an itoa using as little ram as possible */
void UnityPrintNumberUnsigned(const UNITY_UINT number)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    UNITY_UINT divisor = 1;
 80044b4:	2301      	movs	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]

    /* figure out initial divisor */
    while (number / divisor > 9)
 80044b8:	e005      	b.n	80044c6 <UnityPrintNumberUnsigned+0x1a>
    {
        divisor *= 10;
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
    while (number / divisor > 9)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	d8f3      	bhi.n	80044ba <UnityPrintNumberUnsigned+0xe>
    }

    /* now mod and print, then divide divisor */
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80044da:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <UnityPrintNumberUnsigned+0x68>)
 80044dc:	fba3 2301 	umull	r2, r3, r3, r1
 80044e0:	08da      	lsrs	r2, r3, #3
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	1aca      	subs	r2, r1, r3
 80044ec:	b2d3      	uxtb	r3, r2
 80044ee:	3330      	adds	r3, #48	; 0x30
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fe90 	bl	8005218 <target_putc>
        divisor /= 10;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a06      	ldr	r2, [pc, #24]	; (8004514 <UnityPrintNumberUnsigned+0x68>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	08db      	lsrs	r3, r3, #3
 8004502:	60fb      	str	r3, [r7, #12]
    } while (divisor > 0);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <UnityPrintNumberUnsigned+0x26>
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	cccccccd 	.word	0xcccccccd

08004518 <UnityPrintNumberHex>:

/*-----------------------------------------------*/
void UnityPrintNumberHex(const UNITY_UINT number, const char nibbles_to_print)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
    int nibble;
    char nibbles = nibbles_to_print;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	73fb      	strb	r3, [r7, #15]

    if ((unsigned)nibbles > UNITY_MAX_NIBBLES)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b08      	cmp	r3, #8
 800452c:	d91f      	bls.n	800456e <UnityPrintNumberHex+0x56>
    {
        nibbles = UNITY_MAX_NIBBLES;
 800452e:	2308      	movs	r3, #8
 8004530:	73fb      	strb	r3, [r7, #15]
    }

    while (nibbles > 0)
 8004532:	e01c      	b.n	800456e <UnityPrintNumberHex+0x56>
    {
        nibbles--;
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	3b01      	subs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
        nibble = (int)(number >> (nibbles * 4)) & 0x0F;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	60bb      	str	r3, [r7, #8]
        if (nibble <= 9)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b09      	cmp	r3, #9
 800454e:	dc07      	bgt.n	8004560 <UnityPrintNumberHex+0x48>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	3330      	adds	r3, #48	; 0x30
 8004556:	b2db      	uxtb	r3, r3
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fe5d 	bl	8005218 <target_putc>
 800455e:	e006      	b.n	800456e <UnityPrintNumberHex+0x56>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	3337      	adds	r3, #55	; 0x37
 8004566:	b2db      	uxtb	r3, r3
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fe55 	bl	8005218 <target_putc>
    while (nibbles > 0)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1df      	bne.n	8004534 <UnityPrintNumberHex+0x1c>
        }
    }
}
 8004574:	bf00      	nop
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <UnityTestResultsBegin>:
}
#endif /* ! UNITY_EXCLUDE_FLOAT_PRINT */

/*-----------------------------------------------*/
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
    UnityPrintNumber((UNITY_INT)line);
    UNITY_OUTPUT_CHAR(' ');
    UnityPrint(Unity.CurrentTestName);
    UNITY_OUTPUT_CHAR(':');
#else
    UnityPrint(file);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fefe 	bl	8004388 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 800458c:	203a      	movs	r0, #58	; 0x3a
 800458e:	f000 fe43 	bl	8005218 <target_putc>
    UnityPrintNumber((UNITY_INT)line);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff72 	bl	800447e <UnityPrintNumber>
    UNITY_OUTPUT_CHAR(':');
 800459a:	203a      	movs	r0, #58	; 0x3a
 800459c:	f000 fe3c 	bl	8005218 <target_putc>
    UnityPrint(Unity.CurrentTestName);
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <UnityTestResultsBegin+0x3c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff feef 	bl	8004388 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80045aa:	203a      	movs	r0, #58	; 0x3a
 80045ac:	f000 fe34 	bl	8005218 <target_putc>
#endif
#endif
#endif
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000054 	.word	0x20000054

080045bc <UnityTestResultsFailBegin>:

/*-----------------------------------------------*/
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
    UnityTestResultsBegin(Unity.TestFile, line);
 80045c4:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <UnityTestResultsFailBegin+0x28>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff ffd6 	bl	800457c <UnityTestResultsBegin>
    UnityPrint(UnityStrFail);
 80045d0:	4805      	ldr	r0, [pc, #20]	; (80045e8 <UnityTestResultsFailBegin+0x2c>)
 80045d2:	f7ff fed9 	bl	8004388 <UnityPrint>
    UNITY_OUTPUT_CHAR(':');
 80045d6:	203a      	movs	r0, #58	; 0x3a
 80045d8:	f000 fe1e 	bl	8005218 <target_putc>
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20000054 	.word	0x20000054
 80045e8:	080056f8 	.word	0x080056f8

080045ec <UnityConcludeTest>:

/*-----------------------------------------------*/
void UnityConcludeTest(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
    if (Unity.CurrentTestIgnored)
 80045f0:	4b15      	ldr	r3, [pc, #84]	; (8004648 <UnityConcludeTest+0x5c>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <UnityConcludeTest+0x18>
    {
        Unity.TestIgnores++;
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <UnityConcludeTest+0x5c>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	3301      	adds	r3, #1
 80045fe:	4a12      	ldr	r2, [pc, #72]	; (8004648 <UnityConcludeTest+0x5c>)
 8004600:	61d3      	str	r3, [r2, #28]
 8004602:	e014      	b.n	800462e <UnityConcludeTest+0x42>
    }
    else if (!Unity.CurrentTestFailed)
 8004604:	4b10      	ldr	r3, [pc, #64]	; (8004648 <UnityConcludeTest+0x5c>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <UnityConcludeTest+0x38>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <UnityConcludeTest+0x5c>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <UnityConcludeTest+0x5c>)
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7ff ffb0 	bl	800457c <UnityTestResultsBegin>
        UnityPrint(UnityStrPass);
 800461c:	480b      	ldr	r0, [pc, #44]	; (800464c <UnityConcludeTest+0x60>)
 800461e:	f7ff feb3 	bl	8004388 <UnityPrint>
 8004622:	e004      	b.n	800462e <UnityConcludeTest+0x42>
    }
    else
    {
        Unity.TestFailures++;
 8004624:	4b08      	ldr	r3, [pc, #32]	; (8004648 <UnityConcludeTest+0x5c>)
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	3301      	adds	r3, #1
 800462a:	4a07      	ldr	r2, [pc, #28]	; (8004648 <UnityConcludeTest+0x5c>)
 800462c:	6193      	str	r3, [r2, #24]
    }

    Unity.CurrentTestFailed = 0;
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <UnityConcludeTest+0x5c>)
 8004630:	2200      	movs	r2, #0
 8004632:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <UnityConcludeTest+0x5c>)
 8004636:	2200      	movs	r2, #0
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
    UNITY_PRINT_EXEC_TIME();
    UNITY_PRINT_EOL();
 800463a:	200a      	movs	r0, #10
 800463c:	f000 fdec 	bl	8005218 <target_putc>
    UNITY_FLUSH_CALL();
 8004640:	f000 fe02 	bl	8005248 <target_flush_putc>
}
 8004644:	bf00      	nop
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000054 	.word	0x20000054
 800464c:	080056f0 	.word	0x080056f0

08004650 <UnityAddMsgIfSpecified>:

/*-----------------------------------------------*/
static void UnityAddMsgIfSpecified(const char* msg)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    if (msg)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d020      	beq.n	80046a0 <UnityAddMsgIfSpecified+0x50>
    {
        UnityPrint(UnityStrSpacer);
 800465e:	4812      	ldr	r0, [pc, #72]	; (80046a8 <UnityAddMsgIfSpecified+0x58>)
 8004660:	f7ff fe92 	bl	8004388 <UnityPrint>

#ifdef UNITY_PRINT_TEST_CONTEXT
        UNITY_PRINT_TEST_CONTEXT();
#endif
#ifndef UNITY_EXCLUDE_DETAILS
        if (Unity.CurrentDetail1)
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <UnityAddMsgIfSpecified+0x5c>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d016      	beq.n	800469a <UnityAddMsgIfSpecified+0x4a>
        {
            UnityPrint(UnityStrDetail1Name);
 800466c:	4810      	ldr	r0, [pc, #64]	; (80046b0 <UnityAddMsgIfSpecified+0x60>)
 800466e:	f7ff fe8b 	bl	8004388 <UnityPrint>
            UnityPrint(Unity.CurrentDetail1);
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <UnityAddMsgIfSpecified+0x5c>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fe86 	bl	8004388 <UnityPrint>
            if (Unity.CurrentDetail2)
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <UnityAddMsgIfSpecified+0x5c>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <UnityAddMsgIfSpecified+0x44>
            {
                UnityPrint(UnityStrDetail2Name);
 8004684:	480b      	ldr	r0, [pc, #44]	; (80046b4 <UnityAddMsgIfSpecified+0x64>)
 8004686:	f7ff fe7f 	bl	8004388 <UnityPrint>
                UnityPrint(Unity.CurrentDetail2);
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <UnityAddMsgIfSpecified+0x5c>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff fe7a 	bl	8004388 <UnityPrint>
            }
            UnityPrint(UnityStrSpacer);
 8004694:	4804      	ldr	r0, [pc, #16]	; (80046a8 <UnityAddMsgIfSpecified+0x58>)
 8004696:	f7ff fe77 	bl	8004388 <UnityPrint>
        }
#endif
        UnityPrint(msg);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff fe74 	bl	8004388 <UnityPrint>
    }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	08005700 	.word	0x08005700
 80046ac:	20000054 	.word	0x20000054
 80046b0:	080057a4 	.word	0x080057a4
 80046b4:	080057b0 	.word	0x080057b0

080046b8 <UnityAssertEqualNumber>:
void UnityAssertEqualNumber(const UNITY_INT expected,
                            const UNITY_INT actual,
                            const char* msg,
                            const UNITY_LINE_TYPE lineNumber,
                            const UNITY_DISPLAY_STYLE_T style)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
 80046c4:	603b      	str	r3, [r7, #0]
    RETURN_IF_FAIL_OR_IGNORE;
 80046c6:	4b19      	ldr	r3, [pc, #100]	; (800472c <UnityAssertEqualNumber+0x74>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <UnityAssertEqualNumber+0x1e>
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <UnityAssertEqualNumber+0x74>)
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <UnityAssertEqualNumber+0x26>
 80046d6:	2101      	movs	r1, #1
 80046d8:	4815      	ldr	r0, [pc, #84]	; (8004730 <UnityAssertEqualNumber+0x78>)
 80046da:	f7fb fd7b 	bl	80001d4 <longjmp>

    if (expected != actual)
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d01e      	beq.n	8004724 <UnityAssertEqualNumber+0x6c>
    {
        UnityTestResultsFailBegin(lineNumber);
 80046e6:	6838      	ldr	r0, [r7, #0]
 80046e8:	f7ff ff68 	bl	80045bc <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 80046ec:	4811      	ldr	r0, [pc, #68]	; (8004734 <UnityAssertEqualNumber+0x7c>)
 80046ee:	f7ff fe4b 	bl	8004388 <UnityPrint>
        UnityPrintNumberByStyle(expected, style);
 80046f2:	7e3b      	ldrb	r3, [r7, #24]
 80046f4:	4619      	mov	r1, r3
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff fe5e 	bl	80043b8 <UnityPrintNumberByStyle>
        UnityPrint(UnityStrWas);
 80046fc:	480e      	ldr	r0, [pc, #56]	; (8004738 <UnityAssertEqualNumber+0x80>)
 80046fe:	f7ff fe43 	bl	8004388 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 8004702:	7e3b      	ldrb	r3, [r7, #24]
 8004704:	4619      	mov	r1, r3
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	f7ff fe56 	bl	80043b8 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff ff9f 	bl	8004650 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <UnityAssertEqualNumber+0x74>)
 8004714:	2201      	movs	r2, #1
 8004716:	621a      	str	r2, [r3, #32]
 8004718:	f000 fd96 	bl	8005248 <target_flush_putc>
 800471c:	2101      	movs	r1, #1
 800471e:	4804      	ldr	r0, [pc, #16]	; (8004730 <UnityAssertEqualNumber+0x78>)
 8004720:	f7fb fd58 	bl	80001d4 <longjmp>
    }
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000054 	.word	0x20000054
 8004730:	2000007c 	.word	0x2000007c
 8004734:	08005704 	.word	0x08005704
 8004738:	08005710 	.word	0x08005710

0800473c <UnityAssertGreaterOrLessOrEqualNumber>:
                                           const UNITY_INT actual,
                                           const UNITY_COMPARISON_T compare,
                                           const char *msg,
                                           const UNITY_LINE_TYPE lineNumber,
                                           const UNITY_DISPLAY_STYLE_T style)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	71fb      	strb	r3, [r7, #7]
    int failed = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
    RETURN_IF_FAIL_OR_IGNORE;
 8004750:	4b48      	ldr	r3, [pc, #288]	; (8004874 <UnityAssertGreaterOrLessOrEqualNumber+0x138>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <UnityAssertGreaterOrLessOrEqualNumber+0x24>
 8004758:	4b46      	ldr	r3, [pc, #280]	; (8004874 <UnityAssertGreaterOrLessOrEqualNumber+0x138>)
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <UnityAssertGreaterOrLessOrEqualNumber+0x2c>
 8004760:	2101      	movs	r1, #1
 8004762:	4845      	ldr	r0, [pc, #276]	; (8004878 <UnityAssertGreaterOrLessOrEqualNumber+0x13c>)
 8004764:	f7fb fd36 	bl	80001d4 <longjmp>

    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	429a      	cmp	r2, r3
 800476e:	d104      	bne.n	800477a <UnityAssertGreaterOrLessOrEqualNumber+0x3e>
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d177      	bne.n	800486a <UnityAssertGreaterOrLessOrEqualNumber+0x12e>
    if ((threshold == actual))                               { failed = 1; }
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	d101      	bne.n	8004786 <UnityAssertGreaterOrLessOrEqualNumber+0x4a>
 8004782:	2301      	movs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
 8004786:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <UnityAssertGreaterOrLessOrEqualNumber+0x84>
    {
        if ((actual > threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	429a      	cmp	r2, r3
 8004798:	dd06      	ble.n	80047a8 <UnityAssertGreaterOrLessOrEqualNumber+0x6c>
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <UnityAssertGreaterOrLessOrEqualNumber+0x6c>
 80047a4:	2301      	movs	r3, #1
 80047a6:	617b      	str	r3, [r7, #20]
        if ((actual < threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	da1d      	bge.n	80047ec <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d018      	beq.n	80047ec <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 80047ba:	2301      	movs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	e015      	b.n	80047ec <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
    }
    else /* UINT or HEX */
    {
        if (((UNITY_UINT)actual > (UNITY_UINT)threshold) && (compare & UNITY_SMALLER_THAN)) { failed = 1; }
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d906      	bls.n	80047d6 <UnityAssertGreaterOrLessOrEqualNumber+0x9a>
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <UnityAssertGreaterOrLessOrEqualNumber+0x9a>
 80047d2:	2301      	movs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
        if (((UNITY_UINT)actual < (UNITY_UINT)threshold) && (compare & UNITY_GREATER_THAN)) { failed = 1; }
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d206      	bcs.n	80047ec <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 80047de:	79fb      	ldrb	r3, [r7, #7]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <UnityAssertGreaterOrLessOrEqualNumber+0xb0>
 80047e8:	2301      	movs	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
    }

    if (failed)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d03c      	beq.n	800486c <UnityAssertGreaterOrLessOrEqualNumber+0x130>
    {
        UnityTestResultsFailBegin(lineNumber);
 80047f2:	6a38      	ldr	r0, [r7, #32]
 80047f4:	f7ff fee2 	bl	80045bc <UnityTestResultsFailBegin>
        UnityPrint(UnityStrExpected);
 80047f8:	4820      	ldr	r0, [pc, #128]	; (800487c <UnityAssertGreaterOrLessOrEqualNumber+0x140>)
 80047fa:	f7ff fdc5 	bl	8004388 <UnityPrint>
        UnityPrintNumberByStyle(actual, style);
 80047fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004802:	4619      	mov	r1, r3
 8004804:	68b8      	ldr	r0, [r7, #8]
 8004806:	f7ff fdd7 	bl	80043b8 <UnityPrintNumberByStyle>
        if (compare & UNITY_GREATER_THAN) { UnityPrint(UnityStrGt);       }
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <UnityAssertGreaterOrLessOrEqualNumber+0xde>
 8004814:	481a      	ldr	r0, [pc, #104]	; (8004880 <UnityAssertGreaterOrLessOrEqualNumber+0x144>)
 8004816:	f7ff fdb7 	bl	8004388 <UnityPrint>
        if (compare & UNITY_SMALLER_THAN) { UnityPrint(UnityStrLt);       }
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <UnityAssertGreaterOrLessOrEqualNumber+0xee>
 8004824:	4817      	ldr	r0, [pc, #92]	; (8004884 <UnityAssertGreaterOrLessOrEqualNumber+0x148>)
 8004826:	f7ff fdaf 	bl	8004388 <UnityPrint>
        if (compare & UNITY_EQUAL_TO)     { UnityPrint(UnityStrOrEqual);  }
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <UnityAssertGreaterOrLessOrEqualNumber+0xfe>
 8004834:	4814      	ldr	r0, [pc, #80]	; (8004888 <UnityAssertGreaterOrLessOrEqualNumber+0x14c>)
 8004836:	f7ff fda7 	bl	8004388 <UnityPrint>
        if (compare == UNITY_NOT_EQUAL)   { UnityPrint(UnityStrNotEqual); }
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d102      	bne.n	8004846 <UnityAssertGreaterOrLessOrEqualNumber+0x10a>
 8004840:	4812      	ldr	r0, [pc, #72]	; (800488c <UnityAssertGreaterOrLessOrEqualNumber+0x150>)
 8004842:	f7ff fda1 	bl	8004388 <UnityPrint>
        UnityPrintNumberByStyle(threshold, style);
 8004846:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800484a:	4619      	mov	r1, r3
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff fdb3 	bl	80043b8 <UnityPrintNumberByStyle>
        UnityAddMsgIfSpecified(msg);
 8004852:	6838      	ldr	r0, [r7, #0]
 8004854:	f7ff fefc 	bl	8004650 <UnityAddMsgIfSpecified>
        UNITY_FAIL_AND_BAIL;
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <UnityAssertGreaterOrLessOrEqualNumber+0x138>)
 800485a:	2201      	movs	r2, #1
 800485c:	621a      	str	r2, [r3, #32]
 800485e:	f000 fcf3 	bl	8005248 <target_flush_putc>
 8004862:	2101      	movs	r1, #1
 8004864:	4804      	ldr	r0, [pc, #16]	; (8004878 <UnityAssertGreaterOrLessOrEqualNumber+0x13c>)
 8004866:	f7fb fcb5 	bl	80001d4 <longjmp>
    if ((threshold == actual) && (compare & UNITY_EQUAL_TO)) { return; }
 800486a:	bf00      	nop
    }
}
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000054 	.word	0x20000054
 8004878:	2000007c 	.word	0x2000007c
 800487c:	08005704 	.word	0x08005704
 8004880:	08005718 	.word	0x08005718
 8004884:	08005730 	.word	0x08005730
 8004888:	08005744 	.word	0x08005744
 800488c:	08005754 	.word	0x08005754

08004890 <UnityDefaultTestRun>:

/*-----------------------------------------------*/
/* If we have not defined our own test runner, then include our default test runner to make life easier */
#ifndef UNITY_SKIP_DEFAULT_RUNNER
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
    Unity.CurrentTestName = FuncName;
 800489c:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <UnityDefaultTestRun+0x60>)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6053      	str	r3, [r2, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <UnityDefaultTestRun+0x60>)
 80048a6:	6113      	str	r3, [r2, #16]
    Unity.NumberOfTests++;
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <UnityDefaultTestRun+0x60>)
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	3301      	adds	r3, #1
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <UnityDefaultTestRun+0x60>)
 80048b0:	6153      	str	r3, [r2, #20]
    UNITY_CLR_DETAILS();
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <UnityDefaultTestRun+0x60>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <UnityDefaultTestRun+0x60>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	60da      	str	r2, [r3, #12]
    UNITY_EXEC_TIME_START();
    if (TEST_PROTECT())
 80048be:	480d      	ldr	r0, [pc, #52]	; (80048f4 <UnityDefaultTestRun+0x64>)
 80048c0:	f7fb fc82 	bl	80001c8 <setjmp>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d103      	bne.n	80048d2 <UnityDefaultTestRun+0x42>
    {
        setUp();
 80048ca:	f000 f889 	bl	80049e0 <setUp>
        Func();
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4798      	blx	r3
    }
    if (TEST_PROTECT())
 80048d2:	4808      	ldr	r0, [pc, #32]	; (80048f4 <UnityDefaultTestRun+0x64>)
 80048d4:	f7fb fc78 	bl	80001c8 <setjmp>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <UnityDefaultTestRun+0x52>
    {
        tearDown();
 80048de:	f000 f886 	bl	80049ee <tearDown>
    }
    UNITY_EXEC_TIME_STOP();
    UnityConcludeTest();
 80048e2:	f7ff fe83 	bl	80045ec <UnityConcludeTest>
}
 80048e6:	bf00      	nop
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000054 	.word	0x20000054
 80048f4:	2000007c 	.word	0x2000007c

080048f8 <UnityBegin>:
	Unity.TestFile = filename;
}

/*-----------------------------------------------*/
void UnityBegin(const char* filename)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
    Unity.TestFile = filename;
 8004900:	4a11      	ldr	r2, [pc, #68]	; (8004948 <UnityBegin+0x50>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6013      	str	r3, [r2, #0]
    Unity.CurrentTestName = NULL;
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <UnityBegin+0x50>)
 8004908:	2200      	movs	r2, #0
 800490a:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
 800490c:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <UnityBegin+0x50>)
 800490e:	2200      	movs	r2, #0
 8004910:	611a      	str	r2, [r3, #16]
    Unity.NumberOfTests = 0;
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <UnityBegin+0x50>)
 8004914:	2200      	movs	r2, #0
 8004916:	615a      	str	r2, [r3, #20]
    Unity.TestFailures = 0;
 8004918:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <UnityBegin+0x50>)
 800491a:	2200      	movs	r2, #0
 800491c:	619a      	str	r2, [r3, #24]
    Unity.TestIgnores = 0;
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <UnityBegin+0x50>)
 8004920:	2200      	movs	r2, #0
 8004922:	61da      	str	r2, [r3, #28]
    Unity.CurrentTestFailed = 0;
 8004924:	4b08      	ldr	r3, [pc, #32]	; (8004948 <UnityBegin+0x50>)
 8004926:	2200      	movs	r2, #0
 8004928:	621a      	str	r2, [r3, #32]
    Unity.CurrentTestIgnored = 0;
 800492a:	4b07      	ldr	r3, [pc, #28]	; (8004948 <UnityBegin+0x50>)
 800492c:	2200      	movs	r2, #0
 800492e:	625a      	str	r2, [r3, #36]	; 0x24

    UNITY_CLR_DETAILS();
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <UnityBegin+0x50>)
 8004932:	2200      	movs	r2, #0
 8004934:	609a      	str	r2, [r3, #8]
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <UnityBegin+0x50>)
 8004938:	2200      	movs	r2, #0
 800493a:	60da      	str	r2, [r3, #12]
    UNITY_OUTPUT_START();
 800493c:	f000 fc7e 	bl	800523c <target_init_putc>
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20000054 	.word	0x20000054

0800494c <UnityEnd>:

/*-----------------------------------------------*/
int UnityEnd(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
    UNITY_PRINT_EOL();
 8004950:	200a      	movs	r0, #10
 8004952:	f000 fc61 	bl	8005218 <target_putc>
    UnityPrint(UnityStrBreaker);
 8004956:	481b      	ldr	r0, [pc, #108]	; (80049c4 <UnityEnd+0x78>)
 8004958:	f7ff fd16 	bl	8004388 <UnityPrint>
    UNITY_PRINT_EOL();
 800495c:	200a      	movs	r0, #10
 800495e:	f000 fc5b 	bl	8005218 <target_putc>
    UnityPrintNumber((UNITY_INT)(Unity.NumberOfTests));
 8004962:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <UnityEnd+0x7c>)
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fd89 	bl	800447e <UnityPrintNumber>
    UnityPrint(UnityStrResultsTests);
 800496c:	4817      	ldr	r0, [pc, #92]	; (80049cc <UnityEnd+0x80>)
 800496e:	f7ff fd0b 	bl	8004388 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestFailures));
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <UnityEnd+0x7c>)
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fd81 	bl	800447e <UnityPrintNumber>
    UnityPrint(UnityStrResultsFailures);
 800497c:	4814      	ldr	r0, [pc, #80]	; (80049d0 <UnityEnd+0x84>)
 800497e:	f7ff fd03 	bl	8004388 <UnityPrint>
    UnityPrintNumber((UNITY_INT)(Unity.TestIgnores));
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <UnityEnd+0x7c>)
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fd79 	bl	800447e <UnityPrintNumber>
    UnityPrint(UnityStrResultsIgnored);
 800498c:	4811      	ldr	r0, [pc, #68]	; (80049d4 <UnityEnd+0x88>)
 800498e:	f7ff fcfb 	bl	8004388 <UnityPrint>
    UNITY_PRINT_EOL();
 8004992:	200a      	movs	r0, #10
 8004994:	f000 fc40 	bl	8005218 <target_putc>
    if (Unity.TestFailures == 0U)
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <UnityEnd+0x7c>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <UnityEnd+0x5c>
    {
        UnityPrint(UnityStrOk);
 80049a0:	480d      	ldr	r0, [pc, #52]	; (80049d8 <UnityEnd+0x8c>)
 80049a2:	f7ff fcf1 	bl	8004388 <UnityPrint>
 80049a6:	e002      	b.n	80049ae <UnityEnd+0x62>
    }
    else
    {
        UnityPrint(UnityStrFail);
 80049a8:	480c      	ldr	r0, [pc, #48]	; (80049dc <UnityEnd+0x90>)
 80049aa:	f7ff fced 	bl	8004388 <UnityPrint>
#ifdef UNITY_DIFFERENTIATE_FINAL_FAIL
        UNITY_OUTPUT_CHAR('E'); UNITY_OUTPUT_CHAR('D');
#endif
    }
    UNITY_PRINT_EOL();
 80049ae:	200a      	movs	r0, #10
 80049b0:	f000 fc32 	bl	8005218 <target_putc>
    UNITY_FLUSH_CALL();
 80049b4:	f000 fc48 	bl	8005248 <target_flush_putc>
    UNITY_OUTPUT_COMPLETE();
 80049b8:	f000 fc4e 	bl	8005258 <target_close_putc>
    return (int)(Unity.TestFailures);
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <UnityEnd+0x7c>)
 80049be:	699b      	ldr	r3, [r3, #24]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	0800576c 	.word	0x0800576c
 80049c8:	20000054 	.word	0x20000054
 80049cc:	08005784 	.word	0x08005784
 80049d0:	0800578c 	.word	0x0800578c
 80049d4:	08005798 	.word	0x08005798
 80049d8:	080056ec 	.word	0x080056ec
 80049dc:	080056f8 	.word	0x080056f8

080049e0 <setUp>:
static void MX_SPI3_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
/* USER CODE BEGIN PFP */
void setUp(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0

}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <tearDown>:

void tearDown(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0

}
 80049f2:	bf00      	nop
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a00:	f7fc f86f 	bl	8000ae2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a04:	f000 f844 	bl	8004a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a08:	f000 fa4e 	bl	8004ea8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8004a0c:	f000 f8e4 	bl	8004bd8 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8004a10:	f000 f91a 	bl	8004c48 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8004a14:	f000 f956 	bl	8004cc4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8004a18:	f000 f97a 	bl	8004d10 <MX_SPI3_Init>
  //MX_USART1_UART_Init();
  MX_USART3_UART_Init();
 8004a1c:	f000 f9e6 	bl	8004dec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004a20:	f000 fa14 	bl	8004e4c <MX_USB_OTG_FS_PCD_Init>
  UnityBegin("Test Examples");
  DO_TEST(test_thatSucceeds);
  DO_TEST(test_succeedsWithCondition);
  UnityEnd();
#endif
  UnityBegin("modules/ledctrl.c");
 8004a24:	480f      	ldr	r0, [pc, #60]	; (8004a64 <main+0x68>)
 8004a26:	f7ff ff67 	bl	80048f8 <UnityBegin>
  DO_TEST(test_check_min_number_blinks);
 8004a2a:	2282      	movs	r2, #130	; 0x82
 8004a2c:	490e      	ldr	r1, [pc, #56]	; (8004a68 <main+0x6c>)
 8004a2e:	480f      	ldr	r0, [pc, #60]	; (8004a6c <main+0x70>)
 8004a30:	f7ff ff2e 	bl	8004890 <UnityDefaultTestRun>
  DO_TEST(test_check_max_number_blinks);
 8004a34:	2283      	movs	r2, #131	; 0x83
 8004a36:	490e      	ldr	r1, [pc, #56]	; (8004a70 <main+0x74>)
 8004a38:	480e      	ldr	r0, [pc, #56]	; (8004a74 <main+0x78>)
 8004a3a:	f7ff ff29 	bl	8004890 <UnityDefaultTestRun>
  DO_TEST(test_check_min_blink_duration);
 8004a3e:	2284      	movs	r2, #132	; 0x84
 8004a40:	490d      	ldr	r1, [pc, #52]	; (8004a78 <main+0x7c>)
 8004a42:	480e      	ldr	r0, [pc, #56]	; (8004a7c <main+0x80>)
 8004a44:	f7ff ff24 	bl	8004890 <UnityDefaultTestRun>
  DO_TEST(test_check_max_blink_duration);
 8004a48:	2285      	movs	r2, #133	; 0x85
 8004a4a:	490d      	ldr	r1, [pc, #52]	; (8004a80 <main+0x84>)
 8004a4c:	480d      	ldr	r0, [pc, #52]	; (8004a84 <main+0x88>)
 8004a4e:	f7ff ff1f 	bl	8004890 <UnityDefaultTestRun>
  DO_TEST(test_total_blink_length);
 8004a52:	2286      	movs	r2, #134	; 0x86
 8004a54:	490c      	ldr	r1, [pc, #48]	; (8004a88 <main+0x8c>)
 8004a56:	480d      	ldr	r0, [pc, #52]	; (8004a8c <main+0x90>)
 8004a58:	f7ff ff1a 	bl	8004890 <UnityDefaultTestRun>
  UnityEnd();
 8004a5c:	f7ff ff76 	bl	800494c <UnityEnd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004a60:	e7fe      	b.n	8004a60 <main+0x64>
 8004a62:	bf00      	nop
 8004a64:	080055f8 	.word	0x080055f8
 8004a68:	0800560c 	.word	0x0800560c
 8004a6c:	0800526d 	.word	0x0800526d
 8004a70:	0800562c 	.word	0x0800562c
 8004a74:	080052dd 	.word	0x080052dd
 8004a78:	0800564c 	.word	0x0800564c
 8004a7c:	0800534d 	.word	0x0800534d
 8004a80:	0800566c 	.word	0x0800566c
 8004a84:	080053bb 	.word	0x080053bb
 8004a88:	0800568c 	.word	0x0800568c
 8004a8c:	0800542f 	.word	0x0800542f

08004a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0b8      	sub	sp, #224	; 0xe0
 8004a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a9a:	2244      	movs	r2, #68	; 0x44
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fd96 	bl	80055d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004aa4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	60da      	str	r2, [r3, #12]
 8004ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ab4:	463b      	mov	r3, r7
 8004ab6:	2288      	movs	r2, #136	; 0x88
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fd88 	bl	80055d0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004ac0:	f7fd f80a 	bl	8001ad8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004ac4:	4b42      	ldr	r3, [pc, #264]	; (8004bd0 <SystemClock_Config+0x140>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	4a41      	ldr	r2, [pc, #260]	; (8004bd0 <SystemClock_Config+0x140>)
 8004acc:	f023 0318 	bic.w	r3, r3, #24
 8004ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004ad4:	2314      	movs	r3, #20
 8004ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004aec:	2360      	movs	r3, #96	; 0x60
 8004aee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004af2:	2302      	movs	r3, #2
 8004af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004b04:	2328      	movs	r3, #40	; 0x28
 8004b06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004b0a:	2307      	movs	r3, #7
 8004b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b10:	2302      	movs	r3, #2
 8004b12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b16:	2302      	movs	r3, #2
 8004b18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd f919 	bl	8001d58 <HAL_RCC_OscConfig>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8004b2c:	f000 fb6c 	bl	8005208 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b30:	230f      	movs	r3, #15
 8004b32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b36:	2303      	movs	r3, #3
 8004b38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004b4e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004b52:	2104      	movs	r1, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd fce5 	bl	8002524 <HAL_RCC_ClockConfig>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004b60:	f000 fb52 	bl	8005208 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8004b64:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <SystemClock_Config+0x144>)
 8004b66:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004b70:	2300      	movs	r3, #0
 8004b72:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004b7a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004b80:	2301      	movs	r3, #1
 8004b82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8004b88:	2318      	movs	r3, #24
 8004b8a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004b8c:	2307      	movs	r3, #7
 8004b8e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004b90:	2302      	movs	r3, #2
 8004b92:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004b94:	2302      	movs	r3, #2
 8004b96:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004b98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b9c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fd fec3 	bl	800292c <HAL_RCCEx_PeriphCLKConfig>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8004bac:	f000 fb2c 	bl	8005208 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004bb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004bb4:	f7fc ffae 	bl	8001b14 <HAL_PWREx_ControlVoltageScaling>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <SystemClock_Config+0x132>
  {
    Error_Handler();
 8004bbe:	f000 fb23 	bl	8005208 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004bc2:	f7fe f999 	bl	8002ef8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004bc6:	bf00      	nop
 8004bc8:	37e0      	adds	r7, #224	; 0xe0
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	00012085 	.word	0x00012085

08004bd8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004bde:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <MX_DFSDM1_Init+0x6c>)
 8004be0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8004be2:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8004be8:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8004bee:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c06:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8004c0e:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c10:	2204      	movs	r2, #4
 8004c12:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8004c1a:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8004c2c:	4804      	ldr	r0, [pc, #16]	; (8004c40 <MX_DFSDM1_Init+0x68>)
 8004c2e:	f7fc f901 	bl	8000e34 <HAL_DFSDM_ChannelInit>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8004c38:	f000 fae6 	bl	8005208 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	200000d8 	.word	0x200000d8
 8004c44:	40016020 	.word	0x40016020

08004c48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004c4c:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c4e:	4a1c      	ldr	r2, [pc, #112]	; (8004cc0 <MX_I2C2_Init+0x78>)
 8004c50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c54:	f640 6214 	movw	r2, #3604	; 0xe14
 8004c58:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004c5a:	4b18      	ldr	r3, [pc, #96]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c60:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c72:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c78:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c84:	480d      	ldr	r0, [pc, #52]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c86:	f7fc fcb8 	bl	80015fa <HAL_I2C_Init>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004c90:	f000 faba 	bl	8005208 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c94:	2100      	movs	r1, #0
 8004c96:	4809      	ldr	r0, [pc, #36]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004c98:	f7fc fd3e 	bl	8001718 <HAL_I2CEx_ConfigAnalogFilter>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8004ca2:	f000 fab1 	bl	8005208 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4804      	ldr	r0, [pc, #16]	; (8004cbc <MX_I2C2_Init+0x74>)
 8004caa:	f7fc fd80 	bl	80017ae <HAL_I2CEx_ConfigDigitalFilter>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8004cb4:	f000 faa8 	bl	8005208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004cb8:	bf00      	nop
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000598 	.word	0x20000598
 8004cc0:	40005800 	.word	0x40005800

08004cc4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004cca:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <MX_QUADSPI_Init+0x48>)
 8004ccc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8004cce:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004cd0:	22ff      	movs	r2, #255	; 0xff
 8004cd2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004cf2:	4805      	ldr	r0, [pc, #20]	; (8004d08 <MX_QUADSPI_Init+0x44>)
 8004cf4:	f7fc ff74 	bl	8001be0 <HAL_QSPI_Init>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8004cfe:	f000 fa83 	bl	8005208 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200006c8 	.word	0x200006c8
 8004d0c:	a0001000 	.word	0xa0001000

08004d10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d16:	4a1c      	ldr	r2, [pc, #112]	; (8004d88 <MX_SPI3_Init+0x78>)
 8004d18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004d28:	4b16      	ldr	r3, [pc, #88]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d2a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004d2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d30:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d36:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d4a:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004d5c:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d5e:	2207      	movs	r2, #7
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004d6e:	4805      	ldr	r0, [pc, #20]	; (8004d84 <MX_SPI3_Init+0x74>)
 8004d70:	f7fe fa9c 	bl	80032ac <HAL_SPI_Init>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004d7a:	f000 fa45 	bl	8005208 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004d7e:	bf00      	nop
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200005e4 	.word	0x200005e4
 8004d88:	40003c00 	.word	0x40003c00

08004d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004d92:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <MX_USART1_UART_Init+0x5c>)
 8004d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d96:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004db2:	220c      	movs	r2, #12
 8004db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dc8:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dce:	4805      	ldr	r0, [pc, #20]	; (8004de4 <MX_USART1_UART_Init+0x58>)
 8004dd0:	f7fe fb0f 	bl	80033f2 <HAL_UART_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004dda:	f000 fa15 	bl	8005208 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000648 	.word	0x20000648
 8004de8:	40013800 	.word	0x40013800

08004dec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004df0:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004df2:	4a15      	ldr	r2, [pc, #84]	; (8004e48 <MX_USART3_UART_Init+0x5c>)
 8004df4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e12:	220c      	movs	r2, #12
 8004e14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e28:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e2e:	4805      	ldr	r0, [pc, #20]	; (8004e44 <MX_USART3_UART_Init+0x58>)
 8004e30:	f7fe fadf 	bl	80033f2 <HAL_UART_Init>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004e3a:	f000 f9e5 	bl	8005208 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000110 	.word	0x20000110
 8004e48:	40004800 	.word	0x40004800

08004e4c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004e50:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004e56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004e58:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e5a:	2206      	movs	r2, #6
 8004e5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004e5e:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e60:	2202      	movs	r2, #2
 8004e62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e66:	2202      	movs	r2, #2
 8004e68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004e6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004e82:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004e8e:	4805      	ldr	r0, [pc, #20]	; (8004ea4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004e90:	f7fc fcd9 	bl	8001846 <HAL_PCD_Init>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004e9a:	f000 f9b5 	bl	8005208 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000190 	.word	0x20000190

08004ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eae:	f107 0314 	add.w	r3, r7, #20
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
 8004eba:	60da      	str	r2, [r3, #12]
 8004ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ebe:	4bba      	ldr	r3, [pc, #744]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	4ab9      	ldr	r2, [pc, #740]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004ec4:	f043 0310 	orr.w	r3, r3, #16
 8004ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eca:	4bb7      	ldr	r3, [pc, #732]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ed6:	4bb4      	ldr	r3, [pc, #720]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eda:	4ab3      	ldr	r2, [pc, #716]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004edc:	f043 0304 	orr.w	r3, r3, #4
 8004ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ee2:	4bb1      	ldr	r3, [pc, #708]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eee:	4bae      	ldr	r3, [pc, #696]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ef2:	4aad      	ldr	r2, [pc, #692]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004efa:	4bab      	ldr	r3, [pc, #684]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
 8004f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f06:	4ba8      	ldr	r3, [pc, #672]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	4aa7      	ldr	r2, [pc, #668]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004f0c:	f043 0302 	orr.w	r3, r3, #2
 8004f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f12:	4ba5      	ldr	r3, [pc, #660]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f1e:	4ba2      	ldr	r3, [pc, #648]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	4aa1      	ldr	r2, [pc, #644]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004f24:	f043 0308 	orr.w	r3, r3, #8
 8004f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f2a:	4b9f      	ldr	r3, [pc, #636]	; (80051a8 <MX_GPIO_Init+0x300>)
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8004f36:	2200      	movs	r2, #0
 8004f38:	f44f 718a 	mov.w	r1, #276	; 0x114
 8004f3c:	489b      	ldr	r0, [pc, #620]	; (80051ac <MX_GPIO_Init+0x304>)
 8004f3e:	f7fc fb21 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8004f42:	2200      	movs	r2, #0
 8004f44:	f248 1104 	movw	r1, #33028	; 0x8104
 8004f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f4c:	f7fc fb1a 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8004f50:	2200      	movs	r2, #0
 8004f52:	f24f 0114 	movw	r1, #61460	; 0xf014
 8004f56:	4896      	ldr	r0, [pc, #600]	; (80051b0 <MX_GPIO_Init+0x308>)
 8004f58:	f7fc fb14 	bl	8001584 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f241 0181 	movw	r1, #4225	; 0x1081
 8004f62:	4894      	ldr	r0, [pc, #592]	; (80051b4 <MX_GPIO_Init+0x30c>)
 8004f64:	f7fc fb0e 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f6e:	4891      	ldr	r0, [pc, #580]	; (80051b4 <MX_GPIO_Init+0x30c>)
 8004f70:	f7fc fb08 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004f74:	2200      	movs	r2, #0
 8004f76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004f7a:	488f      	ldr	r0, [pc, #572]	; (80051b8 <MX_GPIO_Init+0x310>)
 8004f7c:	f7fc fb02 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004f80:	2201      	movs	r2, #1
 8004f82:	2120      	movs	r1, #32
 8004f84:	488a      	ldr	r0, [pc, #552]	; (80051b0 <MX_GPIO_Init+0x308>)
 8004f86:	f7fc fafd 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	4887      	ldr	r0, [pc, #540]	; (80051ac <MX_GPIO_Init+0x304>)
 8004f90:	f7fc faf8 	bl	8001584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004f94:	f240 1315 	movw	r3, #277	; 0x115
 8004f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4619      	mov	r1, r3
 8004fac:	487f      	ldr	r0, [pc, #508]	; (80051ac <MX_GPIO_Init+0x304>)
 8004fae:	f7fc f84d 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004fb2:	236a      	movs	r3, #106	; 0x6a
 8004fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fb6:	4b81      	ldr	r3, [pc, #516]	; (80051bc <MX_GPIO_Init+0x314>)
 8004fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4879      	ldr	r0, [pc, #484]	; (80051ac <MX_GPIO_Init+0x304>)
 8004fc6:	f7fc f841 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8004fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fd0:	4b7b      	ldr	r3, [pc, #492]	; (80051c0 <MX_GPIO_Init+0x318>)
 8004fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004fd8:	f107 0314 	add.w	r3, r7, #20
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4876      	ldr	r0, [pc, #472]	; (80051b8 <MX_GPIO_Init+0x310>)
 8004fe0:	f7fc f834 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8004fe4:	233f      	movs	r3, #63	; 0x3f
 8004fe6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004fe8:	230b      	movs	r3, #11
 8004fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ff0:	f107 0314 	add.w	r3, r7, #20
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4870      	ldr	r0, [pc, #448]	; (80051b8 <MX_GPIO_Init+0x310>)
 8004ff8:	f7fc f828 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005000:	2302      	movs	r3, #2
 8005002:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005008:	2303      	movs	r3, #3
 800500a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800500c:	2308      	movs	r3, #8
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4619      	mov	r1, r3
 8005016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800501a:	f7fc f817 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800501e:	f248 1304 	movw	r3, #33028	; 0x8104
 8005022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005024:	2301      	movs	r3, #1
 8005026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005028:	2300      	movs	r3, #0
 800502a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502c:	2300      	movs	r3, #0
 800502e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800503a:	f7fc f807 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800503e:	2308      	movs	r3, #8
 8005040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504a:	2300      	movs	r3, #0
 800504c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800504e:	2301      	movs	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8005052:	f107 0314 	add.w	r3, r7, #20
 8005056:	4619      	mov	r1, r3
 8005058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800505c:	f7fb fff6 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8005060:	2310      	movs	r3, #16
 8005062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8005064:	230b      	movs	r3, #11
 8005066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800506c:	f107 0314 	add.w	r3, r7, #20
 8005070:	4619      	mov	r1, r3
 8005072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005076:	f7fb ffe9 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800507a:	23e0      	movs	r3, #224	; 0xe0
 800507c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507e:	2302      	movs	r3, #2
 8005080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005086:	2303      	movs	r3, #3
 8005088:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800508a:	2305      	movs	r3, #5
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800508e:	f107 0314 	add.w	r3, r7, #20
 8005092:	4619      	mov	r1, r3
 8005094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005098:	f7fb ffd8 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800509c:	2301      	movs	r3, #1
 800509e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050a0:	4b46      	ldr	r3, [pc, #280]	; (80051bc <MX_GPIO_Init+0x314>)
 80050a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80050a8:	f107 0314 	add.w	r3, r7, #20
 80050ac:	4619      	mov	r1, r3
 80050ae:	4840      	ldr	r0, [pc, #256]	; (80051b0 <MX_GPIO_Init+0x308>)
 80050b0:	f7fb ffcc 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80050b4:	2302      	movs	r3, #2
 80050b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80050b8:	230b      	movs	r3, #11
 80050ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80050c0:	f107 0314 	add.w	r3, r7, #20
 80050c4:	4619      	mov	r1, r3
 80050c6:	483a      	ldr	r0, [pc, #232]	; (80051b0 <MX_GPIO_Init+0x308>)
 80050c8:	f7fb ffc0 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80050cc:	f24f 0334 	movw	r3, #61492	; 0xf034
 80050d0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050d2:	2301      	movs	r3, #1
 80050d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050da:	2300      	movs	r3, #0
 80050dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050de:	f107 0314 	add.w	r3, r7, #20
 80050e2:	4619      	mov	r1, r3
 80050e4:	4832      	ldr	r0, [pc, #200]	; (80051b0 <MX_GPIO_Init+0x308>)
 80050e6:	f7fb ffb1 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80050ea:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80050ee:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050f0:	4b32      	ldr	r3, [pc, #200]	; (80051bc <MX_GPIO_Init+0x314>)
 80050f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	4619      	mov	r1, r3
 80050fe:	482d      	ldr	r0, [pc, #180]	; (80051b4 <MX_GPIO_Init+0x30c>)
 8005100:	f7fb ffa4 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8005104:	f243 0381 	movw	r3, #12417	; 0x3081
 8005108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800510a:	2301      	movs	r3, #1
 800510c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510e:	2300      	movs	r3, #0
 8005110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005112:	2300      	movs	r3, #0
 8005114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005116:	f107 0314 	add.w	r3, r7, #20
 800511a:	4619      	mov	r1, r3
 800511c:	4825      	ldr	r0, [pc, #148]	; (80051b4 <MX_GPIO_Init+0x30c>)
 800511e:	f7fb ff95 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8005122:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005128:	2301      	movs	r3, #1
 800512a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005130:	2300      	movs	r3, #0
 8005132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	4619      	mov	r1, r3
 800513a:	481f      	ldr	r0, [pc, #124]	; (80051b8 <MX_GPIO_Init+0x310>)
 800513c:	f7fb ff86 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8005140:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <MX_GPIO_Init+0x314>)
 8005148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800514e:	f107 0314 	add.w	r3, r7, #20
 8005152:	4619      	mov	r1, r3
 8005154:	4818      	ldr	r0, [pc, #96]	; (80051b8 <MX_GPIO_Init+0x310>)
 8005156:	f7fb ff79 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800515a:	2302      	movs	r3, #2
 800515c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515e:	2302      	movs	r3, #2
 8005160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005166:	2303      	movs	r3, #3
 8005168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800516a:	2305      	movs	r3, #5
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800516e:	f107 0314 	add.w	r3, r7, #20
 8005172:	4619      	mov	r1, r3
 8005174:	480f      	ldr	r0, [pc, #60]	; (80051b4 <MX_GPIO_Init+0x30c>)
 8005176:	f7fb ff69 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800517a:	2378      	movs	r3, #120	; 0x78
 800517c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517e:	2302      	movs	r3, #2
 8005180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005186:	2303      	movs	r3, #3
 8005188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800518a:	2307      	movs	r3, #7
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800518e:	f107 0314 	add.w	r3, r7, #20
 8005192:	4619      	mov	r1, r3
 8005194:	4807      	ldr	r0, [pc, #28]	; (80051b4 <MX_GPIO_Init+0x30c>)
 8005196:	f7fb ff59 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800519a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800519e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a0:	2312      	movs	r3, #18
 80051a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e00d      	b.n	80051c4 <MX_GPIO_Init+0x31c>
 80051a8:	40021000 	.word	0x40021000
 80051ac:	48001000 	.word	0x48001000
 80051b0:	48000400 	.word	0x48000400
 80051b4:	48000c00 	.word	0x48000c00
 80051b8:	48000800 	.word	0x48000800
 80051bc:	10110000 	.word	0x10110000
 80051c0:	10210000 	.word	0x10210000
 80051c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c6:	2303      	movs	r3, #3
 80051c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051ca:	2304      	movs	r3, #4
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051ce:	f107 0314 	add.w	r3, r7, #20
 80051d2:	4619      	mov	r1, r3
 80051d4:	480b      	ldr	r0, [pc, #44]	; (8005204 <MX_GPIO_Init+0x35c>)
 80051d6:	f7fb ff39 	bl	800104c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	2017      	movs	r0, #23
 80051e0:	f7fb fdf1 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80051e4:	2017      	movs	r0, #23
 80051e6:	f7fb fe0a 	bl	8000dfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2100      	movs	r1, #0
 80051ee:	2028      	movs	r0, #40	; 0x28
 80051f0:	f7fb fde9 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80051f4:	2028      	movs	r0, #40	; 0x28
 80051f6:	f7fb fe02 	bl	8000dfe <HAL_NVIC_EnableIRQ>

}
 80051fa:	bf00      	nop
 80051fc:	3728      	adds	r7, #40	; 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	48000400 	.word	0x48000400

08005208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <target_putc>:



//-------------------------EXPORTED FUNCTIONS-------------------------------
void target_putc(char a)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, (uint8_t *)&a, sizeof(a), 0xffffffff);
 8005222:	1df9      	adds	r1, r7, #7
 8005224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005228:	2201      	movs	r2, #1
 800522a:	4803      	ldr	r0, [pc, #12]	; (8005238 <target_putc+0x20>)
 800522c:	f7fe f964 	bl	80034f8 <HAL_UART_Transmit>

}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000648 	.word	0x20000648

0800523c <target_init_putc>:

void target_init_putc(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
    MX_USART1_UART_Init();
 8005240:	f7ff fda4 	bl	8004d8c <MX_USART1_UART_Init>
}
 8005244:	bf00      	nop
 8005246:	bd80      	pop	{r7, pc}

08005248 <target_flush_putc>:

void target_flush_putc(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0

}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <target_close_putc>:

void target_close_putc(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
    HAL_UART_DeInit(&huart1);
 800525c:	4802      	ldr	r0, [pc, #8]	; (8005268 <target_close_putc+0x10>)
 800525e:	f7fe f916 	bl	800348e <HAL_UART_DeInit>
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000648 	.word	0x20000648

0800526c <test_check_min_number_blinks>:
//-------------------------EXPORTED FUNCTIONS-------------------------------



void test_check_min_number_blinks(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
	uint32_t num_blink = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 1000;
 8005276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800527a:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f924 	bl	80054cc <ledctrl_blinkled>
 8005284:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 8005286:	2314      	movs	r3, #20
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2326      	movs	r3, #38	; 0x26
 800528c:	2200      	movs	r2, #0
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005294:	f7ff fa10 	bl	80046b8 <UnityAssertEqualNumber>
	num_blink = 1;
 8005298:	2301      	movs	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f914 	bl	80054cc <ledctrl_blinkled>
 80052a4:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 80052a6:	2314      	movs	r3, #20
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2329      	movs	r3, #41	; 0x29
 80052ac:	2200      	movs	r2, #0
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7ff fa01 	bl	80046b8 <UnityAssertEqualNumber>
	num_blink = 2;
 80052b6:	2302      	movs	r3, #2
 80052b8:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f905 	bl	80054cc <ledctrl_blinkled>
 80052c2:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 80052c4:	2314      	movs	r3, #20
 80052c6:	9300      	str	r3, [sp, #0]
 80052c8:	232c      	movs	r3, #44	; 0x2c
 80052ca:	2200      	movs	r2, #0
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	2000      	movs	r0, #0
 80052d0:	f7ff f9f2 	bl	80046b8 <UnityAssertEqualNumber>
}
 80052d4:	bf00      	nop
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <test_check_max_number_blinks>:

void test_check_max_number_blinks(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af02      	add	r7, sp, #8
	uint32_t num_blink = 10;
 80052e2:	230a      	movs	r3, #10
 80052e4:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 1000;
 80052e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052ea:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f8ec 	bl	80054cc <ledctrl_blinkled>
 80052f4:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 80052f6:	2314      	movs	r3, #20
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2334      	movs	r3, #52	; 0x34
 80052fc:	2200      	movs	r2, #0
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005304:	f7ff f9d8 	bl	80046b8 <UnityAssertEqualNumber>
	num_blink = 9;
 8005308:	2309      	movs	r3, #9
 800530a:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f8dc 	bl	80054cc <ledctrl_blinkled>
 8005314:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8005316:	2314      	movs	r3, #20
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2337      	movs	r3, #55	; 0x37
 800531c:	2200      	movs	r2, #0
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	2000      	movs	r0, #0
 8005322:	f7ff f9c9 	bl	80046b8 <UnityAssertEqualNumber>
	num_blink = 8;
 8005326:	2308      	movs	r3, #8
 8005328:	60fb      	str	r3, [r7, #12]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f8cd 	bl	80054cc <ledctrl_blinkled>
 8005332:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8005334:	2314      	movs	r3, #20
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	233a      	movs	r3, #58	; 0x3a
 800533a:	2200      	movs	r2, #0
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	2000      	movs	r0, #0
 8005340:	f7ff f9ba 	bl	80046b8 <UnityAssertEqualNumber>
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <test_check_min_blink_duration>:

void test_check_min_blink_duration(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af02      	add	r7, sp, #8
	uint32_t num_blink = 2;
 8005352:	2302      	movs	r3, #2
 8005354:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f8b5 	bl	80054cc <ledctrl_blinkled>
 8005362:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 8005364:	2314      	movs	r3, #20
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2342      	movs	r3, #66	; 0x42
 800536a:	2200      	movs	r2, #0
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005372:	f7ff f9a1 	bl	80046b8 <UnityAssertEqualNumber>
	ms_blink_duration = 1;
 8005376:	2301      	movs	r3, #1
 8005378:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f8a5 	bl	80054cc <ledctrl_blinkled>
 8005382:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8005384:	2314      	movs	r3, #20
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	2345      	movs	r3, #69	; 0x45
 800538a:	2200      	movs	r2, #0
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	2000      	movs	r0, #0
 8005390:	f7ff f992 	bl	80046b8 <UnityAssertEqualNumber>
	ms_blink_duration = 2;
 8005394:	2302      	movs	r3, #2
 8005396:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f896 	bl	80054cc <ledctrl_blinkled>
 80053a0:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 80053a2:	2314      	movs	r3, #20
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2348      	movs	r3, #72	; 0x48
 80053a8:	2200      	movs	r2, #0
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	2000      	movs	r0, #0
 80053ae:	f7ff f983 	bl	80046b8 <UnityAssertEqualNumber>
}
 80053b2:	bf00      	nop
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <test_check_max_blink_duration>:

void test_check_max_blink_duration(void)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af02      	add	r7, sp, #8
	uint32_t num_blink = 2;
 80053c0:	2302      	movs	r3, #2
 80053c2:	60fb      	str	r3, [r7, #12]
	uint32_t ms_blink_duration = 5000;
 80053c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80053c8:	60bb      	str	r3, [r7, #8]
	int32_t ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f87d 	bl	80054cc <ledctrl_blinkled>
 80053d2:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_ERR, ret);
 80053d4:	2314      	movs	r3, #20
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2350      	movs	r3, #80	; 0x50
 80053da:	2200      	movs	r2, #0
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053e2:	f7ff f969 	bl	80046b8 <UnityAssertEqualNumber>
	ms_blink_duration = 2999;
 80053e6:	f640 33b7 	movw	r3, #2999	; 0xbb7
 80053ea:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 f86c 	bl	80054cc <ledctrl_blinkled>
 80053f4:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 80053f6:	2314      	movs	r3, #20
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	2353      	movs	r3, #83	; 0x53
 80053fc:	2200      	movs	r2, #0
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	2000      	movs	r0, #0
 8005402:	f7ff f959 	bl	80046b8 <UnityAssertEqualNumber>
	ms_blink_duration = 2998;
 8005406:	f640 33b6 	movw	r3, #2998	; 0xbb6
 800540a:	60bb      	str	r3, [r7, #8]
	ret = ledctrl_blinkled(num_blink, ms_blink_duration);
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f85c 	bl	80054cc <ledctrl_blinkled>
 8005414:	6078      	str	r0, [r7, #4]
	TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8005416:	2314      	movs	r3, #20
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	2356      	movs	r3, #86	; 0x56
 800541c:	2200      	movs	r2, #0
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	2000      	movs	r0, #0
 8005422:	f7ff f949 	bl	80046b8 <UnityAssertEqualNumber>
}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <test_total_blink_length>:

void test_total_blink_length(void)
{
 800542e:	b590      	push	{r4, r7, lr}
 8005430:	b087      	sub	sp, #28
 8005432:	af02      	add	r7, sp, #8
	uint32_t blink_duration = 500;
 8005434:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005438:	60bb      	str	r3, [r7, #8]
	for(int i=1;i<5;i++){
 800543a:	2301      	movs	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e03d      	b.n	80054bc <test_total_blink_length+0x8e>
		uint32_t t = HAL_GetTick();
 8005440:	f7fb fbb8 	bl	8000bb4 <HAL_GetTick>
 8005444:	6078      	str	r0, [r7, #4]
		int32_t ret = ledctrl_blinkled(i, blink_duration);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f83e 	bl	80054cc <ledctrl_blinkled>
 8005450:	6038      	str	r0, [r7, #0]
		TEST_ASSERT_EQUAL_INT(LEDCTRL_OK, ret);
 8005452:	2314      	movs	r3, #20
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	235f      	movs	r3, #95	; 0x5f
 8005458:	2200      	movs	r2, #0
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	2000      	movs	r0, #0
 800545e:	f7ff f92b 	bl	80046b8 <UnityAssertEqualNumber>
		TEST_ASSERT_GREATER_THAN_UINT32(i*blink_duration - 50, HAL_GetTick() - t);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	3b32      	subs	r3, #50	; 0x32
 800546c:	461c      	mov	r4, r3
 800546e:	f7fb fba1 	bl	8000bb4 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	4619      	mov	r1, r3
 800547a:	2324      	movs	r3, #36	; 0x24
 800547c:	9301      	str	r3, [sp, #4]
 800547e:	2360      	movs	r3, #96	; 0x60
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	2202      	movs	r2, #2
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff f958 	bl	800473c <UnityAssertGreaterOrLessOrEqualNumber>
		TEST_ASSERT_LESS_THAN_UINT32(i*blink_duration + 50, HAL_GetTick() - t);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	3332      	adds	r3, #50	; 0x32
 8005496:	461c      	mov	r4, r3
 8005498:	f7fb fb8c 	bl	8000bb4 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	4619      	mov	r1, r3
 80054a4:	2324      	movs	r3, #36	; 0x24
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	2361      	movs	r3, #97	; 0x61
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	2300      	movs	r3, #0
 80054ae:	2204      	movs	r2, #4
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff f943 	bl	800473c <UnityAssertGreaterOrLessOrEqualNumber>
	for(int i=1;i<5;i++){
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3301      	adds	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b04      	cmp	r3, #4
 80054c0:	ddbe      	ble.n	8005440 <test_total_blink_length+0x12>
	}
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd90      	pop	{r4, r7, pc}
	...

080054cc <ledctrl_blinkled>:



//-------------------------EXPORTED FUNCTIONS-------------------------------
int32_t ledctrl_blinkled(uint32_t num_blink, uint32_t ms_blink_duration)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	if(num_blink < MIN_NUM_BLINKS){
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d102      	bne.n	80054e2 <ledctrl_blinkled+0x16>
		return LEDCTRL_ERR;
 80054dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e0:	e04b      	b.n	800557a <ledctrl_blinkled+0xae>
	}
	if(num_blink > MAX_NUM_BLINKS){
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b09      	cmp	r3, #9
 80054e6:	d902      	bls.n	80054ee <ledctrl_blinkled+0x22>
		return LEDCTRL_ERR;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054ec:	e045      	b.n	800557a <ledctrl_blinkled+0xae>
	}
	if(ms_blink_duration < MIN_BLINK_DURATION){
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <ledctrl_blinkled+0x2e>
		return LEDCTRL_ERR;
 80054f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f8:	e03f      	b.n	800557a <ledctrl_blinkled+0xae>
	}
	if(ms_blink_duration > MAX_BLINK_DURATION){
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005500:	4293      	cmp	r3, r2
 8005502:	d902      	bls.n	800550a <ledctrl_blinkled+0x3e>
		return LEDCTRL_ERR;
 8005504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005508:	e037      	b.n	800557a <ledctrl_blinkled+0xae>
	}
	ms_blink_duration /=2;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8005510:	2200      	movs	r2, #0
 8005512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005516:	481b      	ldr	r0, [pc, #108]	; (8005584 <ledctrl_blinkled+0xb8>)
 8005518:	f7fc f834 	bl	8001584 <HAL_GPIO_WritePin>
	for(int i=0;i<(num_blink);i++){
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e026      	b.n	8005570 <ledctrl_blinkled+0xa4>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8005522:	2201      	movs	r2, #1
 8005524:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005528:	4816      	ldr	r0, [pc, #88]	; (8005584 <ledctrl_blinkled+0xb8>)
 800552a:	f7fc f82b 	bl	8001584 <HAL_GPIO_WritePin>
		uint32_t t = HAL_GetTick();
 800552e:	f7fb fb41 	bl	8000bb4 <HAL_GetTick>
 8005532:	60b8      	str	r0, [r7, #8]
		while((t+ms_blink_duration) > HAL_GetTick());
 8005534:	bf00      	nop
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	18d4      	adds	r4, r2, r3
 800553c:	f7fb fb3a 	bl	8000bb4 <HAL_GetTick>
 8005540:	4603      	mov	r3, r0
 8005542:	429c      	cmp	r4, r3
 8005544:	d8f7      	bhi.n	8005536 <ledctrl_blinkled+0x6a>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8005546:	2200      	movs	r2, #0
 8005548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800554c:	480d      	ldr	r0, [pc, #52]	; (8005584 <ledctrl_blinkled+0xb8>)
 800554e:	f7fc f819 	bl	8001584 <HAL_GPIO_WritePin>
		t = HAL_GetTick();
 8005552:	f7fb fb2f 	bl	8000bb4 <HAL_GetTick>
 8005556:	60b8      	str	r0, [r7, #8]
		while((t+ms_blink_duration) > HAL_GetTick());
 8005558:	bf00      	nop
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	18d4      	adds	r4, r2, r3
 8005560:	f7fb fb28 	bl	8000bb4 <HAL_GetTick>
 8005564:	4603      	mov	r3, r0
 8005566:	429c      	cmp	r4, r3
 8005568:	d8f7      	bhi.n	800555a <ledctrl_blinkled+0x8e>
	for(int i=0;i<(num_blink);i++){
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	429a      	cmp	r2, r3
 8005576:	d8d4      	bhi.n	8005522 <ledctrl_blinkled+0x56>
	}
	return LEDCTRL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bd90      	pop	{r4, r7, pc}
 8005582:	bf00      	nop
 8005584:	48000400 	.word	0x48000400

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4e0d      	ldr	r6, [pc, #52]	; (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	; (80055c4 <__libc_init_array+0x3c>)
 800558e:	1ba4      	subs	r4, r4, r6
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2500      	movs	r5, #0
 8005594:	42a5      	cmp	r5, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4e0b      	ldr	r6, [pc, #44]	; (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	; (80055cc <__libc_init_array+0x44>)
 800559c:	f000 f820 	bl	80055e0 <_init>
 80055a0:	1ba4      	subs	r4, r4, r6
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2500      	movs	r5, #0
 80055a6:	42a5      	cmp	r5, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055b0:	4798      	blx	r3
 80055b2:	3501      	adds	r5, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ba:	4798      	blx	r3
 80055bc:	3501      	adds	r5, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	080057c4 	.word	0x080057c4
 80055c4:	080057c4 	.word	0x080057c4
 80055c8:	080057c4 	.word	0x080057c4
 80055cc:	080057c8 	.word	0x080057c8

080055d0 <memset>:
 80055d0:	4402      	add	r2, r0
 80055d2:	4603      	mov	r3, r0
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d100      	bne.n	80055da <memset+0xa>
 80055d8:	4770      	bx	lr
 80055da:	f803 1b01 	strb.w	r1, [r3], #1
 80055de:	e7f9      	b.n	80055d4 <memset+0x4>

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr
