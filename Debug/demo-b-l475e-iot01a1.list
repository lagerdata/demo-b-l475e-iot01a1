
demo-b-l475e-iot01a1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004828  08004828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004870  08004870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004878  08004878  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  2000000c  0800488c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  0800488c  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016557  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b0  00000000  00000000  00036593  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  00038f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  0003a480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027788  00000000  00000000  0003b860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc3b  00000000  00000000  00062fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef043  00000000  00000000  00072c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161c66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa4  00000000  00000000  00161ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004810 	.word	0x08004810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004810 	.word	0x08004810

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 feb7 	bl	800123e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f824 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa2e 	bl	8000934 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d8:	f000 f8c4 	bl	8000664 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004dc:	f000 f8fa 	bl	80006d4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e0:	f000 f936 	bl	8000750 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e4:	f000 f95a 	bl	800079c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 f996 	bl	8000818 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ec:	f000 f9c4 	bl	8000878 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f0:	f000 f9f2 	bl	80008d8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  ledctrl_blinkled(10, 200);
 80004f4:	21c8      	movs	r1, #200	; 0xc8
 80004f6:	200a      	movs	r0, #10
 80004f8:	f004 f900 	bl	80046fc <ledctrl_blinkled>
  ledctrl_blinkled(8, 400);
 80004fc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000500:	2008      	movs	r0, #8
 8000502:	f004 f8fb 	bl	80046fc <ledctrl_blinkled>
  ledctrl_blinkled(6, 800);
 8000506:	f44f 7148 	mov.w	r1, #800	; 0x320
 800050a:	2006      	movs	r0, #6
 800050c:	f004 f8f6 	bl	80046fc <ledctrl_blinkled>
  ledctrl_blinkled(4, 1000);
 8000510:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000514:	2004      	movs	r0, #4
 8000516:	f004 f8f1 	bl	80046fc <ledctrl_blinkled>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	e7fe      	b.n	800051a <main+0x52>

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0b8      	sub	sp, #224	; 0xe0
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000526:	2244      	movs	r2, #68	; 0x44
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f004 f968 	bl	8004800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2288      	movs	r2, #136	; 0x88
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 f95a 	bl	8004800 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054c:	f001 fd7e 	bl	800204c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000550:	4b42      	ldr	r3, [pc, #264]	; (800065c <SystemClock_Config+0x140>)
 8000552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000556:	4a41      	ldr	r2, [pc, #260]	; (800065c <SystemClock_Config+0x140>)
 8000558:	f023 0318 	bic.w	r3, r3, #24
 800055c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000560:	2314      	movs	r3, #20
 8000562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000578:	2360      	movs	r3, #96	; 0x60
 800057a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000584:	2301      	movs	r3, #1
 8000586:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058a:	2301      	movs	r3, #1
 800058c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000590:	2328      	movs	r3, #40	; 0x28
 8000592:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000596:	2307      	movs	r3, #7
 8000598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fe8d 	bl	80022cc <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005b8:	f000 fb6c 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005de:	2104      	movs	r1, #4
 80005e0:	4618      	mov	r0, r3
 80005e2:	f002 fa59 	bl	8002a98 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005ec:	f000 fb52 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <SystemClock_Config+0x144>)
 80005f2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000606:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800060a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000614:	2318      	movs	r3, #24
 8000616:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000618:	2307      	movs	r3, #7
 800061a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fc37 	bl	8002ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000638:	f000 fb2c 	bl	8000c94 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000640:	f001 fd22 	bl	8002088 <HAL_PWREx_ControlVoltageScaling>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x132>
  {
    Error_Handler();
 800064a:	f000 fb23 	bl	8000c94 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064e:	f002 ff0d 	bl	800346c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000652:	bf00      	nop
 8000654:	37e0      	adds	r7, #224	; 0xe0
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	00012085 	.word	0x00012085

08000664 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_DFSDM1_Init+0x68>)
 800066a:	4a19      	ldr	r2, [pc, #100]	; (80006d0 <MX_DFSDM1_Init+0x6c>)
 800066c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_DFSDM1_Init+0x68>)
 8000670:	2201      	movs	r2, #1
 8000672:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000674:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_DFSDM1_Init+0x68>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_DFSDM1_Init+0x68>)
 800067c:	2202      	movs	r2, #2
 800067e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_DFSDM1_Init+0x68>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_DFSDM1_Init+0x68>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_DFSDM1_Init+0x68>)
 800068e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000692:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_DFSDM1_Init+0x68>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_DFSDM1_Init+0x68>)
 800069c:	2204      	movs	r2, #4
 800069e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_DFSDM1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_DFSDM1_Init+0x68>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_DFSDM1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_DFSDM1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_DFSDM1_Init+0x68>)
 80006ba:	f000 ff69 	bl	8001590 <HAL_DFSDM_ChannelInit>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006c4:	f000 fae6 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000050 	.word	0x20000050
 80006d0:	40016020 	.word	0x40016020

080006d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C2_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C2_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C2_Init+0x74>)
 80006e0:	f640 6214 	movw	r2, #3604	; 0xe14
 80006e4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_I2C2_Init+0x74>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C2_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_I2C2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fe:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_I2C2_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C2_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_I2C2_Init+0x74>)
 8000712:	f001 fa2c 	bl	8001b6e <HAL_I2C_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800071c:	f000 faba 	bl	8000c94 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C2_Init+0x74>)
 8000724:	f001 fab2 	bl	8001c8c <HAL_I2CEx_ConfigAnalogFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800072e:	f000 fab1 	bl	8000c94 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000732:	2100      	movs	r1, #0
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C2_Init+0x74>)
 8000736:	f001 faf4 	bl	8001d22 <HAL_I2CEx_ConfigDigitalFilter>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000740:	f000 faa8 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000510 	.word	0x20000510
 800074c:	40005800 	.word	0x40005800

08000750 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_QUADSPI_Init+0x44>)
 8000756:	4a10      	ldr	r2, [pc, #64]	; (8000798 <MX_QUADSPI_Init+0x48>)
 8000758:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_QUADSPI_Init+0x44>)
 800075c:	22ff      	movs	r2, #255	; 0xff
 800075e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_QUADSPI_Init+0x44>)
 8000762:	2201      	movs	r2, #1
 8000764:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_QUADSPI_Init+0x44>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_QUADSPI_Init+0x44>)
 800076e:	2201      	movs	r2, #1
 8000770:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_QUADSPI_Init+0x44>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_QUADSPI_Init+0x44>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_QUADSPI_Init+0x44>)
 8000780:	f001 fce8 	bl	8002154 <HAL_QSPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800078a:	f000 fa83 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000640 	.word	0x20000640
 8000798:	a0001000 	.word	0xa0001000

0800079c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_SPI3_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_SPI3_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_SPI3_Init+0x74>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_SPI3_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI3_Init+0x74>)
 80007b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI3_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_SPI3_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI3_Init+0x74>)
 80007ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI3_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI3_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI3_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_SPI3_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI3_Init+0x74>)
 80007ea:	2207      	movs	r2, #7
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_SPI3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI3_Init+0x74>)
 80007f6:	2208      	movs	r2, #8
 80007f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_SPI3_Init+0x74>)
 80007fc:	f003 f810 	bl	8003820 <HAL_SPI_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000806:	f000 fa45 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000055c 	.word	0x2000055c
 8000814:	40003c00 	.word	0x40003c00

08000818 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800081e:	4a15      	ldr	r2, [pc, #84]	; (8000874 <MX_USART1_UART_Init+0x5c>)
 8000820:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART1_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART1_UART_Init+0x58>)
 800085c:	f003 f883 	bl	8003966 <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000866:	f000 fa15 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200005c0 	.word	0x200005c0
 8000874:	40013800 	.word	0x40013800

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART3_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008bc:	f003 f853 	bl	8003966 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f9e5 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000088 	.word	0x20000088
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2206      	movs	r2, #6
 80008e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	f001 fa4d 	bl	8001dba <HAL_PCD_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000926:	f000 f9b5 	bl	8000c94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000108 	.word	0x20000108

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	4bba      	ldr	r3, [pc, #744]	; (8000c34 <MX_GPIO_Init+0x300>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4ab9      	ldr	r2, [pc, #740]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000950:	f043 0310 	orr.w	r3, r3, #16
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4bb7      	ldr	r3, [pc, #732]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0310 	and.w	r3, r3, #16
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	4bb4      	ldr	r3, [pc, #720]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4ab3      	ldr	r2, [pc, #716]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4bb1      	ldr	r3, [pc, #708]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4bae      	ldr	r3, [pc, #696]	; (8000c34 <MX_GPIO_Init+0x300>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4aad      	ldr	r2, [pc, #692]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4bab      	ldr	r3, [pc, #684]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4ba8      	ldr	r3, [pc, #672]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4aa7      	ldr	r2, [pc, #668]	; (8000c34 <MX_GPIO_Init+0x300>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4ba5      	ldr	r3, [pc, #660]	; (8000c34 <MX_GPIO_Init+0x300>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	4ba2      	ldr	r3, [pc, #648]	; (8000c34 <MX_GPIO_Init+0x300>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4aa1      	ldr	r2, [pc, #644]	; (8000c34 <MX_GPIO_Init+0x300>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b9f      	ldr	r3, [pc, #636]	; (8000c34 <MX_GPIO_Init+0x300>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009c8:	489b      	ldr	r0, [pc, #620]	; (8000c38 <MX_GPIO_Init+0x304>)
 80009ca:	f001 f895 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f248 1104 	movw	r1, #33028	; 0x8104
 80009d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d8:	f001 f88e 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009dc:	2200      	movs	r2, #0
 80009de:	f24f 0114 	movw	r1, #61460	; 0xf014
 80009e2:	4896      	ldr	r0, [pc, #600]	; (8000c3c <MX_GPIO_Init+0x308>)
 80009e4:	f001 f888 	bl	8001af8 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f241 0181 	movw	r1, #4225	; 0x1081
 80009ee:	4894      	ldr	r0, [pc, #592]	; (8000c40 <MX_GPIO_Init+0x30c>)
 80009f0:	f001 f882 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009f4:	2201      	movs	r2, #1
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	4891      	ldr	r0, [pc, #580]	; (8000c40 <MX_GPIO_Init+0x30c>)
 80009fc:	f001 f87c 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a06:	488f      	ldr	r0, [pc, #572]	; (8000c44 <MX_GPIO_Init+0x310>)
 8000a08:	f001 f876 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2120      	movs	r1, #32
 8000a10:	488a      	ldr	r0, [pc, #552]	; (8000c3c <MX_GPIO_Init+0x308>)
 8000a12:	f001 f871 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4887      	ldr	r0, [pc, #540]	; (8000c38 <MX_GPIO_Init+0x304>)
 8000a1c:	f001 f86c 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a20:	f240 1315 	movw	r3, #277	; 0x115
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	487f      	ldr	r0, [pc, #508]	; (8000c38 <MX_GPIO_Init+0x304>)
 8000a3a:	f000 feb5 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a3e:	236a      	movs	r3, #106	; 0x6a
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	4b81      	ldr	r3, [pc, #516]	; (8000c48 <MX_GPIO_Init+0x314>)
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4879      	ldr	r0, [pc, #484]	; (8000c38 <MX_GPIO_Init+0x304>)
 8000a52:	f000 fea9 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5c:	4b7b      	ldr	r3, [pc, #492]	; (8000c4c <MX_GPIO_Init+0x318>)
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4876      	ldr	r0, [pc, #472]	; (8000c44 <MX_GPIO_Init+0x310>)
 8000a6c:	f000 fe9c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a70:	233f      	movs	r3, #63	; 0x3f
 8000a72:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a74:	230b      	movs	r3, #11
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4870      	ldr	r0, [pc, #448]	; (8000c44 <MX_GPIO_Init+0x310>)
 8000a84:	f000 fe90 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f000 fe7f 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000aaa:	f248 1304 	movw	r3, #33028	; 0x8104
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac6:	f000 fe6f 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000aca:	2308      	movs	r3, #8
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ada:	2301      	movs	r3, #1
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f000 fe5e 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000aec:	2310      	movs	r3, #16
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000af0:	230b      	movs	r3, #11
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f000 fe51 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b06:	23e0      	movs	r3, #224	; 0xe0
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b16:	2305      	movs	r3, #5
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f000 fe40 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2c:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <MX_GPIO_Init+0x314>)
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4840      	ldr	r0, [pc, #256]	; (8000c3c <MX_GPIO_Init+0x308>)
 8000b3c:	f000 fe34 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b40:	2302      	movs	r3, #2
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b44:	230b      	movs	r3, #11
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	483a      	ldr	r0, [pc, #232]	; (8000c3c <MX_GPIO_Init+0x308>)
 8000b54:	f000 fe28 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b58:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b5c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4832      	ldr	r0, [pc, #200]	; (8000c3c <MX_GPIO_Init+0x308>)
 8000b72:	f000 fe19 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b76:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b7a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <MX_GPIO_Init+0x314>)
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	482d      	ldr	r0, [pc, #180]	; (8000c40 <MX_GPIO_Init+0x30c>)
 8000b8c:	f000 fe0c 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b90:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4825      	ldr	r0, [pc, #148]	; (8000c40 <MX_GPIO_Init+0x30c>)
 8000baa:	f000 fdfd 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000bae:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481f      	ldr	r0, [pc, #124]	; (8000c44 <MX_GPIO_Init+0x310>)
 8000bc8:	f000 fdee 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000bcc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_GPIO_Init+0x314>)
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4818      	ldr	r0, [pc, #96]	; (8000c44 <MX_GPIO_Init+0x310>)
 8000be2:	f000 fde1 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000be6:	2302      	movs	r3, #2
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <MX_GPIO_Init+0x30c>)
 8000c02:	f000 fdd1 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000c06:	2378      	movs	r3, #120	; 0x78
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c16:	2307      	movs	r3, #7
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_GPIO_Init+0x30c>)
 8000c22:	f000 fdc1 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000c26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2c:	2312      	movs	r3, #18
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e00d      	b.n	8000c50 <MX_GPIO_Init+0x31c>
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48001000 	.word	0x48001000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000c00 	.word	0x48000c00
 8000c44:	48000800 	.word	0x48000800
 8000c48:	10110000 	.word	0x10110000
 8000c4c:	10210000 	.word	0x10210000
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c52:	2303      	movs	r3, #3
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c56:	2304      	movs	r3, #4
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <MX_GPIO_Init+0x35c>)
 8000c62:	f000 fda1 	bl	80017a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2017      	movs	r0, #23
 8000c6c:	f000 fc59 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c70:	2017      	movs	r0, #23
 8000c72:	f000 fc72 	bl	800155a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2028      	movs	r0, #40	; 0x28
 8000c7c:	f000 fc51 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f000 fc6a 	bl	800155a <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3728      	adds	r7, #40	; 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	48000400 	.word	0x48000400

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x44>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_DFSDM_ChannelMspInit+0x7c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d128      	bne.n	8000d5e <HAL_DFSDM_ChannelMspInit+0x72>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d10:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d16:	6613      	str	r3, [r2, #96]	; 0x60
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d28:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d2a:	f043 0310 	orr.w	r3, r3, #16
 8000d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_DFSDM_ChannelMspInit+0x80>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000d3c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000d5a:	f000 fd25 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000028 	.word	0x20000028
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48001000 	.word	0x48001000

08000d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_I2C_MspInit+0x7c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d128      	bne.n	8000de8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_I2C_MspInit+0x80>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <HAL_I2C_MspInit+0x80>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_I2C_MspInit+0x80>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000dae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480b      	ldr	r0, [pc, #44]	; (8000df8 <HAL_I2C_MspInit+0x84>)
 8000dcc:	f000 fcec 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_I2C_MspInit+0x80>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd4:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_I2C_MspInit+0x80>)
 8000dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dda:	6593      	str	r3, [r2, #88]	; 0x58
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_I2C_MspInit+0x80>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005800 	.word	0x40005800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400

08000dfc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_QSPI_MspInit+0x7c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d128      	bne.n	8000e70 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <HAL_QSPI_MspInit+0x80>)
 8000e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e22:	4a16      	ldr	r2, [pc, #88]	; (8000e7c <HAL_QSPI_MspInit+0x80>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6513      	str	r3, [r2, #80]	; 0x50
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <HAL_QSPI_MspInit+0x80>)
 8000e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_QSPI_MspInit+0x80>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_QSPI_MspInit+0x80>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_QSPI_MspInit+0x80>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e4e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e52:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e60:	230a      	movs	r3, #10
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_QSPI_MspInit+0x84>)
 8000e6c:	f000 fc9c 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	a0001000 	.word	0xa0001000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48001000 	.word	0x48001000

08000e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_SPI_MspInit+0x7c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d128      	bne.n	8000ef8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_SPI_MspInit+0x80>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <HAL_SPI_MspInit+0x80>)
 8000eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_SPI_MspInit+0x80>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_SPI_MspInit+0x80>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <HAL_SPI_MspInit+0x80>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_SPI_MspInit+0x80>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ed6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4805      	ldr	r0, [pc, #20]	; (8000f08 <HAL_SPI_MspInit+0x84>)
 8000ef4:	f000 fc58 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40003c00 	.word	0x40003c00
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48000800 	.word	0x48000800

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a2e      	ldr	r2, [pc, #184]	; (8000fe4 <HAL_UART_MspInit+0xd8>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d128      	bne.n	8000f80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f38:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3a:	4b2b      	ldr	r3, [pc, #172]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f42:	61bb      	str	r3, [r7, #24]
 8000f44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f5e:	23c0      	movs	r3, #192	; 0xc0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f6e:	2307      	movs	r3, #7
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	481c      	ldr	r0, [pc, #112]	; (8000fec <HAL_UART_MspInit+0xe0>)
 8000f7a:	f000 fc15 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f7e:	e02d      	b.n	8000fdc <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <HAL_UART_MspInit+0xe4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d128      	bne.n	8000fdc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000fa8:	f043 0308 	orr.w	r3, r3, #8
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_UART_MspInit+0xdc>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <HAL_UART_MspInit+0xe8>)
 8000fd8:	f000 fbe6 	bl	80017a8 <HAL_GPIO_Init>
}
 8000fdc:	bf00      	nop
 8000fde:	3730      	adds	r7, #48	; 0x30
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	40004800 	.word	0x40004800
 8000ff4:	48000c00 	.word	0x48000c00

08000ff8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001018:	d154      	bne.n	80010c4 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104a:	f000 fbad 	bl	80017a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800104e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001060:	230a      	movs	r3, #10
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106e:	f000 fb9b 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a15      	ldr	r2, [pc, #84]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 8001078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d114      	bne.n	80010c0 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6593      	str	r3, [r2, #88]	; 0x58
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80010ae:	f001 f841 	bl	8002134 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_PCD_MspInit+0xd4>)
 80010b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010be:	e001      	b.n	80010c4 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 80010c0:	f001 f838 	bl	8002134 <HAL_PWREx_EnableVddUSB>
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f8e0 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001130:	2020      	movs	r0, #32
 8001132:	f000 fcf9 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001136:	2040      	movs	r0, #64	; 0x40
 8001138:	f000 fcf6 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800113c:	2080      	movs	r0, #128	; 0x80
 800113e:	f000 fcf3 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001146:	f000 fcef 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001152:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001156:	f000 fce7 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800115a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800115e:	f000 fce3 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001162:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001166:	f000 fcdf 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800116a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800116e:	f000 fcdb 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001172:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001176:	f000 fcd7 	bl	8001b28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <SystemInit+0x64>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <SystemInit+0x64>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <SystemInit+0x68>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <SystemInit+0x68>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <SystemInit+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <SystemInit+0x68>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <SystemInit+0x68>)
 80011ac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80011b0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80011b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <SystemInit+0x68>)
 80011b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011bc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <SystemInit+0x68>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <SystemInit+0x68>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <SystemInit+0x68>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SystemInit+0x64>)
 80011d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d6:	609a      	str	r2, [r3, #8]
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	40021000 	.word	0x40021000

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001224 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff ffc6 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011f4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011f6:	e003      	b.n	8001200 <LoopCopyDataInit>

080011f8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011fa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011fc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011fe:	3104      	adds	r1, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001200:	480a      	ldr	r0, [pc, #40]	; (800122c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001204:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001206:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001208:	d3f6      	bcc.n	80011f8 <CopyDataInit>
	ldr	r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <LoopForever+0x12>)
	b	LoopFillZerobss
 800120c:	e002      	b.n	8001214 <LoopFillZerobss>

0800120e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800120e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001210:	f842 3b04 	str.w	r3, [r2], #4

08001214 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <LoopForever+0x16>)
	cmp	r2, r3
 8001216:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001218:	d3f9      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f003 facd 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff f953 	bl	80004c8 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001224:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001228:	08004880 	.word	0x08004880
	ldr	r0, =_sdata
 800122c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001230:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001234:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001238:	20000688 	.word	0x20000688

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>

0800123e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f95f 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f80e 	bl	8001270 <HAL_InitTick>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	e001      	b.n	8001264 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001260:	f7ff fd20 	bl	8000ca4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001264:	79fb      	ldrb	r3, [r7, #7]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_InitTick+0x6c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d023      	beq.n	80012cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <HAL_InitTick+0x70>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_InitTick+0x6c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f96b 	bl	8001576 <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d809      	bhi.n	80012c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b4:	f000 f935 	bl	8001522 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <HAL_InitTick+0x74>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e007      	b.n	80012d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e004      	b.n	80012d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	e001      	b.n	80012d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000004 	.word	0x20000004

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000008 	.word	0x20000008
 800130c:	20000684 	.word	0x20000684

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000684 	.word	0x20000684

08001328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff ffee 	bl	8001310 <HAL_GetTick>
 8001334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001340:	d005      	beq.n	800134e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_Delay+0x40>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800134e:	bf00      	nop
 8001350:	f7ff ffde 	bl	8001310 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	429a      	cmp	r2, r3
 800135e:	d8f7      	bhi.n	8001350 <HAL_Delay+0x28>
  {
  }
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000008 	.word	0x20000008

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff29 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff3e 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff31 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffa2 	bl	80014c8 <SysTick_Config>
 8001584:	4603      	mov	r3, r0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0ac      	b.n	80016fc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f8b2 	bl	8001710 <DFSDM_GetChannelFromInstance>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4b55      	ldr	r3, [pc, #340]	; (8001704 <HAL_DFSDM_ChannelInit+0x174>)
 80015b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e09f      	b.n	80016fc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fb95 	bl	8000cec <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_DFSDM_ChannelInit+0x178>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	4a4f      	ldr	r2, [pc, #316]	; (8001708 <HAL_DFSDM_ChannelInit+0x178>)
 80015ca:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <HAL_DFSDM_ChannelInit+0x178>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d125      	bne.n	8001620 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 80015da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015de:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4948      	ldr	r1, [pc, #288]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a46      	ldr	r2, [pc, #280]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 80015f4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80015f8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	791b      	ldrb	r3, [r3, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d108      	bne.n	8001614 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001602:	4b42      	ldr	r3, [pc, #264]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	3b01      	subs	r3, #1
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	493f      	ldr	r1, [pc, #252]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001614:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a3c      	ldr	r2, [pc, #240]	; (800170c <HAL_DFSDM_ChannelInit+0x17c>)
 800161a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800161e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800162e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800163e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001644:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 020f 	bic.w	r2, r2, #15
 800165c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001684:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	3b01      	subs	r3, #1
 8001696:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f002 0207 	and.w	r2, r2, #7
 80016b0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016dc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f810 	bl	8001710 <DFSDM_GetChannelFromInstance>
 80016f0:	4601      	mov	r1, r0
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_DFSDM_ChannelInit+0x174>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000030 	.word	0x20000030
 8001708:	2000002c 	.word	0x2000002c
 800170c:	40016000 	.word	0x40016000

08001710 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <DFSDM_GetChannelFromInstance+0x7c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d102      	bne.n	8001726 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e02b      	b.n	800177e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <DFSDM_GetChannelFromInstance+0x80>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d102      	bne.n	8001734 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e024      	b.n	800177e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <DFSDM_GetChannelFromInstance+0x84>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d102      	bne.n	8001742 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800173c:	2302      	movs	r3, #2
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e01d      	b.n	800177e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <DFSDM_GetChannelFromInstance+0x88>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d102      	bne.n	8001750 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800174a:	2304      	movs	r3, #4
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	e016      	b.n	800177e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <DFSDM_GetChannelFromInstance+0x8c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d102      	bne.n	800175e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001758:	2305      	movs	r3, #5
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e00f      	b.n	800177e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <DFSDM_GetChannelFromInstance+0x90>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d102      	bne.n	800176c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001766:	2306      	movs	r3, #6
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e008      	b.n	800177e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <DFSDM_GetChannelFromInstance+0x94>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d102      	bne.n	800177a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001774:	2307      	movs	r3, #7
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e001      	b.n	800177e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800177a:	2303      	movs	r3, #3
 800177c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40016000 	.word	0x40016000
 8001790:	40016020 	.word	0x40016020
 8001794:	40016040 	.word	0x40016040
 8001798:	40016080 	.word	0x40016080
 800179c:	400160a0 	.word	0x400160a0
 80017a0:	400160c0 	.word	0x400160c0
 80017a4:	400160e0 	.word	0x400160e0

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b6:	e17f      	b.n	8001ab8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8171 	beq.w	8001ab2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d00b      	beq.n	80017f0 <HAL_GPIO_Init+0x48>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e4:	2b11      	cmp	r3, #17
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b12      	cmp	r3, #18
 80017ee:	d130      	bne.n	8001852 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001826:	2201      	movs	r2, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 0201 	and.w	r2, r3, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b03      	cmp	r3, #3
 800185c:	d118      	bne.n	8001890 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001864:	2201      	movs	r2, #1
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f003 0201 	and.w	r2, r3, #1
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x128>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d123      	bne.n	8001918 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	08da      	lsrs	r2, r3, #3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3208      	adds	r2, #8
 80018d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	220f      	movs	r2, #15
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	08da      	lsrs	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3208      	adds	r2, #8
 8001912:	6939      	ldr	r1, [r7, #16]
 8001914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0203 	and.w	r2, r3, #3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80ac 	beq.w	8001ab2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <HAL_GPIO_Init+0x32c>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a5d      	ldr	r2, [pc, #372]	; (8001ad4 <HAL_GPIO_Init+0x32c>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b5b      	ldr	r3, [pc, #364]	; (8001ad4 <HAL_GPIO_Init+0x32c>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001972:	4a59      	ldr	r2, [pc, #356]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800199c:	d025      	beq.n	80019ea <HAL_GPIO_Init+0x242>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4e      	ldr	r2, [pc, #312]	; (8001adc <HAL_GPIO_Init+0x334>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x23e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4d      	ldr	r2, [pc, #308]	; (8001ae0 <HAL_GPIO_Init+0x338>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x23a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4c      	ldr	r2, [pc, #304]	; (8001ae4 <HAL_GPIO_Init+0x33c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x236>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	; (8001ae8 <HAL_GPIO_Init+0x340>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x232>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <HAL_GPIO_Init+0x344>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x22e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a49      	ldr	r2, [pc, #292]	; (8001af0 <HAL_GPIO_Init+0x348>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x22a>
 80019ce:	2306      	movs	r3, #6
 80019d0:	e00c      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e00a      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e008      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019da:	2304      	movs	r3, #4
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019de:	2303      	movs	r3, #3
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x244>
 80019ea:	2300      	movs	r3, #0
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019fc:	4936      	ldr	r1, [pc, #216]	; (8001ad8 <HAL_GPIO_Init+0x330>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a58:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a5e:	4b25      	ldr	r3, [pc, #148]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aac:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <HAL_GPIO_Init+0x34c>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f47f ae78 	bne.w	80017b8 <HAL_GPIO_Init+0x10>
  }
}
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	48000400 	.word	0x48000400
 8001ae0:	48000800 	.word	0x48000800
 8001ae4:	48000c00 	.word	0x48000c00
 8001ae8:	48001000 	.word	0x48001000
 8001aec:	48001400 	.word	0x48001400
 8001af0:	48001800 	.word	0x48001800
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f806 	bl	8001b58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e081      	b.n	8001c84 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff f8ed 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2224      	movs	r2, #36	; 0x24
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d107      	bne.n	8001be8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	e006      	b.n	8001bf6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001bf4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d104      	bne.n	8001c08 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c06:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	ea42 0103 	orr.w	r1, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	021a      	lsls	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	430a      	orrs	r2, r1
 8001c44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69d9      	ldr	r1, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d138      	bne.n	8001d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e032      	b.n	8001d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2224      	movs	r2, #36	; 0x24
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0201 	bic.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e000      	b.n	8001d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
  }
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d139      	bne.n	8001dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e033      	b.n	8001dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2224      	movs	r2, #36	; 0x24
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e000      	b.n	8001dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbc:	b08f      	sub	sp, #60	; 0x3c
 8001dbe:	af0a      	add	r7, sp, #40	; 0x28
 8001dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e116      	b.n	8001ffa <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff f906 	bl	8000ff8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fa38 	bl	8004280 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	687e      	ldr	r6, [r7, #4]
 8001e18:	466d      	mov	r5, sp
 8001e1a:	f106 0410 	add.w	r4, r6, #16
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2e:	1d33      	adds	r3, r6, #4
 8001e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e32:	6838      	ldr	r0, [r7, #0]
 8001e34:	f002 f9d2 	bl	80041dc <USB_CoreInit>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2202      	movs	r2, #2
 8001e42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e0d7      	b.n	8001ffa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fa26 	bl	80042a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	e04a      	b.n	8001ef2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	333d      	adds	r3, #61	; 0x3d
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	333c      	adds	r3, #60	; 0x3c
 8001e80:	7bfa      	ldrb	r2, [r7, #15]
 8001e82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	b298      	uxth	r0, r3
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3342      	adds	r3, #66	; 0x42
 8001e98:	4602      	mov	r2, r0
 8001e9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	333f      	adds	r3, #63	; 0x3f
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3344      	adds	r3, #68	; 0x44
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3348      	adds	r3, #72	; 0x48
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3350      	adds	r3, #80	; 0x50
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d3af      	bcc.n	8001e5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e044      	b.n	8001f8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	1a9b      	subs	r3, r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d3b5      	bcc.n	8001f02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	687e      	ldr	r6, [r7, #4]
 8001f9e:	466d      	mov	r5, sp
 8001fa0:	f106 0410 	add.w	r4, r6, #16
 8001fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001faa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb4:	1d33      	adds	r3, r6, #4
 8001fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb8:	6838      	ldr	r0, [r7, #0]
 8001fba:	f002 f99d 	bl	80042f8 <USB_DevInit>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e014      	b.n	8001ffa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f80a 	bl	8002002 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 fb2d 	bl	8004652 <USB_DevDisconnect>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002002 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	f043 0303 	orr.w	r3, r3, #3
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40007000 	.word	0x40007000

0800206c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_PWREx_GetVoltageRange+0x18>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40007000 	.word	0x40007000

08002088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002096:	d130      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002098:	4b23      	ldr	r3, [pc, #140]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a4:	d038      	beq.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2232      	movs	r2, #50	; 0x32
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0c9b      	lsrs	r3, r3, #18
 80020c8:	3301      	adds	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020cc:	e002      	b.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e0:	d102      	bne.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f2      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f4:	d110      	bne.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e00f      	b.n	800211a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d007      	beq.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002108:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002110:	4a05      	ldr	r2, [pc, #20]	; (8002128 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002116:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40007000 	.word	0x40007000
 800212c:	20000000 	.word	0x20000000
 8002130:	431bde83 	.word	0x431bde83

08002134 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_PWREx_EnableVddUSB+0x1c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_PWREx_EnableVddUSB+0x1c>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002142:	6053      	str	r3, [r2, #4]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40007000 	.word	0x40007000

08002154 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af02      	add	r7, sp, #8
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff f8d8 	bl	8001310 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e063      	b.n	8002234 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe fe3b 	bl	8000dfc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002186:	f241 3188 	movw	r1, #5000	; 0x1388
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f858 	bl	8002240 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	3b01      	subs	r3, #1
 80021a0:	021a      	lsls	r2, r3, #8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2120      	movs	r1, #32
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f850 	bl	800225c <QSPI_WaitFlagStateUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80021c0:	7afb      	ldrb	r3, [r7, #11]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d131      	bne.n	800222a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021d0:	f023 0310 	bic.w	r3, r3, #16
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6852      	ldr	r2, [r2, #4]
 80021d8:	0611      	lsls	r1, r2, #24
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_QSPI_Init+0xe8>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6912      	ldr	r2, [r2, #16]
 80021f6:	0411      	lsls	r1, r2, #16
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6952      	ldr	r2, [r2, #20]
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6992      	ldr	r2, [r2, #24]
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	430b      	orrs	r3, r1
 800220a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002232:	7afb      	ldrb	r3, [r7, #11]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	ffe0f8fe 	.word	0xffe0f8fe

08002240 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800226c:	e01a      	b.n	80022a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002274:	d016      	beq.n	80022a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002276:	f7ff f84b 	bl	8001310 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	429a      	cmp	r2, r3
 8002284:	d302      	bcc.n	800228c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10b      	bne.n	80022a4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2204      	movs	r2, #4
 8002290:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	f043 0201 	orr.w	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e00e      	b.n	80022c2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1d6      	bne.n	800226e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e3d4      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022de:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022e8:	4b9e      	ldr	r3, [pc, #632]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80e4 	beq.w	80024c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <HAL_RCC_OscConfig+0x4a>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b0c      	cmp	r3, #12
 800230a:	f040 808b 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 8087 	bne.w	8002424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002316:	4b93      	ldr	r3, [pc, #588]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x62>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e3ac      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1a      	ldr	r2, [r3, #32]
 8002332:	4b8c      	ldr	r3, [pc, #560]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d004      	beq.n	8002348 <HAL_RCC_OscConfig+0x7c>
 800233e:	4b89      	ldr	r3, [pc, #548]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002346:	e005      	b.n	8002354 <HAL_RCC_OscConfig+0x88>
 8002348:	4b86      	ldr	r3, [pc, #536]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002354:	4293      	cmp	r3, r2
 8002356:	d223      	bcs.n	80023a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fd3f 	bl	8002de0 <RCC_SetFlashLatencyFromMSIRange>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e38d      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800236c:	4b7d      	ldr	r3, [pc, #500]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a7c      	ldr	r2, [pc, #496]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002372:	f043 0308 	orr.w	r3, r3, #8
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b7a      	ldr	r3, [pc, #488]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4977      	ldr	r1, [pc, #476]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4972      	ldr	r1, [pc, #456]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
 800239e:	e025      	b.n	80023ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a0:	4b70      	ldr	r3, [pc, #448]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6f      	ldr	r2, [pc, #444]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b6d      	ldr	r3, [pc, #436]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	496a      	ldr	r1, [pc, #424]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023be:	4b69      	ldr	r3, [pc, #420]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4965      	ldr	r1, [pc, #404]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fcff 	bl	8002de0 <RCC_SetFlashLatencyFromMSIRange>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e34d      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ec:	f000 fc36 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 80023f0:	4601      	mov	r1, r0
 80023f2:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	4a5a      	ldr	r2, [pc, #360]	; (8002568 <HAL_RCC_OscConfig+0x29c>)
 80023fe:	5cd3      	ldrb	r3, [r2, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa21 f303 	lsr.w	r3, r1, r3
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x2a0>)
 800240a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_OscConfig+0x2a4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ff2d 	bl	8001270 <HAL_InitTick>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d052      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	e331      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d032      	beq.n	8002492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800242c:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002438:	f7fe ff6a 	bl	8001310 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002440:	f7fe ff66 	bl	8001310 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e31a      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002452:	4b44      	ldr	r3, [pc, #272]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a40      	ldr	r2, [pc, #256]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002464:	f043 0308 	orr.w	r3, r3, #8
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	493b      	ldr	r1, [pc, #236]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800247c:	4b39      	ldr	r3, [pc, #228]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4936      	ldr	r1, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800248c:	4313      	orrs	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	e01a      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002492:	4b34      	ldr	r3, [pc, #208]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800249e:	f7fe ff37 	bl	8001310 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a6:	f7fe ff33 	bl	8001310 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e2e7      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x1da>
 80024c4:	e000      	b.n	80024c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d074      	beq.n	80025be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x21a>
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	d10e      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d10b      	bne.n	80024fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d064      	beq.n	80025bc <HAL_RCC_OscConfig+0x2f0>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d160      	bne.n	80025bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e2c4      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x24a>
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e01d      	b.n	8002552 <HAL_RCC_OscConfig+0x286>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x26e>
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e00b      	b.n	8002552 <HAL_RCC_OscConfig+0x286>
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a06      	ldr	r2, [pc, #24]	; (8002564 <HAL_RCC_OscConfig+0x298>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01c      	beq.n	8002594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fed9 	bl	8001310 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002560:	e011      	b.n	8002586 <HAL_RCC_OscConfig+0x2ba>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	08004828 	.word	0x08004828
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7fe fecc 	bl	8001310 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e280      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002586:	4baf      	ldr	r3, [pc, #700]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x2a8>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe febc 	bl	8001310 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe feb8 	bl	8001310 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e26c      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ae:	4ba5      	ldr	r3, [pc, #660]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x2d0>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d060      	beq.n	800268c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_OscConfig+0x310>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d119      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d116      	bne.n	800260a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	4b99      	ldr	r3, [pc, #612]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_OscConfig+0x328>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e249      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b93      	ldr	r3, [pc, #588]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4990      	ldr	r1, [pc, #576]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	e040      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d023      	beq.n	800265a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002612:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a8b      	ldr	r2, [pc, #556]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fe77 	bl	8001310 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002626:	f7fe fe73 	bl	8001310 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e227      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002638:	4b82      	ldr	r3, [pc, #520]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b7f      	ldr	r3, [pc, #508]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	497c      	ldr	r1, [pc, #496]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
 8002658:	e018      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b7a      	ldr	r3, [pc, #488]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a79      	ldr	r2, [pc, #484]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fe53 	bl	8001310 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266e:	f7fe fe4f 	bl	8001310 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e203      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002680:	4b70      	ldr	r3, [pc, #448]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01c      	beq.n	80026da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a0:	4b68      	ldr	r3, [pc, #416]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a6:	4a67      	ldr	r2, [pc, #412]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe fe2e 	bl	8001310 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b8:	f7fe fe2a 	bl	8001310 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e1de      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	4b5e      	ldr	r3, [pc, #376]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x3ec>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fe11 	bl	8001310 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fe0d 	bl	8001310 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1c1      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	4b4f      	ldr	r3, [pc, #316]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ef      	bne.n	80026f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80a6 	beq.w	800286c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002724:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10d      	bne.n	800274c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a43      	ldr	r2, [pc, #268]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
 800273c:	4b41      	ldr	r3, [pc, #260]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002754:	2b00      	cmp	r3, #0
 8002756:	d118      	bne.n	800278a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002758:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a3a      	ldr	r2, [pc, #232]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002764:	f7fe fdd4 	bl	8001310 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe fdd0 	bl	8001310 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e184      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b32      	ldr	r3, [pc, #200]	; (8002848 <HAL_RCC_OscConfig+0x57c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x4d8>
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a2:	e024      	b.n	80027ee <HAL_RCC_OscConfig+0x522>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d110      	bne.n	80027ce <HAL_RCC_OscConfig+0x502>
 80027ac:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	4a20      	ldr	r2, [pc, #128]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027cc:	e00f      	b.n	80027ee <HAL_RCC_OscConfig+0x522>
 80027ce:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f023 0301 	bic.w	r3, r3, #1
 80027da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fd8b 	bl	8001310 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fd87 	bl	8001310 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e139      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x578>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ed      	beq.n	80027fe <HAL_RCC_OscConfig+0x532>
 8002822:	e01a      	b.n	800285a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fd74 	bl	8001310 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800282a:	e00f      	b.n	800284c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7fe fd70 	bl	8001310 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d906      	bls.n	800284c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e122      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800284c:	4b90      	ldr	r3, [pc, #576]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e8      	bne.n	800282c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d105      	bne.n	800286c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002860:	4b8b      	ldr	r3, [pc, #556]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	4a8a      	ldr	r2, [pc, #552]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8108 	beq.w	8002a86 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	2b02      	cmp	r3, #2
 800287c:	f040 80d0 	bne.w	8002a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002880:	4b83      	ldr	r3, [pc, #524]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	429a      	cmp	r2, r3
 8002892:	d130      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	3b01      	subs	r3, #1
 80028a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d127      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11f      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c0:	2a07      	cmp	r2, #7
 80028c2:	bf14      	ite	ne
 80028c4:	2201      	movne	r2, #1
 80028c6:	2200      	moveq	r2, #0
 80028c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d113      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	085b      	lsrs	r3, r3, #1
 80028da:	3b01      	subs	r3, #1
 80028dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d109      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	3b01      	subs	r3, #1
 80028f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d06e      	beq.n	80029d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b0c      	cmp	r3, #12
 80028fa:	d069      	beq.n	80029d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028fc:	4b64      	ldr	r3, [pc, #400]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002908:	4b61      	ldr	r3, [pc, #388]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b7      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7fe fcf4 	bl	8001310 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fcf0 	bl	8001310 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0a4      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293e:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCC_OscConfig+0x7c8>)
 8002950:	4013      	ands	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800295a:	3a01      	subs	r2, #1
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002964:	0212      	lsls	r2, r2, #8
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800296c:	0852      	lsrs	r2, r2, #1
 800296e:	3a01      	subs	r2, #1
 8002970:	0552      	lsls	r2, r2, #21
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002978:	0852      	lsrs	r2, r2, #1
 800297a:	3a01      	subs	r2, #1
 800297c:	0652      	lsls	r2, r2, #25
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002984:	0912      	lsrs	r2, r2, #4
 8002986:	0452      	lsls	r2, r2, #17
 8002988:	430a      	orrs	r2, r1
 800298a:	4941      	ldr	r1, [pc, #260]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3e      	ldr	r2, [pc, #248]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800299c:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a8:	f7fe fcb2 	bl	8001310 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fcae 	bl	8001310 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e062      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c2:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029ce:	e05a      	b.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e059      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d152      	bne.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 80029f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029f8:	f7fe fc8a 	bl	8001310 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fc86 	bl	8001310 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e03a      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCC_OscConfig+0x734>
 8002a1e:	e032      	b.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b0c      	cmp	r3, #12
 8002a24:	d02d      	beq.n	8002a82 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a44:	f023 0303 	bic.w	r3, r3, #3
 8002a48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a4a:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fc59 	bl	8001310 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe fc55 	bl	8001310 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e009      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_RCC_OscConfig+0x7c4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x796>
 8002a80:	e001      	b.n	8002a86 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000
 8002a94:	f99d808c 	.word	0xf99d808c

08002a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0c8      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002aac:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d910      	bls.n	8002adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 0207 	bic.w	r2, r3, #7
 8002ac2:	4961      	ldr	r1, [pc, #388]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b0      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d04c      	beq.n	8002b82 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af0:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d121      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e09e      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b08:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d115      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e092      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b20:	4b4a      	ldr	r3, [pc, #296]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e086      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e07e      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b40:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 0203 	bic.w	r2, r3, #3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	493f      	ldr	r1, [pc, #252]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b52:	f7fe fbdd 	bl	8001310 <HAL_GetTick>
 8002b56:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5a:	f7fe fbd9 	bl	8001310 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e066      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 020c 	and.w	r2, r3, #12
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d1eb      	bne.n	8002b5a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b8e:	4b2f      	ldr	r3, [pc, #188]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	492c      	ldr	r1, [pc, #176]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d210      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0207 	bic.w	r2, r3, #7
 8002bb6:	4924      	ldr	r1, [pc, #144]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <HAL_RCC_ClockConfig+0x1b0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e036      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4918      	ldr	r1, [pc, #96]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4910      	ldr	r1, [pc, #64]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c0e:	f000 f825 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_RCC_ClockConfig+0x1b4>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fb1c 	bl	8001270 <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	08004828 	.word	0x08004828
 8002c54:	20000000 	.word	0x20000000
 8002c58:	20000004 	.word	0x20000004

08002c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x34>
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d121      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d11e      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca2:	0a1b      	lsrs	r3, r3, #8
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10d      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d102      	bne.n	8002cda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	e004      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ce2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d133      	bne.n	8002d52 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d002      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa4>
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d003      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0xaa>
 8002cfe:	e005      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d02:	617b      	str	r3, [r7, #20]
      break;
 8002d04:	e005      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x110>)
 8002d08:	617b      	str	r3, [r7, #20]
      break;
 8002d0a:	e002      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	617b      	str	r3, [r7, #20]
      break;
 8002d10:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	fb02 f203 	mul.w	r2, r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0e5b      	lsrs	r3, r3, #25
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d52:	69bb      	ldr	r3, [r7, #24]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40021000 	.word	0x40021000
 8002d64:	08004840 	.word	0x08004840
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4601      	mov	r1, r0
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	08004838 	.word	0x08004838

08002db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002db8:	f7ff ffda 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002dbc:	4601      	mov	r1, r0
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0adb      	lsrs	r3, r3, #11
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dca:	5cd3      	ldrb	r3, [r2, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08004838 	.word	0x08004838

08002de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002df8:	f7ff f938 	bl	800206c <HAL_PWREx_GetVoltageRange>
 8002dfc:	6178      	str	r0, [r7, #20]
 8002dfe:	e014      	b.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e0c:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e18:	f7ff f928 	bl	800206c <HAL_PWREx_GetVoltageRange>
 8002e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e1e:	4b1e      	ldr	r3, [pc, #120]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d10b      	bne.n	8002e4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d919      	bls.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2ba0      	cmp	r3, #160	; 0xa0
 8002e3c:	d902      	bls.n	8002e44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e3e:	2302      	movs	r3, #2
 8002e40:	613b      	str	r3, [r7, #16]
 8002e42:	e013      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e010      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	; 0x80
 8002e4e:	d902      	bls.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e50:	2303      	movs	r3, #3
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e00a      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d102      	bne.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	e004      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b70      	cmp	r3, #112	; 0x70
 8002e66:	d101      	bne.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e68:	2301      	movs	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 0207 	bic.w	r2, r3, #7
 8002e74:	4909      	ldr	r1, [pc, #36]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d001      	beq.n	8002e8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40022000 	.word	0x40022000

08002ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eac:	2300      	movs	r3, #0
 8002eae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d03f      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d01c      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eca:	d802      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00e      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ed0:	e01f      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002ed2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed6:	d003      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002edc:	d01c      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002ede:	e018      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee0:	4b85      	ldr	r3, [pc, #532]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a84      	ldr	r2, [pc, #528]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eec:	e015      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 fac9 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002efe:	e00c      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3320      	adds	r3, #32
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fbb0 	bl	800366c <RCCEx_PLLSAI2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	74fb      	strb	r3, [r7, #19]
      break;
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f20:	4b75      	ldr	r3, [pc, #468]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f2e:	4972      	ldr	r1, [pc, #456]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f36:	e001      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03f      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d01c      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f56:	d802      	bhi.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00e      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002f5c:	e01f      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f62:	d003      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f68:	d01c      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002f6a:	e018      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f6c:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f78:	e015      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa83 	bl	800348c <RCCEx_PLLSAI1_Config>
 8002f86:	4603      	mov	r3, r0
 8002f88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8a:	e00c      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3320      	adds	r3, #32
 8002f90:	2100      	movs	r1, #0
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fb6a 	bl	800366c <RCCEx_PLLSAI2_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	74fb      	strb	r3, [r7, #19]
      break;
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fac:	4b52      	ldr	r3, [pc, #328]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fba:	494f      	ldr	r1, [pc, #316]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a0 	beq.w	8003116 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fda:	4b47      	ldr	r3, [pc, #284]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00d      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff0:	4b41      	ldr	r3, [pc, #260]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003008:	2301      	movs	r3, #1
 800300a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a3a      	ldr	r2, [pc, #232]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003018:	f7fe f97a 	bl	8001310 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301e:	e009      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003020:	f7fe f976 	bl	8001310 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d902      	bls.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	74fb      	strb	r3, [r7, #19]
        break;
 8003032:	e005      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003034:	4b31      	ldr	r3, [pc, #196]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ef      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d15c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003050:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01f      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	d019      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003064:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003070:	4b21      	ldr	r3, [pc, #132]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a2:	f7fe f935 	bl	8001310 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	e00b      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe f931 	bl	8001310 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d902      	bls.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	74fb      	strb	r3, [r7, #19]
            break;
 80030c0:	e006      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c2:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0ec      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030ee:	e009      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
 80030f4:	e006      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003104:	7c7b      	ldrb	r3, [r7, #17]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	4b9e      	ldr	r3, [pc, #632]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310e:	4a9d      	ldr	r2, [pc, #628]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	4b98      	ldr	r3, [pc, #608]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 0203 	bic.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	4994      	ldr	r1, [pc, #592]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003144:	4b8f      	ldr	r3, [pc, #572]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f023 020c 	bic.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003152:	498c      	ldr	r1, [pc, #560]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003166:	4b87      	ldr	r3, [pc, #540]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	4983      	ldr	r1, [pc, #524]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003188:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	497b      	ldr	r1, [pc, #492]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	4972      	ldr	r1, [pc, #456]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031cc:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031da:	496a      	ldr	r1, [pc, #424]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ee:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	4961      	ldr	r1, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003210:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	4959      	ldr	r1, [pc, #356]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003232:	4b54      	ldr	r3, [pc, #336]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	4950      	ldr	r1, [pc, #320]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003254:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	4948      	ldr	r1, [pc, #288]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	493f      	ldr	r1, [pc, #252]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d028      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003298:	4b3a      	ldr	r3, [pc, #232]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a6:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b6:	d106      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a31      	ldr	r2, [pc, #196]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c2:	60d3      	str	r3, [r2, #12]
 80032c4:	e011      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f8d8 	bl	800348c <RCCEx_PLLSAI1_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	491f      	ldr	r1, [pc, #124]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003314:	d106      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800331c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003320:	60d3      	str	r3, [r2, #12]
 8003322:	e011      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800332c:	d10c      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f8a9 	bl	800348c <RCCEx_PLLSAI1_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02b      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003362:	4908      	ldr	r1, [pc, #32]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003372:	d109      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800337a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337e:	60d3      	str	r3, [r2, #12]
 8003380:	e014      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003390:	d10c      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	2101      	movs	r1, #1
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f877 	bl	800348c <RCCEx_PLLSAI1_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80033a8:	7cfb      	ldrb	r3, [r7, #19]
 80033aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02f      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c6:	4928      	ldr	r1, [pc, #160]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f854 	bl	800348c <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d014      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	74bb      	strb	r3, [r7, #18]
 80033f2:	e011      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	2102      	movs	r1, #2
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f931 	bl	800366c <RCCEx_PLLSAI2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003432:	490d      	ldr	r1, [pc, #52]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003456:	4904      	ldr	r1, [pc, #16]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800345e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000

0800348c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800349a:	4b73      	ldr	r3, [pc, #460]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d018      	beq.n	80034d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034a6:	4b70      	ldr	r3, [pc, #448]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0203 	and.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d10d      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
       ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034be:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
       ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d044      	beq.n	800355c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
 80034d6:	e041      	b.n	800355c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d00c      	beq.n	80034fa <RCCEx_PLLSAI1_Config+0x6e>
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d013      	beq.n	800350c <RCCEx_PLLSAI1_Config+0x80>
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d120      	bne.n	800352a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034e8:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d11d      	bne.n	8003530 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f8:	e01a      	b.n	8003530 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034fa:	4b5b      	ldr	r3, [pc, #364]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350a:	e013      	b.n	8003534 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800350c:	4b56      	ldr	r3, [pc, #344]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10f      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003518:	4b53      	ldr	r3, [pc, #332]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d109      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003528:	e006      	b.n	8003538 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      break;
 800352e:	e004      	b.n	800353a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003530:	bf00      	nop
 8003532:	e002      	b.n	800353a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003534:	bf00      	nop
 8003536:	e000      	b.n	800353a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003538:	bf00      	nop
    }

    if(status == HAL_OK)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10d      	bne.n	800355c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003540:	4b49      	ldr	r3, [pc, #292]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	3b01      	subs	r3, #1
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	430b      	orrs	r3, r1
 8003556:	4944      	ldr	r1, [pc, #272]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003558:	4313      	orrs	r3, r2
 800355a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d17d      	bne.n	800365e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003562:	4b41      	ldr	r3, [pc, #260]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800356c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356e:	f7fd fecf 	bl	8001310 <HAL_GetTick>
 8003572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003574:	e009      	b.n	800358a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003576:	f7fd fecb 	bl	8001310 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d902      	bls.n	800358a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	73fb      	strb	r3, [r7, #15]
        break;
 8003588:	e005      	b.n	8003596 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ef      	bne.n	8003576 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d160      	bne.n	800365e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d111      	bne.n	80035c6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a2:	4b31      	ldr	r3, [pc, #196]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	0211      	lsls	r1, r2, #8
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68d2      	ldr	r2, [r2, #12]
 80035b8:	0912      	lsrs	r2, r2, #4
 80035ba:	0452      	lsls	r2, r2, #17
 80035bc:	430a      	orrs	r2, r1
 80035be:	492a      	ldr	r1, [pc, #168]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	610b      	str	r3, [r1, #16]
 80035c4:	e027      	b.n	8003616 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d112      	bne.n	80035f2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035cc:	4b26      	ldr	r3, [pc, #152]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80035d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6892      	ldr	r2, [r2, #8]
 80035dc:	0211      	lsls	r1, r2, #8
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6912      	ldr	r2, [r2, #16]
 80035e2:	0852      	lsrs	r2, r2, #1
 80035e4:	3a01      	subs	r2, #1
 80035e6:	0552      	lsls	r2, r2, #21
 80035e8:	430a      	orrs	r2, r1
 80035ea:	491f      	ldr	r1, [pc, #124]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	610b      	str	r3, [r1, #16]
 80035f0:	e011      	b.n	8003616 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6892      	ldr	r2, [r2, #8]
 8003602:	0211      	lsls	r1, r2, #8
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6952      	ldr	r2, [r2, #20]
 8003608:	0852      	lsrs	r2, r2, #1
 800360a:	3a01      	subs	r2, #1
 800360c:	0652      	lsls	r2, r2, #25
 800360e:	430a      	orrs	r2, r1
 8003610:	4915      	ldr	r1, [pc, #84]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a13      	ldr	r2, [pc, #76]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800361c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003620:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fd fe75 	bl	8001310 <HAL_GetTick>
 8003626:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003628:	e009      	b.n	800363e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800362a:	f7fd fe71 	bl	8001310 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d902      	bls.n	800363e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	73fb      	strb	r3, [r7, #15]
          break;
 800363c:	e005      	b.n	800364a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ef      	beq.n	800362a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800364a:	7bfb      	ldrb	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4903      	ldr	r1, [pc, #12]	; (8003668 <RCCEx_PLLSAI1_Config+0x1dc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000

0800366c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800367a:	4b68      	ldr	r3, [pc, #416]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d018      	beq.n	80036b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003686:	4b65      	ldr	r3, [pc, #404]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0203 	and.w	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d10d      	bne.n	80036b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
       ||
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800369e:	4b5f      	ldr	r3, [pc, #380]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	091b      	lsrs	r3, r3, #4
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
       ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d044      	beq.n	800373c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
 80036b6:	e041      	b.n	800373c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d00c      	beq.n	80036da <RCCEx_PLLSAI2_Config+0x6e>
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d013      	beq.n	80036ec <RCCEx_PLLSAI2_Config+0x80>
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d120      	bne.n	800370a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036c8:	4b54      	ldr	r3, [pc, #336]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11d      	bne.n	8003710 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d8:	e01a      	b.n	8003710 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036da:	4b50      	ldr	r3, [pc, #320]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d116      	bne.n	8003714 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ea:	e013      	b.n	8003714 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ec:	4b4b      	ldr	r3, [pc, #300]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10f      	bne.n	8003718 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036f8:	4b48      	ldr	r3, [pc, #288]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d109      	bne.n	8003718 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003708:	e006      	b.n	8003718 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      break;
 800370e:	e004      	b.n	800371a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003710:	bf00      	nop
 8003712:	e002      	b.n	800371a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003714:	bf00      	nop
 8003716:	e000      	b.n	800371a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003718:	bf00      	nop
    }

    if(status == HAL_OK)
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003720:	4b3e      	ldr	r3, [pc, #248]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	3b01      	subs	r3, #1
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	430b      	orrs	r3, r1
 8003736:	4939      	ldr	r1, [pc, #228]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d167      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003742:	4b36      	ldr	r3, [pc, #216]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a35      	ldr	r2, [pc, #212]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374e:	f7fd fddf 	bl	8001310 <HAL_GetTick>
 8003752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003754:	e009      	b.n	800376a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003756:	f7fd fddb 	bl	8001310 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d902      	bls.n	800376a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	73fb      	strb	r3, [r7, #15]
        break;
 8003768:	e005      	b.n	8003776 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800376a:	4b2c      	ldr	r3, [pc, #176]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ef      	bne.n	8003756 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d14a      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d111      	bne.n	80037a6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6892      	ldr	r2, [r2, #8]
 8003792:	0211      	lsls	r1, r2, #8
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68d2      	ldr	r2, [r2, #12]
 8003798:	0912      	lsrs	r2, r2, #4
 800379a:	0452      	lsls	r2, r2, #17
 800379c:	430a      	orrs	r2, r1
 800379e:	491f      	ldr	r1, [pc, #124]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	614b      	str	r3, [r1, #20]
 80037a4:	e011      	b.n	80037ca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	0211      	lsls	r1, r2, #8
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6912      	ldr	r2, [r2, #16]
 80037bc:	0852      	lsrs	r2, r2, #1
 80037be:	3a01      	subs	r2, #1
 80037c0:	0652      	lsls	r2, r2, #25
 80037c2:	430a      	orrs	r2, r1
 80037c4:	4915      	ldr	r1, [pc, #84]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037ca:	4b14      	ldr	r3, [pc, #80]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d6:	f7fd fd9b 	bl	8001310 <HAL_GetTick>
 80037da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037dc:	e009      	b.n	80037f2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037de:	f7fd fd97 	bl	8001310 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d902      	bls.n	80037f2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	73fb      	strb	r3, [r7, #15]
          break;
 80037f0:	e005      	b.n	80037fe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f2:	4b0a      	ldr	r3, [pc, #40]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0ef      	beq.n	80037de <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	4903      	ldr	r1, [pc, #12]	; (800381c <RCCEx_PLLSAI2_Config+0x1b0>)
 800380e:	4313      	orrs	r3, r2
 8003810:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000

08003820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e095      	b.n	800395e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003842:	d009      	beq.n	8003858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
 800384a:	e005      	b.n	8003858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fb06 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003898:	d902      	bls.n	80038a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e002      	b.n	80038a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038ae:	d007      	beq.n	80038c0 <HAL_SPI_Init+0xa0>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b8:	d002      	beq.n	80038c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	ea42 0103 	orr.w	r1, r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	f003 0204 	and.w	r2, r3, #4
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800393c:	ea42 0103 	orr.w	r1, r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e040      	b.n	80039fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd fabf 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2224      	movs	r2, #36	; 0x24
 8003992:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f82d 	bl	8003a04 <UART_SetConfig>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e022      	b.n	80039fa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 faab 	bl	8003f18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f042 0201 	orr.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fb32 	bl	800405c <UART_CheckIdleState>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a04:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a08:	b088      	sub	sp, #32
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4bac      	ldr	r3, [pc, #688]	; (8003ce4 <UART_SetConfig+0x2e0>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	69f9      	ldr	r1, [r7, #28]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4aa2      	ldr	r2, [pc, #648]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a99      	ldr	r2, [pc, #612]	; (8003cec <UART_SetConfig+0x2e8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d121      	bne.n	8003ad0 <UART_SetConfig+0xcc>
 8003a8c:	4b98      	ldr	r3, [pc, #608]	; (8003cf0 <UART_SetConfig+0x2ec>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d816      	bhi.n	8003ac8 <UART_SetConfig+0xc4>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <UART_SetConfig+0x9c>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ab1 	.word	0x08003ab1
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ab7 	.word	0x08003ab7
 8003aac:	08003ac3 	.word	0x08003ac3
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	76fb      	strb	r3, [r7, #27]
 8003ab4:	e0e8      	b.n	8003c88 <UART_SetConfig+0x284>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	76fb      	strb	r3, [r7, #27]
 8003aba:	e0e5      	b.n	8003c88 <UART_SetConfig+0x284>
 8003abc:	2304      	movs	r3, #4
 8003abe:	76fb      	strb	r3, [r7, #27]
 8003ac0:	e0e2      	b.n	8003c88 <UART_SetConfig+0x284>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	76fb      	strb	r3, [r7, #27]
 8003ac6:	e0df      	b.n	8003c88 <UART_SetConfig+0x284>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	bf00      	nop
 8003ace:	e0db      	b.n	8003c88 <UART_SetConfig+0x284>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a87      	ldr	r2, [pc, #540]	; (8003cf4 <UART_SetConfig+0x2f0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d134      	bne.n	8003b44 <UART_SetConfig+0x140>
 8003ada:	4b85      	ldr	r3, [pc, #532]	; (8003cf0 <UART_SetConfig+0x2ec>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	d829      	bhi.n	8003b3c <UART_SetConfig+0x138>
 8003ae8:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <UART_SetConfig+0xec>)
 8003aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aee:	bf00      	nop
 8003af0:	08003b25 	.word	0x08003b25
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b3d 	.word	0x08003b3d
 8003afc:	08003b3d 	.word	0x08003b3d
 8003b00:	08003b31 	.word	0x08003b31
 8003b04:	08003b3d 	.word	0x08003b3d
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003b3d 	.word	0x08003b3d
 8003b10:	08003b2b 	.word	0x08003b2b
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b3d 	.word	0x08003b3d
 8003b20:	08003b37 	.word	0x08003b37
 8003b24:	2300      	movs	r3, #0
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e0ae      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e0ab      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b30:	2304      	movs	r3, #4
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e0a8      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b36:	2308      	movs	r3, #8
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e0a5      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	76fb      	strb	r3, [r7, #27]
 8003b40:	bf00      	nop
 8003b42:	e0a1      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6b      	ldr	r2, [pc, #428]	; (8003cf8 <UART_SetConfig+0x2f4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d120      	bne.n	8003b90 <UART_SetConfig+0x18c>
 8003b4e:	4b68      	ldr	r3, [pc, #416]	; (8003cf0 <UART_SetConfig+0x2ec>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d00f      	beq.n	8003b7c <UART_SetConfig+0x178>
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d802      	bhi.n	8003b66 <UART_SetConfig+0x162>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <UART_SetConfig+0x16c>
 8003b64:	e010      	b.n	8003b88 <UART_SetConfig+0x184>
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d005      	beq.n	8003b76 <UART_SetConfig+0x172>
 8003b6a:	2b30      	cmp	r3, #48	; 0x30
 8003b6c:	d009      	beq.n	8003b82 <UART_SetConfig+0x17e>
 8003b6e:	e00b      	b.n	8003b88 <UART_SetConfig+0x184>
 8003b70:	2300      	movs	r3, #0
 8003b72:	76fb      	strb	r3, [r7, #27]
 8003b74:	e088      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b76:	2302      	movs	r3, #2
 8003b78:	76fb      	strb	r3, [r7, #27]
 8003b7a:	e085      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	76fb      	strb	r3, [r7, #27]
 8003b80:	e082      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b82:	2308      	movs	r3, #8
 8003b84:	76fb      	strb	r3, [r7, #27]
 8003b86:	e07f      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b88:	2310      	movs	r3, #16
 8003b8a:	76fb      	strb	r3, [r7, #27]
 8003b8c:	bf00      	nop
 8003b8e:	e07b      	b.n	8003c88 <UART_SetConfig+0x284>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a59      	ldr	r2, [pc, #356]	; (8003cfc <UART_SetConfig+0x2f8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d120      	bne.n	8003bdc <UART_SetConfig+0x1d8>
 8003b9a:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <UART_SetConfig+0x2ec>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d00f      	beq.n	8003bc8 <UART_SetConfig+0x1c4>
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d802      	bhi.n	8003bb2 <UART_SetConfig+0x1ae>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <UART_SetConfig+0x1b8>
 8003bb0:	e010      	b.n	8003bd4 <UART_SetConfig+0x1d0>
 8003bb2:	2b80      	cmp	r3, #128	; 0x80
 8003bb4:	d005      	beq.n	8003bc2 <UART_SetConfig+0x1be>
 8003bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb8:	d009      	beq.n	8003bce <UART_SetConfig+0x1ca>
 8003bba:	e00b      	b.n	8003bd4 <UART_SetConfig+0x1d0>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	76fb      	strb	r3, [r7, #27]
 8003bc0:	e062      	b.n	8003c88 <UART_SetConfig+0x284>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	76fb      	strb	r3, [r7, #27]
 8003bc6:	e05f      	b.n	8003c88 <UART_SetConfig+0x284>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	e05c      	b.n	8003c88 <UART_SetConfig+0x284>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	76fb      	strb	r3, [r7, #27]
 8003bd2:	e059      	b.n	8003c88 <UART_SetConfig+0x284>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	bf00      	nop
 8003bda:	e055      	b.n	8003c88 <UART_SetConfig+0x284>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a47      	ldr	r2, [pc, #284]	; (8003d00 <UART_SetConfig+0x2fc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d124      	bne.n	8003c30 <UART_SetConfig+0x22c>
 8003be6:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <UART_SetConfig+0x2ec>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf4:	d012      	beq.n	8003c1c <UART_SetConfig+0x218>
 8003bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfa:	d802      	bhi.n	8003c02 <UART_SetConfig+0x1fe>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <UART_SetConfig+0x20c>
 8003c00:	e012      	b.n	8003c28 <UART_SetConfig+0x224>
 8003c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c06:	d006      	beq.n	8003c16 <UART_SetConfig+0x212>
 8003c08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c0c:	d009      	beq.n	8003c22 <UART_SetConfig+0x21e>
 8003c0e:	e00b      	b.n	8003c28 <UART_SetConfig+0x224>
 8003c10:	2300      	movs	r3, #0
 8003c12:	76fb      	strb	r3, [r7, #27]
 8003c14:	e038      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c16:	2302      	movs	r3, #2
 8003c18:	76fb      	strb	r3, [r7, #27]
 8003c1a:	e035      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	76fb      	strb	r3, [r7, #27]
 8003c20:	e032      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c22:	2308      	movs	r3, #8
 8003c24:	76fb      	strb	r3, [r7, #27]
 8003c26:	e02f      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	76fb      	strb	r3, [r7, #27]
 8003c2c:	bf00      	nop
 8003c2e:	e02b      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d124      	bne.n	8003c84 <UART_SetConfig+0x280>
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <UART_SetConfig+0x2ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c48:	d012      	beq.n	8003c70 <UART_SetConfig+0x26c>
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4e:	d802      	bhi.n	8003c56 <UART_SetConfig+0x252>
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <UART_SetConfig+0x260>
 8003c54:	e012      	b.n	8003c7c <UART_SetConfig+0x278>
 8003c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5a:	d006      	beq.n	8003c6a <UART_SetConfig+0x266>
 8003c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c60:	d009      	beq.n	8003c76 <UART_SetConfig+0x272>
 8003c62:	e00b      	b.n	8003c7c <UART_SetConfig+0x278>
 8003c64:	2300      	movs	r3, #0
 8003c66:	76fb      	strb	r3, [r7, #27]
 8003c68:	e00e      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	76fb      	strb	r3, [r7, #27]
 8003c6e:	e00b      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c70:	2304      	movs	r3, #4
 8003c72:	76fb      	strb	r3, [r7, #27]
 8003c74:	e008      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c76:	2308      	movs	r3, #8
 8003c78:	76fb      	strb	r3, [r7, #27]
 8003c7a:	e005      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	76fb      	strb	r3, [r7, #27]
 8003c80:	bf00      	nop
 8003c82:	e001      	b.n	8003c88 <UART_SetConfig+0x284>
 8003c84:	2310      	movs	r3, #16
 8003c86:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	f040 8087 	bne.w	8003da2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c94:	7efb      	ldrb	r3, [r7, #27]
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d836      	bhi.n	8003d08 <UART_SetConfig+0x304>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x29c>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cc5 	.word	0x08003cc5
 8003ca4:	08003d09 	.word	0x08003d09
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003d09 	.word	0x08003d09
 8003cb0:	08003cd3 	.word	0x08003cd3
 8003cb4:	08003d09 	.word	0x08003d09
 8003cb8:	08003d09 	.word	0x08003d09
 8003cbc:	08003d09 	.word	0x08003d09
 8003cc0:	08003cdb 	.word	0x08003cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc4:	f7ff f860 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003cc8:	6178      	str	r0, [r7, #20]
        break;
 8003cca:	e022      	b.n	8003d12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ccc:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <UART_SetConfig+0x300>)
 8003cce:	617b      	str	r3, [r7, #20]
        break;
 8003cd0:	e01f      	b.n	8003d12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd2:	f7fe ffc3 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003cd6:	6178      	str	r0, [r7, #20]
        break;
 8003cd8:	e01b      	b.n	8003d12 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cde:	617b      	str	r3, [r7, #20]
        break;
 8003ce0:	e017      	b.n	8003d12 <UART_SetConfig+0x30e>
 8003ce2:	bf00      	nop
 8003ce4:	efff69f3 	.word	0xefff69f3
 8003ce8:	40008000 	.word	0x40008000
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40004400 	.word	0x40004400
 8003cf8:	40004800 	.word	0x40004800
 8003cfc:	40004c00 	.word	0x40004c00
 8003d00:	40005000 	.word	0x40005000
 8003d04:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	76bb      	strb	r3, [r7, #26]
        break;
 8003d10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80f1 	beq.w	8003efc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4413      	add	r3, r2
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d305      	bcc.n	8003d36 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d902      	bls.n	8003d3c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	76bb      	strb	r3, [r7, #26]
 8003d3a:	e0df      	b.n	8003efc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	f04f 0400 	mov.w	r4, #0
 8003d4c:	0214      	lsls	r4, r2, #8
 8003d4e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d52:	020b      	lsls	r3, r1, #8
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6852      	ldr	r2, [r2, #4]
 8003d58:	0852      	lsrs	r2, r2, #1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	eb13 0b01 	adds.w	fp, r3, r1
 8003d64:	eb44 0c02 	adc.w	ip, r4, r2
 8003d68:	4658      	mov	r0, fp
 8003d6a:	4661      	mov	r1, ip
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f04f 0400 	mov.w	r4, #0
 8003d74:	461a      	mov	r2, r3
 8003d76:	4623      	mov	r3, r4
 8003d78:	f7fc fa26 	bl	80001c8 <__aeabi_uldivmod>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	460c      	mov	r4, r1
 8003d80:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d88:	d308      	bcc.n	8003d9c <UART_SetConfig+0x398>
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d90:	d204      	bcs.n	8003d9c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e0af      	b.n	8003efc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	76bb      	strb	r3, [r7, #26]
 8003da0:	e0ac      	b.n	8003efc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003daa:	d15b      	bne.n	8003e64 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003dac:	7efb      	ldrb	r3, [r7, #27]
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d827      	bhi.n	8003e02 <UART_SetConfig+0x3fe>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x3b4>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003de5 	.word	0x08003de5
 8003dc0:	08003ded 	.word	0x08003ded
 8003dc4:	08003e03 	.word	0x08003e03
 8003dc8:	08003df3 	.word	0x08003df3
 8003dcc:	08003e03 	.word	0x08003e03
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e03 	.word	0x08003e03
 8003dd8:	08003dfb 	.word	0x08003dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe ffd4 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003de0:	6178      	str	r0, [r7, #20]
        break;
 8003de2:	e013      	b.n	8003e0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7fe ffe6 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003de8:	6178      	str	r0, [r7, #20]
        break;
 8003dea:	e00f      	b.n	8003e0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dec:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <UART_SetConfig+0x510>)
 8003dee:	617b      	str	r3, [r7, #20]
        break;
 8003df0:	e00c      	b.n	8003e0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df2:	f7fe ff33 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003df6:	6178      	str	r0, [r7, #20]
        break;
 8003df8:	e008      	b.n	8003e0c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfe:	617b      	str	r3, [r7, #20]
        break;
 8003e00:	e004      	b.n	8003e0c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	76bb      	strb	r3, [r7, #26]
        break;
 8003e0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d074      	beq.n	8003efc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005a      	lsls	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	441a      	add	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b0f      	cmp	r3, #15
 8003e2e:	d916      	bls.n	8003e5e <UART_SetConfig+0x45a>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d212      	bcs.n	8003e5e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f023 030f 	bic.w	r3, r3, #15
 8003e40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	89fb      	ldrh	r3, [r7, #14]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	89fa      	ldrh	r2, [r7, #14]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e04e      	b.n	8003efc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	76bb      	strb	r3, [r7, #26]
 8003e62:	e04b      	b.n	8003efc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e64:	7efb      	ldrb	r3, [r7, #27]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d827      	bhi.n	8003eba <UART_SetConfig+0x4b6>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <UART_SetConfig+0x46c>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003e9d 	.word	0x08003e9d
 8003e78:	08003ea5 	.word	0x08003ea5
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003eab 	.word	0x08003eab
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7fe ff78 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8003e98:	6178      	str	r0, [r7, #20]
        break;
 8003e9a:	e013      	b.n	8003ec4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e9c:	f7fe ff8a 	bl	8002db4 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	6178      	str	r0, [r7, #20]
        break;
 8003ea2:	e00f      	b.n	8003ec4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <UART_SetConfig+0x510>)
 8003ea6:	617b      	str	r3, [r7, #20]
        break;
 8003ea8:	e00c      	b.n	8003ec4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fed7 	bl	8002c5c <HAL_RCC_GetSysClockFreq>
 8003eae:	6178      	str	r0, [r7, #20]
        break;
 8003eb0:	e008      	b.n	8003ec4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	617b      	str	r3, [r7, #20]
        break;
 8003eb8:	e004      	b.n	8003ec4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	76bb      	strb	r3, [r7, #26]
        break;
 8003ec2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d018      	beq.n	8003efc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	085a      	lsrs	r2, r3, #1
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	441a      	add	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d908      	bls.n	8003ef8 <UART_SetConfig+0x4f4>
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d204      	bcs.n	8003ef8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	e001      	b.n	8003efc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f08:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f14:	00f42400 	.word	0x00f42400

08003f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01a      	beq.n	800402e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d10a      	bne.n	800402e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
  }
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af02      	add	r7, sp, #8
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800406a:	f7fd f951 	bl	8001310 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b08      	cmp	r3, #8
 800407c:	d10e      	bne.n	800409c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800407e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f82a 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e020      	b.n	80040de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d10e      	bne.n	80040c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f814 	bl	80040e6 <UART_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e00a      	b.n	80040de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f6:	e05d      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040fe:	d059      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004100:	f7fd f906 	bl	8001310 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d302      	bcc.n	8004116 <UART_WaitOnFlagUntilTimeout+0x30>
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11b      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004124:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e042      	b.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d02b      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416a:	d123      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004184:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0201 	bic.w	r2, r2, #1
 8004194:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e00f      	b.n	80041d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d092      	beq.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041dc:	b084      	sub	sp, #16
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	f107 001c 	add.w	r0, r7, #28
 80041ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d122      	bne.n	800423a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800421c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421e:	2b01      	cmp	r3, #1
 8004220:	d105      	bne.n	800422e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa30 	bl	8004694 <USB_CoreReset>
 8004234:	4603      	mov	r3, r0
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e01a      	b.n	8004270 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa24 	bl	8004694 <USB_CoreReset>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
 8004262:	e005      	b.n	8004270 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800427c:	b004      	add	sp, #16
 800427e:	4770      	bx	lr

08004280 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f023 0201 	bic.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d106      	bne.n	80042ce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e00b      	b.n	80042e6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	e001      	b.n	80042e6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e003      	b.n	80042ee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80042e6:	2032      	movs	r0, #50	; 0x32
 80042e8:	f7fd f81e 	bl	8001328 <HAL_Delay>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042f8:	b084      	sub	sp, #16
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e009      	b.n	800432c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3340      	adds	r3, #64	; 0x40
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	2200      	movs	r2, #0
 8004324:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	3301      	adds	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	2b0e      	cmp	r3, #14
 8004330:	d9f2      	bls.n	8004318 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11c      	bne.n	8004372 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004346:	f043 0302 	orr.w	r3, r3, #2
 800434a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e005      	b.n	800437e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004384:	461a      	mov	r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	4619      	mov	r1, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004398:	461a      	mov	r2, r3
 800439a:	680b      	ldr	r3, [r1, #0]
 800439c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800439e:	2103      	movs	r1, #3
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f93d 	bl	8004620 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043a6:	2110      	movs	r1, #16
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f8f1 	bl	8004590 <USB_FlushTxFifo>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f90f 	bl	80045dc <USB_FlushRxFifo>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	461a      	mov	r2, r3
 80043dc:	2300      	movs	r3, #0
 80043de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e043      	b.n	800447a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004408:	d118      	bne.n	800443c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	461a      	mov	r2, r3
 800441e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e013      	b.n	800444e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	461a      	mov	r2, r3
 8004434:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e008      	b.n	800444e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	461a      	mov	r2, r3
 800446e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004472:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	3301      	adds	r3, #1
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	429a      	cmp	r2, r3
 8004480:	d3b7      	bcc.n	80043f2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e043      	b.n	8004510 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800449a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449e:	d118      	bne.n	80044d2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	461a      	mov	r2, r3
 80044b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e013      	b.n	80044e4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	e008      	b.n	80044e4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044de:	461a      	mov	r2, r3
 80044e0:	2300      	movs	r3, #0
 80044e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	461a      	mov	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	015a      	lsls	r2, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004502:	461a      	mov	r2, r3
 8004504:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004508:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3301      	adds	r3, #1
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	429a      	cmp	r2, r3
 8004516:	d3b7      	bcc.n	8004488 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800452a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004538:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <USB_DevInit+0x294>)
 800454c:	4313      	orrs	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	f043 0208 	orr.w	r2, r3, #8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d107      	bne.n	800457a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800457a:	7dfb      	ldrb	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004586:	b004      	add	sp, #16
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	803c3800 	.word	0x803c3800

08004590 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	019b      	lsls	r3, r3, #6
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <USB_FlushTxFifo+0x48>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e006      	b.n	80045ca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d0f0      	beq.n	80045aa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	00030d40 	.word	0x00030d40

080045dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2210      	movs	r2, #16
 80045ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4a09      	ldr	r2, [pc, #36]	; (800461c <USB_FlushRxFifo+0x40>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e006      	b.n	800460e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b10      	cmp	r3, #16
 800460a:	d0f0      	beq.n	80045ee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	00030d40 	.word	0x00030d40

08004620 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	68f9      	ldr	r1, [r7, #12]
 800463c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004640:	4313      	orrs	r3, r2
 8004642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004652:	b480      	push	{r7}
 8004654:	b085      	sub	sp, #20
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800466c:	f023 0303 	bic.w	r3, r3, #3
 8004670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <USB_CoreReset+0x64>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e01b      	b.n	80046ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	daf2      	bge.n	80046a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <USB_CoreReset+0x64>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e006      	b.n	80046ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d0f0      	beq.n	80046ca <USB_CoreReset+0x36>

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	00030d40 	.word	0x00030d40

080046fc <ledctrl_blinkled>:



//-------------------------EXPORTED FUNCTIONS-------------------------------
int32_t ledctrl_blinkled(uint32_t num_blink, uint32_t ms_blink_duration)
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	if(num_blink < MIN_NUM_BLINKS){
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <ledctrl_blinkled+0x16>
		return LEDCTRL_ERR;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004710:	e04b      	b.n	80047aa <ledctrl_blinkled+0xae>
	}
	if(num_blink > MAX_NUM_BLINKS){
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b09      	cmp	r3, #9
 8004716:	d902      	bls.n	800471e <ledctrl_blinkled+0x22>
		return LEDCTRL_ERR;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800471c:	e045      	b.n	80047aa <ledctrl_blinkled+0xae>
	}
	if(ms_blink_duration < MIN_BLINK_DURATION){
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d102      	bne.n	800472a <ledctrl_blinkled+0x2e>
		return LEDCTRL_ERR;
 8004724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004728:	e03f      	b.n	80047aa <ledctrl_blinkled+0xae>
	}
	if(ms_blink_duration > MAX_BLINK_DURATION){
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004730:	4293      	cmp	r3, r2
 8004732:	d902      	bls.n	800473a <ledctrl_blinkled+0x3e>
		return LEDCTRL_ERR;
 8004734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004738:	e037      	b.n	80047aa <ledctrl_blinkled+0xae>
	}
	ms_blink_duration /=2;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8004740:	2200      	movs	r2, #0
 8004742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004746:	481b      	ldr	r0, [pc, #108]	; (80047b4 <ledctrl_blinkled+0xb8>)
 8004748:	f7fd f9d6 	bl	8001af8 <HAL_GPIO_WritePin>
	for(int i=0;i<(num_blink);i++){
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e026      	b.n	80047a0 <ledctrl_blinkled+0xa4>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8004752:	2201      	movs	r2, #1
 8004754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004758:	4816      	ldr	r0, [pc, #88]	; (80047b4 <ledctrl_blinkled+0xb8>)
 800475a:	f7fd f9cd 	bl	8001af8 <HAL_GPIO_WritePin>
		uint32_t t = HAL_GetTick();
 800475e:	f7fc fdd7 	bl	8001310 <HAL_GetTick>
 8004762:	60b8      	str	r0, [r7, #8]
		while((t+ms_blink_duration) > HAL_GetTick());
 8004764:	bf00      	nop
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	18d4      	adds	r4, r2, r3
 800476c:	f7fc fdd0 	bl	8001310 <HAL_GetTick>
 8004770:	4603      	mov	r3, r0
 8004772:	429c      	cmp	r4, r3
 8004774:	d8f7      	bhi.n	8004766 <ledctrl_blinkled+0x6a>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8004776:	2200      	movs	r2, #0
 8004778:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800477c:	480d      	ldr	r0, [pc, #52]	; (80047b4 <ledctrl_blinkled+0xb8>)
 800477e:	f7fd f9bb 	bl	8001af8 <HAL_GPIO_WritePin>
		t = HAL_GetTick();
 8004782:	f7fc fdc5 	bl	8001310 <HAL_GetTick>
 8004786:	60b8      	str	r0, [r7, #8]
		while((t+ms_blink_duration) > HAL_GetTick());
 8004788:	bf00      	nop
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	18d4      	adds	r4, r2, r3
 8004790:	f7fc fdbe 	bl	8001310 <HAL_GetTick>
 8004794:	4603      	mov	r3, r0
 8004796:	429c      	cmp	r4, r3
 8004798:	d8f7      	bhi.n	800478a <ledctrl_blinkled+0x8e>
	for(int i=0;i<(num_blink);i++){
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3301      	adds	r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d8d4      	bhi.n	8004752 <ledctrl_blinkled+0x56>
	}
	return LEDCTRL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd90      	pop	{r4, r7, pc}
 80047b2:	bf00      	nop
 80047b4:	48000400 	.word	0x48000400

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4e0d      	ldr	r6, [pc, #52]	; (80047f0 <__libc_init_array+0x38>)
 80047bc:	4c0d      	ldr	r4, [pc, #52]	; (80047f4 <__libc_init_array+0x3c>)
 80047be:	1ba4      	subs	r4, r4, r6
 80047c0:	10a4      	asrs	r4, r4, #2
 80047c2:	2500      	movs	r5, #0
 80047c4:	42a5      	cmp	r5, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	4e0b      	ldr	r6, [pc, #44]	; (80047f8 <__libc_init_array+0x40>)
 80047ca:	4c0c      	ldr	r4, [pc, #48]	; (80047fc <__libc_init_array+0x44>)
 80047cc:	f000 f820 	bl	8004810 <_init>
 80047d0:	1ba4      	subs	r4, r4, r6
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	2500      	movs	r5, #0
 80047d6:	42a5      	cmp	r5, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047e0:	4798      	blx	r3
 80047e2:	3501      	adds	r5, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047ea:	4798      	blx	r3
 80047ec:	3501      	adds	r5, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	08004878 	.word	0x08004878
 80047f4:	08004878 	.word	0x08004878
 80047f8:	08004878 	.word	0x08004878
 80047fc:	0800487c 	.word	0x0800487c

08004800 <memset>:
 8004800:	4402      	add	r2, r0
 8004802:	4603      	mov	r3, r0
 8004804:	4293      	cmp	r3, r2
 8004806:	d100      	bne.n	800480a <memset+0xa>
 8004808:	4770      	bx	lr
 800480a:	f803 1b01 	strb.w	r1, [r3], #1
 800480e:	e7f9      	b.n	8004804 <memset+0x4>

08004810 <_init>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	bf00      	nop
 8004814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004816:	bc08      	pop	{r3}
 8004818:	469e      	mov	lr, r3
 800481a:	4770      	bx	lr

0800481c <_fini>:
 800481c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481e:	bf00      	nop
 8004820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004822:	bc08      	pop	{r3}
 8004824:	469e      	mov	lr, r3
 8004826:	4770      	bx	lr
